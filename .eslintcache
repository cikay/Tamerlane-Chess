[{"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js":"1","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js":"2","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js":"3","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js":"4","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/helpers.js":"5","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js":"6","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js":"7","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js":"8","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js":"9"},{"size":500,"mtime":1610695920352,"results":"10","hashOfConfig":"11"},{"size":203,"mtime":1610971058234,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610695920352,"results":"13","hashOfConfig":"11"},{"size":4585,"mtime":1611079619816,"results":"14","hashOfConfig":"11"},{"size":4276,"mtime":1611079361422,"results":"15","hashOfConfig":"11"},{"size":1218,"mtime":1611077740856,"results":"16","hashOfConfig":"11"},{"size":1551,"mtime":1611077725533,"results":"17","hashOfConfig":"11"},{"size":252,"mtime":1611050195191,"results":"18","hashOfConfig":"11"},{"size":11542,"mtime":1610992622584,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"qgqcp2",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js",[],["40","41"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js",["42","43","44","45","46"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/helpers.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js",["47","48","49","50","51","52","53","54","55","56","57"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js",["58","59","60"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js",["61"],"import { includeInTwoDimensArray } from './helper'\nimport {\n  Camel,\n  Catapult,\n  Elephant,\n  General,\n  Giraffe,\n  Knight,\n  Vizier,\n  WarEngine,\n  Rook,\n  PawnOfPawn,\n  CamelPawn,\n  CatapultPawn,\n  ElephantPawn,\n  GeneralPawn,\n  GiraffePawn,\n  KnightPawn,\n  VizierPawn,\n  WarEnginePawn,\n  RookPawn,\n} from './Pieces'\nimport { FEN_TYPE, COLOR } from '../Pieces/types'\n\nexport default class TamerlaneChess {\n  #rowCount\n  #colCount\n  #board = Array.from(Array(10), () => new Array(13))\n  #opponentBoard = Array.from(Array(10), () => new Array(13))\n  #player = 'player'\n  #opponetPlayer = 'opponent'\n  #turn = 'w'\n  #time1 = 900\n  #time2 = 900\n  #storedTime1 = 0\n  #storedTime2 = 0\n  #winner = null\n  #last = null\n  #copy = true\n  #ready = false\n  #whiteKingCount = 1\n  #blackKingCount\n  #blackColor = 'b'\n  #whiteColor = 'w'\n  #playerColor\n  #opponentPlayerColor\n\n  constructor(playerColor, fen = null) {\n    this.#playerColor = playerColor\n    this.#opponentPlayerColor =\n      this.#playerColor === this.#blackColor\n        ? this.#blackColor\n        : this.#whiteColor\n\n    for (const row = 0; row < 10; row++) {\n      for (const col = 1; col < 12; col++) {\n        this.#board[row][col] = 0\n        this.#opponentBoard[row][col] = 0\n      }\n    }\n    //citadels square\n    this.#board[1][0] = 0\n    this.#board[8][12] = 0\n    this.#opponentBoard[1][0] = 0\n    this.#opponentBoard[8][12] = 0\n    //Beyaz taşlar ekranda aşağıda ise\n    const defaultWhitePiecesAtBottomFen =\n      'f1d1i1i1d1f/kamzgsvzmak1/pxcbyqehtnr/92/92/92/92/PXCBYQEHTNR/KAMZGSVZMAK1/F1D1I1I1D1F/ w'\n    //Siyah taşlar ekranda aşağıda ise\n    const defaultBlackPiecesAtBottomFen =\n      'F1D1I1I1D1F/KAMZGSVZMAK1/PXCBYQEHTNR/92/92/92/92/pxcbyqehtnr/kamzgsvzmak1/f1d1i1i1d1f/ w'\n\n    if (fen === null) {\n      fen =\n        this.#playerColor === this.#whiteColor\n          ? defaultWhitePiecesAtBottomFen\n          : defaultBlackPiecesAtBottomFen\n    }\n    const opponentFen = this.#computeOpponentFen(fen)\n    this.#parseFen(fen)\n    this.#parseFen(opponentFen)\n  }\n\n  getPiece(row, col) {\n    return this.#board[row][col]\n  }\n\n  getMoves(row, col) {\n    return this.#board[row][col].validMoves()\n  }\n\n  getTurn() {\n    return this.#turn\n  }\n\n  makeMove(from, to) {\n    const color = this.#board[from.row][from.to]\n    const checkedBefore = this.#isChecked(color)\n    let changed = true\n    let copyBoard = [...this.#board]\n    // if(copyBoard[from.row][from.col].pawn){\n\n    // }\n    const movingPiece = copyBoard[from.row][from.col]\n    movingPiece.changePosition(to.row, to.col)\n    copyBoard[to.row][to.col] = copyBoard[from.row][from.col]\n    copyBoard[from.row][from.col] = 0\n    this.#board = copyBoard\n\n    if (this.#isChecked(color) || (checkedBefore && this.#isChecked(color))) {\n      changed = false\n      copyBoard = [...this.#board]\n      copyBoard[to.row][to.col].changePosition(from.row, from.col)\n      copyBoard[from.row][from.col] = copyBoard[to.row][to.col]\n      copyBoard[to.row][to.col] = 0\n      this.#board = copyBoard\n    } else {\n      this.#resetSelected()\n    }\n    this.#updateMoves()\n    if (changed) {\n      this.#last = [from, to]\n    }\n    // return changed\n    //return game status\n    const move = {}\n    const moveInOpponentBoard = this.#computeMoveInOpponentBoard(\n      move.from,\n      move.to\n    )\n    //saved Move always according to white player\n    let savedMove\n    if (this.#playerColor === COLOR.white) {\n      savedMove = move\n    } else {\n      savedMove = moveInOpponentBoard\n    }\n    return {\n      status: '',\n      move,\n      moveInOpponentBoard,\n      savedMove,\n    }\n  }\n\n  select(row, col, color) {\n    let changed = false\n    let prev = [-1, -1]\n    for (const i = 0; i < this.#rowCount; i++) {\n      for (const j = 1; j < this.#colCount - 1; j++) {\n        if (\n          typeof this.#board[i][j] === 'object' &&\n          this.#board[i][j].selected\n        ) {\n          prev = [i, j]\n        }\n      }\n    }\n\n    if (\n      this.#board[row][col] === 0 &&\n      JSON.stringify(prev) !== JSON.stringify([-1, -1])\n    ) {\n      const moves = this.#board[prev[0]][prev[1]].moveList\n      if (includeInTwoDimensArray(moves, [row, col])) {\n        changed = this.#move(prev, [row, col], color)\n      }\n    } else {\n      // if(prev)\n    }\n  }\n\n  //Helper functions\n  #computeMoveInOpponentBoard(from, to) {\n    from.row = this.#rowCount - from.row - 1\n    from.col = this.#colCount - from.col - 1\n    to.row = this.#rowCount - to.row - 1\n    to.col = this.#colCount - to.colCount - 1\n    return { from, to }\n  }\n\n  #computeOpponentFen(fen) {\n    const lastSlahIndex = fen.lastIndexOf('/')\n    let opponentFen = ''\n    for (let i = 0; i < fen.length; i++) {\n      if (i === lastSlahIndex) {\n        break\n      }\n\n      opponentFen = `${fen[i]}${opponentFen}`\n    }\n    let remainStringIndex = lastSlahIndex\n    for (; remainStringIndex < fen.length; remainStringIndex++) {\n      opponentFen = `${opponentFen}${fen[remainStringIndex]}`\n    }\n\n    return opponentFen\n  }\n\n  #updateMoves() {\n    for (const row = 0; i < this.#rowCount; i++) {\n      for (const col = 1; j < this.#colCount - 1; j++) {\n        const piece = this.#board[row][col]\n        if (piece !== 0) {\n          piece.updateValidMoves(this.#board)\n        }\n      }\n    }\n  }\n\n  #getOpponentValues() {}\n\n  #draw(win, color) {}\n  #getDangerMoves(color) {}\n\n  #isChecked(color) {\n    //şahın evindeki taşlar kontrol edilecek\n    this.#updateMoves()\n    const dangerMoves = this.#getDangerMoves(color)\n    const kingPositions = []\n    for (const i = 0; i < this.#rowCount; i++) {\n      for (const j = 1; j < this.#colCount; j++) {\n        const piece = this.#board[i][j]\n        if (typeof piece === 'object' && piece.king && piece.color === color) {\n          kingPositions.push([i, j])\n        }\n      }\n    }\n\n    if (kingPositions.length > 1 && dangerMoves.includes(kingPositions[0])) {\n      return true\n    }\n    return false\n  }\n\n  #resetSelected() {\n    for (const i = 0; i < this.#rowCount; i++) {\n      for (const j = 1; j < this.#colCount - 1; j++) {\n        const piece = this.#board[i][j]\n        if (piece === 'object') {\n          piece.selected = false\n        }\n      }\n    }\n  }\n\n  #checkMate(color) {}\n\n  #parseFen(fen, fenType) {\n    let BOARD\n    if (fenType === FEN_TYPE.player) BOARD = this.#board\n    else if (fenType === FEN_TYPE.opponent) BOARD = this.#opponentBoard\n    else throw Error('fen type not matching')\n\n    let fenCounter = 0\n    let row = 0\n    let col = this.#colCount - 1\n\n    while (row < this.#rowCount && fenCounter < fen.length) {\n      let emptySquareCount = 1\n\n      switch (fen[fenCounter]) {\n        case 'p':\n          BOARD[row][col] = new PawnOfPawn(row, col, this.#blackColor)\n          break\n        case 'b':\n          BOARD[row][col] = new ElephantPawn(row, col, this.#blackColor)\n          break\n        case 'c':\n          BOARD[row][col] = new CamelPawn(row, col, this.#blackColor)\n          break\n        case 'x':\n          BOARD[row][col] = new WarEnginePawn(row, col, this.#blackColor)\n          break\n        case 'r':\n          BOARD[row][col] = new RookPawn(row, col, this.#blackColor)\n          break\n        case 'n':\n          BOARD[row][col] = new KnightPawn(row, col, this.#blackColor)\n          break\n        case 't':\n          BOARD[row][col] = new CatapultPawn(rol, col, this.#blackColor)\n          break\n        case 'h':\n          BOARD[row][col] = new GiraffePawn(row, col, this.#blackColor)\n          break\n        case 'y':\n          BOARD[row][col] = new VizierPawn(row, col, this.#blackColor)\n          break\n        case 'q':\n          BOARD[row][col] = new KingPawn(row, col, this.#blackColor)\n          break\n        case 'e':\n          BOARD[row][col] = new GeneralPawn(row, col, this.#blackColor)\n          break\n        case 'f':\n          BOARD[row][col] = new Elephant(row, col, this.#blackColor)\n          break\n        case 'd':\n          BOARD[row][col] = new Camel(row, col, this.#blackColor)\n          break\n        case 'i':\n          BOARD[row][col] = new WarEngine(row, col, this.#blackColor)\n          break\n        case 'k':\n          BOARD[row][col] = new Rook(row, col, this.#blackColor)\n          break\n        case 'a':\n          BOARD[row][col] = new Knight(row, col, this.#color)\n          break\n        case 'm':\n          BOARD[row][col] = new Catapult(row, col, this.#blackColor)\n          break\n        case 'z':\n          BOARD[row][col] = new Giraffe(row, col, this.#blackColor)\n          break\n        case 'g':\n          BOARD[row][col] = new General(row, col, this.#blackColor)\n          break\n        case 's':\n          BOARD[row][col] = new King(row, col, this.#blackColor)\n          break\n        case 'v':\n          BOARD[row][col] = new Vizier(row, col, this.#blackColor)\n          break\n        case 'P':\n          BOARD[row][col] = new PawnOfPawn(row, col, this.#whiteColor)\n          break\n        case 'B':\n          BOARD[row][col] = new ElephantPawn(row, col, this.#whiteColor)\n          break\n        case 'C':\n          BOARD[row][col] = new CamelPawn(row, col, this.#whiteColor)\n          break\n        case 'X':\n          BOARD[row][col] = new WarEnginePawn(row, col, this.#whiteColor)\n          break\n        case 'R':\n          BOARD[row][col] = new RookPawn(row, col, this.#whiteColor)\n          break\n        case 'N':\n          BOARD[row][col] = new KnightPawn(row, col, this.#whiteColor)\n          break\n        case 'T':\n          BOARD[row][col] = new CatapultPawn(row, col, this.#whiteColor)\n          break\n        case 'H':\n          BOARD[row][col] = new GiraffePawn(row, col, this.#whiteColor)\n          break\n        case 'Y':\n          BOARD[row][col] = new VizierPawn(row, col, this.#whiteColor)\n          break\n        case 'Q':\n          BOARD[row][col] = new KingPawn(row, col, this.#whiteColor)\n          break\n        case 'E':\n          BOARD[row][col] = new GeneralPawn(row, col, this.#whiteColor)\n          break\n        case 'F':\n          BOARD[row][col] = new Elephant(row, col, this.#whiteColor)\n          break\n        case 'D':\n          BOARD[row][col] = new Camel(row, col, this.#whiteColor)\n          break\n        case 'I':\n          BOARD[row][col] = new WarEngine(row, col, this.#whiteColor)\n          break\n        case 'K':\n          BOARD[row][col] = new Rook(row, col, this.#whiteColor)\n          break\n        case 'A':\n          BOARD[row][col] = new Knight(row, col, this.#whiteColor)\n          break\n        case 'M':\n          BOARD[row][col] = new Catapult(row, col, this.#whiteColor)\n          break\n        case 'Z':\n          BOARD[row][col] = new Giraffe(row, col, this.#whiteColor)\n          break\n        case 'G':\n          BOARD[row][col] = new General(row, col, this.#whiteColor)\n          break\n        case 'S':\n          BOARD[row][col] = new King(row, col, this.#whiteColor)\n          break\n        case 'V':\n          BOARD[row][col] = new Vizier(row, col, this.#whiteColor)\n          break\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          emptySquareCount = Number(fen[fenCounter])\n          break\n        case '/':\n        case ' ':\n          row += 1\n          col = 1\n          fenCounter++\n          continue\n        default:\n          console.log('Fen ERROR')\n          return\n      }\n\n      for (i = 0; i < emptySquareCount; i++) {\n        col += 1\n        BOARD[row][col] = 0\n      }\n      fenCounter++\n    }\n  }\n}\n",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":58,"nodeType":"68","messageId":"69","endLine":1,"endColumn":65},{"ruleId":"66","severity":1,"message":"70","line":19,"column":7,"nodeType":"68","messageId":"69","endLine":19,"endColumn":19},{"ruleId":"66","severity":1,"message":"71","line":80,"column":9,"nodeType":"68","messageId":"69","endLine":80,"endColumn":30},{"ruleId":"66","severity":1,"message":"72","line":88,"column":9,"nodeType":"68","messageId":"69","endLine":88,"endColumn":24},{"ruleId":"66","severity":1,"message":"73","line":131,"column":9,"nodeType":"68","messageId":"69","endLine":131,"endColumn":20},{"ruleId":"66","severity":1,"message":"74","line":1,"column":28,"nodeType":"68","messageId":"69","endLine":1,"endColumn":36},{"ruleId":"66","severity":1,"message":"67","line":1,"column":38,"nodeType":"68","messageId":"69","endLine":1,"endColumn":45},{"ruleId":"66","severity":1,"message":"75","line":4,"column":8,"nodeType":"68","messageId":"69","endLine":4,"endColumn":13},{"ruleId":"66","severity":1,"message":"76","line":10,"column":5,"nodeType":"68","messageId":"69","endLine":10,"endColumn":20},{"ruleId":"66","severity":1,"message":"77","line":11,"column":5,"nodeType":"68","messageId":"69","endLine":11,"endColumn":21},{"ruleId":"66","severity":1,"message":"78","line":12,"column":5,"nodeType":"68","messageId":"69","endLine":12,"endColumn":20},{"ruleId":"66","severity":1,"message":"73","line":18,"column":9,"nodeType":"68","messageId":"69","endLine":18,"endColumn":20},{"ruleId":"66","severity":1,"message":"79","line":20,"column":9,"nodeType":"68","messageId":"69","endLine":20,"endColumn":19},{"ruleId":"66","severity":1,"message":"80","line":21,"column":9,"nodeType":"68","messageId":"69","endLine":21,"endColumn":19},{"ruleId":"66","severity":1,"message":"81","line":23,"column":9,"nodeType":"68","messageId":"69","endLine":23,"endColumn":29},{"ruleId":"66","severity":1,"message":"82","line":24,"column":9,"nodeType":"68","messageId":"69","endLine":24,"endColumn":29},{"ruleId":"66","severity":1,"message":"83","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":17},{"ruleId":"66","severity":1,"message":"84","line":29,"column":9,"nodeType":"68","messageId":"69","endLine":29,"endColumn":20},{"ruleId":"66","severity":1,"message":"85","line":55,"column":7,"nodeType":"68","messageId":"69","endLine":55,"endColumn":11},{"ruleId":null,"fatal":true,"severity":2,"message":"86","line":174,"column":3},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'defaultProps' is assigned a value but never used.","'removeHighlightSquare' is assigned a value but never used.","'highlightSquare' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'useState' is defined but never used.","'Piece' is defined but never used.","'currentPosition' is assigned a value but never used.","'lightSquareStyle' is assigned a value but never used.","'darkSquareStyle' is assigned a value but never used.","'handleDrag' is assigned a value but never used.","'handleDrop' is assigned a value but never used.","'getSquareCoordinates' is assigned a value but never used.","'setSquareCoordinates' is assigned a value but never used.","'PropTypes' is defined but never used.","'squareStyle' is assigned a value but never used.","'size' is assigned a value but never used.","Parsing error: This experimental syntax requires enabling the parser plugin: 'classPrivateMethods'\n\n\u001b[0m \u001b[90m 172 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 173 | \u001b[39m  \u001b[90m//Helper functions\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 174 | \u001b[39m  \u001b[33m#\u001b[39mcomputeMoveInOpponentBoard(from\u001b[33m,\u001b[39m to) {\u001b[0m\n\u001b[0m \u001b[90m     | \u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 175 | \u001b[39m    from\u001b[33m.\u001b[39mrow \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33m#\u001b[39mrowCount \u001b[33m-\u001b[39m from\u001b[33m.\u001b[39mrow \u001b[33m-\u001b[39m \u001b[35m1\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 176 | \u001b[39m    from\u001b[33m.\u001b[39mcol \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33m#\u001b[39mcolCount \u001b[33m-\u001b[39m from\u001b[33m.\u001b[39mcol \u001b[33m-\u001b[39m \u001b[35m1\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 177 | \u001b[39m    to\u001b[33m.\u001b[39mrow \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33m#\u001b[39mrowCount \u001b[33m-\u001b[39m to\u001b[33m.\u001b[39mrow \u001b[33m-\u001b[39m \u001b[35m1\u001b[39m\u001b[0m","no-global-assign","no-unsafe-negation"]