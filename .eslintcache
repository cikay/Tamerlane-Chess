[{"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js":"1","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js":"2","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js":"3","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js":"4","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js":"5","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js":"6","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js":"7","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js":"8","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js":"9","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js":"10","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js":"11","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js":"12","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js":"13","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js":"14","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js":"15","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js":"16","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js":"17","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js":"18","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js":"19","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js":"20","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js":"21","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js":"22","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js":"23","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js":"24","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessReducers.js":"25","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessActionTypes.js":"26","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/helper/Fen.js":"27"},{"size":500,"mtime":1610695920352,"results":"28","hashOfConfig":"29"},{"size":203,"mtime":1610971058234,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1610695920352,"results":"31","hashOfConfig":"29"},{"size":3387,"mtime":1611519055459,"results":"32","hashOfConfig":"29"},{"size":1439,"mtime":1611242597940,"results":"33","hashOfConfig":"29"},{"size":1474,"mtime":1611394900621,"results":"34","hashOfConfig":"29"},{"size":158,"mtime":1611136956381,"results":"35","hashOfConfig":"29"},{"size":14426,"mtime":1611604439336,"results":"36","hashOfConfig":"29"},{"size":763,"mtime":1611134382815,"results":"37","hashOfConfig":"29"},{"size":619,"mtime":1611604469416,"results":"38","hashOfConfig":"29"},{"size":460,"mtime":1611509604056,"results":"39","hashOfConfig":"29"},{"size":1846,"mtime":1611580827920,"results":"40","hashOfConfig":"29"},{"size":333,"mtime":1611503981298,"results":"41","hashOfConfig":"29"},{"size":332,"mtime":1611503985710,"results":"42","hashOfConfig":"29"},{"size":382,"mtime":1611503994194,"results":"43","hashOfConfig":"29"},{"size":318,"mtime":1611504001566,"results":"44","hashOfConfig":"29"},{"size":256,"mtime":1611665916773,"results":"45","hashOfConfig":"29"},{"size":521,"mtime":1611571116562,"results":"46","hashOfConfig":"29"},{"size":967,"mtime":1611568374033,"results":"47","hashOfConfig":"29"},{"size":5457,"mtime":1611604525921,"results":"48","hashOfConfig":"29"},{"size":584,"mtime":1611604801993,"results":"49","hashOfConfig":"29"},{"size":1057,"mtime":1611604491189,"results":"50","hashOfConfig":"29"},{"size":156,"mtime":1610813905318,"results":"51","hashOfConfig":"29"},{"size":563,"mtime":1611503990450,"results":"52","hashOfConfig":"29"},{"size":1894,"mtime":1611496554001,"results":"53","hashOfConfig":"29"},{"size":217,"mtime":1611395259331,"results":"54","hashOfConfig":"29"},{"size":4884,"mtime":1611245872560,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"qgqcp2",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js",[],["119","120"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js",["121","122","123"],"import { useEffect, useContext, createContext, useReducer } from 'react'\n\nimport Board from './Board'\nimport tamerlaneChessReducer, {\n  initialState,\n} from '../reducers/tamerlaneChessReducers'\nimport {\n  START_GAME,\n  SET_HIGHLIGHTING,\n  SELECT_PIECE,\n  MOVE,\n} from '../reducers/tamerlaneChessActionTypes'\n\nexport const useTamerlaneChessContext = () => useContext(TamerlaneChessContext)\nconst TamerlaneChessContext = createContext()\nexport default function TamerlaneChessBoard() {\n  const [state, dispatch] = useReducer(tamerlaneChessReducer, initialState)\n  console.log('Provider called')\n  useEffect(() => {\n    dispatch({ type: START_GAME })\n  }, [])\n\n  const removeHighlightSquare = () => {\n    const { pieceSquare, history } = state\n    // setState((prevState) => ({\n    //   ...prevState,\n    //   fromSquare: '',\n    //   squareStyles: squareStyling({ pieceSquare, history }),\n    // }))\n  }\n  const highlightSquare = (squaresToHighlight) => {\n    const highlightStyles = squaresToHighlight.reduce((a, c) => {\n      return {\n        ...a,\n        ...{\n          [c]: {\n            background:\n              'radial-gradient(circle, rgb(125, 226, 1) 36%, transparent 40%)',\n            borderRadius: '50%',\n          },\n        },\n        ...squareStyling({\n          history: state.history,\n          pieceSquare: state.pieceSquare,\n        }),\n      }\n    }, {})\n    const payload = {\n      highlightStyles,\n    }\n    dispatch({ type: SET_HIGHLIGHTING, payload })\n  }\n\n  const handleClick = (square) => {\n    const { tamerlaneChess } = state\n    console.log('from square', state.fromSquare)\n    console.log('clicked square', square)\n    const piece = tamerlaneChess.getPiece(square)\n    console.log(`clicked piece`)\n    console.log(piece)\n    const turn = tamerlaneChess.getTurn()\n\n    if (piece.color !== turn && !state.fromSquare) return\n    \n    // highlight possible moves\n    if (piece.color === turn) {\n      const moves = tamerlaneChess.getMoves(square)\n      console.log('posible move')\n      console.log(moves)\n      if (moves.length === 0) return\n      const squaresToHighlight = []\n\n      moves.forEach((move) => {\n        squaresToHighlight.push(move)\n      })\n      const payload = {\n        fromSquare: square,\n      }\n      dispatch({ type: SELECT_PIECE, payload })\n      highlightSquare(squaresToHighlight)\n    }\n    // make move\n    else {\n      removeHighlightSquare()\n      console.log('trying to make move')\n      const move = tamerlaneChess.makeMove(state.fromSquare, square)\n      if (move === null) return\n      const payload = { from: state.fromSquare, to: square }\n      dispatch({ type: MOVE, payload })\n    }\n  }\n\n  const setPosition = ({ sourceSquare, targetSquare, piece }) => {}\n\n  const value = {\n    ...state,\n    handleClick,\n  }\n  return (\n    <TamerlaneChessContext.Provider value={value}>\n      <Board></Board>\n    </TamerlaneChessContext.Provider>\n  )\n}\n\nfunction squareStyling({ pieceSquare, history }) {\n  const sourceSquare = history.length && history[history.length - 1].from\n  const targetSquare = history.length && history[history.length - 1].to\n\n  return {\n    [pieceSquare]: { backgroundColor: 'rgba(255, 255, 0, 0.4)' },\n    ...(history.length && {\n      [sourceSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      },\n      [targetSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      },\n    }),\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js",["124","125","126","127","128","129","130","131","132","133","134"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport './board.css'\r\nimport Square from './Square'\r\nimport Piece from './Piece'\r\nimport { COLUMNS } from '../helper/helpers'\r\nimport { useTamerlaneChessContext } from './index'\r\n// import TamerlaneChess from '../tamerlane-chess'\r\nconst Board = () => {\r\n  const {\r\n    currentPosition,\r\n    lightSquareStyle,\r\n    darkSquareStyle,\r\n  } = useTamerlaneChessContext()\r\n  // let game\r\n  useEffect(() => {\r\n    // game = new TamerlaneChess()\r\n  }, [])\r\n  const setPosition = (sourceSquare, targetSquare, piece) => {}\r\n\r\n  const handleDrag = () => {}\r\n  const handleDrop = (sourceSquare, targetSquare) => {}\r\n\r\n  const getSquareCoordinates = () => {}\r\n  const setSquareCoordinates = () => {}\r\n  let squareColor = 'black'\r\n  return (\r\n    <div id='GameBoard'>\r\n      {[...Array(10)].map((_, r) => {\r\n        return [...Array(11)].map((_, c) => {\r\n          const row = 10 - r\r\n          const square = `${COLUMNS[c]}${row}`\r\n          squareColor = squareColor === 'black' ? 'white' : 'black'\r\n          return (\r\n            <Square\r\n              key={square}\r\n              square={square}\r\n              squareColor={squareColor}\r\n              row={row}\r\n              col={c + 1}\r\n            ></Square>\r\n          )\r\n        })\r\n      })}\r\n      {/* <Square key='x' square={'x'}></Square>\r\n      <Square key='y' square={'y'}></Square> */}\r\n    </div>\r\n  )\r\n}\r\nexport default Board\r\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js",["135"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Piece from './Piece'\nimport { useTamerlaneChessContext } from './index'\n\nconst Square = ({ square, squareColor, row, col }) => {\n  const {\n    darkSquareStyle,\n    lightSquareStyle,\n    currentPosition,\n    handleClick,\n    squareStyles,\n  } = useTamerlaneChessContext()\n\n  const hasPiece = (currentPosition, square) => {\n    const keys = Object.keys(currentPosition)\n    return currentPosition && keys && keys.includes(square)\n  }\n  const getPieceName = (square) => {\n    return currentPosition[square]\n  }\n\n  const squareStyle = () => {\n    return {\n      ...(squareColor === 'black' ? darkSquareStyle : lightSquareStyle),\n    }\n  }\n\n  return (\n    <div\n      style={squareStyle()}\n      id={square}\n      onClick={() => handleClick(square)}\n      className={`file${col} rank${row}`}\n    > \n      <div style={{ ...squareStyles[square], ...size() }}>\n        {hasPiece(currentPosition, square) && (\n          <Piece pieceName={getPieceName(square)}></Piece>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst size = () => ({\n  height: 50,\n  width: 50,\n})\n\n// Square.PropTypes = {\n//   width: PropTypes.func,\n//   squareColor: PropTypes.oneOf(['white', 'black']),\n//   children: PropTypes.oneOfType([PropTypes.array, PropTypes.node]),\n//   square: PropTypes.string,\n//   lightSquareStyle: PropTypes.object,\n//   darkSquareStyle: PropTypes.object,\n//   roughSquare: PropTypes.func,\n// }\n\nexport default Square\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js",["136","137"],"import { includeInTwoDimensArray } from './helper'\nimport {\n  King,\n  Camel,\n  Catapult,\n  Elephant,\n  General,\n  Giraffe,\n  Knight,\n  Vizier,\n  WarEngine,\n  Rook,\n  PawnOfPawn,\n  CamelPawn,\n  CatapultPawn,\n  ElephantPawn,\n  GeneralPawn,\n  GiraffePawn,\n  KnightPawn,\n  VizierPawn,\n  WarEnginePawn,\n  RookPawn,\n  KingPawn,\n} from './Pieces'\nimport { FEN_TYPE, COLOR } from './types'\nimport { positionChecker, getMoveList } from './helper'\nconst COLUMNS = 'abcdefghijk'.split('')\n\nexport default class TamerlaneChess {\n  #rowCount = 10\n  static #lastRowIndex = 9\n  static #firstRowIndex = 0\n  #colCount = 11\n  #board = Array.from(Array(10), () => new Array(11))\n  #opponentBoard = Array.from(Array(10), () => new Array(11))\n  #player = 'player'\n  #opponetPlayer = 'opponent'\n  #turn = 'w'\n  #time1 = 900\n  #time2 = 900\n  #storedTime1 = 0\n  #storedTime2 = 0\n  #winner = null\n  #last = null\n  #copy = true\n  #ready = false\n  #whiteKingCount = 1\n  #blackKingCount\n  #blackColor = 'b'\n  #whiteColor = 'w'\n  #playerColor\n  #opponentPlayerColor\n\n  constructor(playerColor, fen = null) {\n    this.#playerColor = playerColor\n    this.#opponentPlayerColor =\n      this.#playerColor === this.#blackColor\n        ? this.#blackColor\n        : this.#whiteColor\n\n    for (let row = 0; row < 10; row++) {\n      for (let col = 0; col < 11; col++) {\n        this.#board[row][col] = 0\n        this.#opponentBoard[row][col] = 0\n      }\n    }\n\n    //Beyaz taşlar ekranda aşağıda ise\n    /*\n    'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBYQEHTNR/KAMZGSVZMAK/F1D1I1I1D1F*2 w'\n    */\n    const defaultWhitePiecesAtBottomFen =\n      'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBEQYHTNR/KAMZGSVZMAK/F1D1I1I1D1F/ w'\n    //Siyah taşlar ekranda aşağıda ise\n    const defaultBlackPiecesAtBottomFen =\n      'F1D1I1I1D1F/KAMZVSGZMAK/PXCBYQEHTNR/92/92/92/92/pxcbyqehtnr/kamzgsvzmak/f1d1i1i1d1f/ w'\n\n    if (fen === null) {\n      fen =\n        this.#playerColor === this.#whiteColor\n          ? defaultWhitePiecesAtBottomFen\n          : defaultBlackPiecesAtBottomFen\n    }\n    const opponentFen = this.computeOpponentFen(fen)\n    this.parseFen(fen, FEN_TYPE.player)\n    this.parseFen(opponentFen, FEN_TYPE.opponent)\n    this.printBoard()\n  }\n\n  getPiece(square) {\n    const { row, col } = this.squareToPosition(square)\n    console.log(`row:${row}, col:${col}`)\n    return this.#board[row][col]\n  }\n\n  makePromotion(piece, playerColor) {\n    if (!piece.pawn) return false\n    const { row, col, color, promotedToPiece } = piece\n    const conditionRow =\n      playerColor === color\n        ? TamerlaneChess.#lastRowIndex\n        : TamerlaneChess.#firstRowIndex\n\n    if (conditionRow === row) {\n      //opponent board will be set\n      console.log('promoted to ', piece.promotedToPiece)\n      if (piece.constructor.name === 'PawnOfPawn') {\n        piece.promotedCount += 1\n      } else {\n        this.#board[row][col] = new promotedToPiece(row, col, color)\n      }\n    }\n    this.printBoard()\n  }\n\n  getMoves(square) {\n    const { row, col } = this.squareToPosition(square)\n    const piece = this.#board[row][col]\n    this.printBoard()\n    console.log('piece', piece)\n    const moveList = getMoveList(this.#board, piece, 'w')\n   \n    console.log(moveList)\n    const squareList = moveList.map((pos) => {\n      return this.positionToSquare(pos.row, pos.col)\n    })\n    return squareList\n  }\n\n  getTurn() {\n    return this.#turn\n  }\n\n  gameOver() {\n    return false\n  }\n\n  makeMove(fromSquare, toSquare) {\n    console.log(`from:${fromSquare}, to:${toSquare}`)\n\n    const fromPos = this.squareToPosition(fromSquare)\n    const toPos = this.squareToPosition(toSquare)\n    if (\n      !(\n        this.IsPositionInBoard(fromPos.row, fromPos.col) &&\n        this.IsPositionInBoard(toPos.row, toPos.col)\n      )\n    ) {\n      return null\n    }\n\n    const piece = this.#board[fromPos.row][fromPos.col]\n    //if there is no piece in fromSquare or turn is not moving piece\n    if (!piece || piece.color !== this.#turn) return null\n    const color = piece.color\n    const moves = getMoveList(this.#board, piece, \"w\")\n   \n\n    let isMoveValid = false\n    //check if move is possible\n    for (const { row, col } of moves) {\n      if (toPos.row === row && toPos.col === col) {\n        isMoveValid = true\n        break\n      }\n    }\n    if (!isMoveValid) return null\n    const checkedBefore = this.isChecked(piece)\n    let changed = true\n    let copyBoard = [...this.#board]\n    piece.changePosition(toPos.row, toPos.col)\n    copyBoard[toPos.row][toPos.col] = copyBoard[fromPos.row][fromPos.col]\n    copyBoard[fromPos.row][fromPos.col] = 0\n    this.#board = copyBoard\n    //before is check or before is check and after move there is still check\n    if (this.isChecked(color) || (checkedBefore && this.isChecked(color))) {\n      changed = false\n      copyBoard = [...this.#board]\n      copyBoard[toPos.row][toPos.col].changePosition(fromPos.row, fromPos.col)\n      copyBoard[fromPos.row][fromPos.col] = copyBoard[toPos.row][toPos.col]\n      copyBoard[toPos.row][toPos.col] = 0\n      this.#board = copyBoard\n      return null\n    }\n\n    //move is possible\n    this.makePromotion(piece, 'w')\n    this.updateMoves()\n\n    this.#turn = this.#turn === 'w' ? 'b' : 'w'\n    const move = { from: fromSquare, to: toSquare }\n    const moveInOpponentBoard = this.computeMoveInOpponentBoard(fromPos, toPos)\n    console.log('opponent move', moveInOpponentBoard)\n    //saved Move always according to white player\n    let savedMove\n    if (this.#playerColor === COLOR.white) {\n      savedMove = move\n    } else {\n      savedMove = moveInOpponentBoard\n    }\n\n    return {\n      status: '',\n      move,\n      moveInOpponentBoard,\n      savedMove,\n    }\n  }\n\n  select(row, col, color) {\n    let changed = false\n    let prev = [-1, -1]\n    for (let i = 0; i < this.#rowCount; i++) {\n      for (let j = 0; j < this.#colCount; j++) {\n        if (\n          typeof this.#board[i][j] === 'object' &&\n          this.#board[i][j].selected\n        ) {\n          prev = [i, j]\n        }\n      }\n    }\n\n    if (\n      this.#board[row][col] === 0 &&\n      JSON.stringify(prev) !== JSON.stringify([-1, -1])\n    ) {\n      const moves = this.#board[prev[0]][prev[1]].moveList\n      if (includeInTwoDimensArray(moves, [row, col])) {\n        changed = this.makeMove(prev, [row, col], color)\n      }\n    } else {\n      // if(prev)\n    }\n  }\n\n  getFen() {}\n\n  //Helper functions\n  squareToPosition(square) {\n    console.log(`square:${square}`)\n    const col = COLUMNS.indexOf(square[0])\n    //square length can be 2 or 3\n    const row = Number(square.replace(/^[a-k]/, '')) - 1\n    console.log(`square row: ${row}, col: ${col}`)\n    return { col, row }\n  }\n  positionToSquare(row, col) {\n    const rank = row + 1\n    const file = COLUMNS[col]\n    const square = `${file}${rank}`\n    return square\n  }\n\n  computeMoveInOpponentBoard(from, to) {\n    from.row = this.#rowCount - from.row - 1\n    from.col = this.#colCount - from.col - 1\n    to.row = this.#rowCount - to.row - 1\n    to.col = this.#colCount - to.colCount - 1\n    return { from, to }\n  }\n\n  computeOpponentFen(fen) {\n    const lastSlahIndex = fen.lastIndexOf('/')\n    let opponentFen = ''\n    for (let i = 0; i < fen.length; i++) {\n      if (i === lastSlahIndex) {\n        break\n      }\n\n      opponentFen = `${fen[i]}${opponentFen}`\n    }\n    let remainStringIndex = lastSlahIndex\n    for (; remainStringIndex < fen.length; remainStringIndex++) {\n      opponentFen = `${opponentFen}${fen[remainStringIndex]}`\n    }\n\n    return opponentFen\n  }\n\n  updateMoves() {\n    for (let row = 0; row < this.#rowCount; row++) {\n      for (let col = 0; col < this.#colCount; col++) {\n        const piece = this.#board[row][col]\n        if (piece !== 0) {\n          if (piece.pawn) piece.updateValidMoves(this.#board, 'w')\n          else piece.updateValidMoves(this.#board)\n        }\n      }\n    }\n  }\n\n  getOpponentValues() {}\n\n  draw(win, color) {}\n  getDangerMoves(color) {}\n\n  isChecked(color) {\n    //şahın evindeki taşlar kontrol edilecek\n    // this.updateMoves()\n    // const dangerMoves = this.getDangerMoves(color)\n    // const kingPositions = []\n    // for (let i = 0; i < this.#rowCount; i++) {\n    //   for (let j = 0; j < this.#colCount; j++) {\n    //     const piece = this.#board[i][j]\n    //     if (typeof piece === 'object' && piece.king && piece.color === color) {\n    //       kingPositions.push([i, j])\n    //     }\n    //   }\n    // }\n    // //not gonna working\n    // if (kingPositions.length === 1 && dangerMoves.includes(kingPositions[0])) {\n    //   return true\n    // }\n    return false\n  }\n\n  resetSelected() {\n    for (let i = 0; i < this.#rowCount; i++) {\n      for (let j = 0; j < this.#colCount; j++) {\n        const piece = this.#board[i][j]\n        if (piece === 'object') {\n          piece.selected = false\n        }\n      }\n    }\n  }\n\n  printBoard() {\n    for (let i = this.#board.length - 1; i >= 0; i--) {\n      console.log(this.#board[i])\n    }\n  }\n\n  checkMate(color) {}\n\n  parseFen(fen, fenType) {\n    let BOARD\n    if (fenType === FEN_TYPE.player) BOARD = this.#board\n    else if (fenType === FEN_TYPE.opponent) BOARD = this.#opponentBoard\n    else throw Error('fen type not matching')\n    let fenCounter = 0\n    let row = 0\n    let col = 0\n\n    while (row < this.#rowCount && fenCounter < fen.length) {\n      let emptySquareCount = 0\n      switch (fen[fenCounter]) {\n        case 'p':\n          BOARD[row][col] = new PawnOfPawn(row, col, this.#blackColor)\n          break\n        case 'b':\n          BOARD[row][col] = new ElephantPawn(row, col, this.#blackColor)\n          break\n        case 'c':\n          BOARD[row][col] = new CamelPawn(row, col, this.#blackColor)\n          break\n        case 'x':\n          BOARD[row][col] = new WarEnginePawn(row, col, this.#blackColor)\n          break\n        case 'r':\n          BOARD[row][col] = new RookPawn(row, col, this.#blackColor)\n          break\n        case 'n':\n          BOARD[row][col] = new KnightPawn(row, col, this.#blackColor)\n          break\n        case 't':\n          BOARD[row][col] = new CatapultPawn(row, col, this.#blackColor)\n          break\n        case 'h':\n          BOARD[row][col] = new GiraffePawn(row, col, this.#blackColor)\n          break\n        case 'y':\n          BOARD[row][col] = new VizierPawn(row, col, this.#blackColor)\n          break\n        case 'q':\n          BOARD[row][col] = new KingPawn(row, col, this.#blackColor)\n          break\n        case 'e':\n          BOARD[row][col] = new GeneralPawn(row, col, this.#blackColor)\n          break\n        case 'f':\n          BOARD[row][col] = new Elephant(row, col, this.#blackColor)\n          break\n        case 'd':\n          BOARD[row][col] = new Camel(row, col, this.#blackColor)\n          break\n        case 'i':\n          BOARD[row][col] = new WarEngine(row, col, this.#blackColor)\n          break\n        case 'k':\n          BOARD[row][col] = new Rook(row, col, this.#blackColor)\n          break\n        case 'a':\n          BOARD[row][col] = new Knight(row, col, this.#blackColor)\n          break\n        case 'm':\n          BOARD[row][col] = new Catapult(row, col, this.#blackColor)\n          break\n        case 'z':\n          BOARD[row][col] = new Giraffe(row, col, this.#blackColor)\n          break\n        case 'g':\n          BOARD[row][col] = new General(row, col, this.#blackColor)\n          break\n        case 's':\n          BOARD[row][col] = new King(row, col, this.#blackColor)\n          break\n        case 'v':\n          BOARD[row][col] = new Vizier(row, col, this.#blackColor)\n          break\n        case 'P':\n          BOARD[row][col] = new PawnOfPawn(row, col, this.#whiteColor)\n          break\n        case 'B':\n          BOARD[row][col] = new ElephantPawn(row, col, this.#whiteColor)\n          break\n        case 'C':\n          BOARD[row][col] = new CamelPawn(row, col, this.#whiteColor)\n          break\n        case 'X':\n          BOARD[row][col] = new WarEnginePawn(row, col, this.#whiteColor)\n          break\n        case 'R':\n          BOARD[row][col] = new RookPawn(row, col, this.#whiteColor)\n          break\n        case 'N':\n          BOARD[row][col] = new KnightPawn(row, col, this.#whiteColor)\n          break\n        case 'T':\n          BOARD[row][col] = new CatapultPawn(row, col, this.#whiteColor)\n          break\n        case 'H':\n          BOARD[row][col] = new GiraffePawn(row, col, this.#whiteColor)\n          break\n        case 'Y':\n          BOARD[row][col] = new VizierPawn(row, col, this.#whiteColor)\n          break\n        case 'Q':\n          BOARD[row][col] = new KingPawn(row, col, this.#whiteColor)\n          break\n        case 'E':\n          BOARD[row][col] = new GeneralPawn(row, col, this.#whiteColor)\n          break\n        case 'F':\n          BOARD[row][col] = new Elephant(row, col, this.#whiteColor)\n          break\n        case 'D':\n          BOARD[row][col] = new Camel(row, col, this.#whiteColor)\n          break\n        case 'I':\n          BOARD[row][col] = new WarEngine(row, col, this.#whiteColor)\n          break\n        case 'K':\n          BOARD[row][col] = new Rook(row, col, this.#whiteColor)\n          break\n        case 'A':\n          BOARD[row][col] = new Knight(row, col, this.#whiteColor)\n          break\n        case 'M':\n          BOARD[row][col] = new Catapult(row, col, this.#whiteColor)\n          break\n        case 'Z':\n          BOARD[row][col] = new Giraffe(row, col, this.#whiteColor)\n          break\n        case 'G':\n          BOARD[row][col] = new General(row, col, this.#whiteColor)\n          break\n        case 'S':\n          BOARD[row][col] = new King(row, col, this.#whiteColor)\n          break\n        case 'V':\n          BOARD[row][col] = new Vizier(row, col, this.#whiteColor)\n          break\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          emptySquareCount = Number(fen[fenCounter])\n          break\n        case '/':\n        case ' ':\n          row += 1\n          col = 0\n          fenCounter++\n          continue\n        default:\n          console.log('Fen ERROR')\n          return\n      }\n      if (emptySquareCount === 0) col += 1\n      else {\n        for (let i = 0; i < emptySquareCount; i++) {\n          col += 1\n          BOARD[row][col] = 0\n        }\n      }\n\n      fenCounter++\n    }\n  }\n}\nObject.assign(TamerlaneChess.prototype, positionChecker())\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js",["138"],"import NoneSlidePiece from './NoneSlidePiece'\n\nexport default class Vizier extends NoneSlidePiece {\n  static _directions = [\n    { rowDir: -1, colDir: 0 },\n    { rowDir: 0, colDir: 1 },\n    { rowDir: 1, colDir: 0 },\n    { rowDir: 0, colDir: -1 },\n  ]\n  constructor(row, col, color) {\n    super(row, col, color)\n  }\n \n}","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js",["139"],"import Piece from './Piece'\n\nexport default class Giraffe extends Piece {\n  static #directions = [\n    { rowDir: -1, colDir: 1 },\n    { rowDir: 1, colDir: 1 },\n    { rowDir: 1, colDir: -1 },\n    { rowDir: -1, colDir: -1 },\n  ]\n\n  validMoves(board) {\n    const moves = []\n    let currentCol\n    let currentRow\n    for (const { rowDir, colDir } of Giraffe.#directions) {\n      currentCol = this.col + rowDir\n      currentRow = this.row + colDir\n      let piece = board[currentCol][currentRow]\n    }\n\n    return moves\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js",["140","141","142","143"],"import Piece from './Piece'\nimport Camel from './Camel'\nimport Knight from './Knight'\nimport General from './Catapult'\nimport Catapult from './Catapult'\nimport Vizier from './Vizier'\nimport WarEngine from './WarEngine'\nimport Giraffe from './Giraffe'\nimport Elephant from './Elephant'\nimport Rook from './Rook'\nimport { COLOR } from '../types'\nimport {  getMoveList } from '../helper'\nclass Pawn extends Piece {\n  static _diagonalColsIncrementValues = [-1, 1]\n  constructor(row, col, color) {\n    super(row, col, color)\n    if (this.constructor === Pawn) {\n      throw Error('Pawn can not be instated')\n    }\n\n    this.pawn = true\n  }\n\n  updateValidMoves(board, playerColor) {\n    this.moveList = this.validMoves(board, playerColor)\n  }\n\n  isPieceOpponent(row, col, board) {\n    const attackedPiece = board[row][col]\n    if (attackedPiece !== 0 && attackedPiece.color !== this.color) {\n      return true\n    }\n    return false\n  }\n\n  validMoves(board, playerColor) {\n    if (playerColor !== COLOR.white && playerColor !== COLOR.black) {\n      throw Error('No matching player color with black or white')\n    }\n    const moves = []\n    let row\n    let col\n\n    const rowIncrementValue = playerColor === this.color ? 1 : -1\n    row = this.row + rowIncrementValue\n\n    //UP\n    col = this.col\n    if (\n      this.IsPositionInBoard(row, col) &&\n      this.isSquareEmpty(row, col, board)\n    ) {\n      moves.push({ row, col })\n    }\n\n    let colIncrementValue\n    for (colIncrementValue of Pawn._diagonalColsIncrementValues) {\n      col = this.col + colIncrementValue\n      if (\n        this.IsPositionInBoard(row, col) &&\n        this.isPieceOpponent(row, col, board)\n      ) {\n        moves.push({ row, col })\n      }\n    }\n\n    return moves\n  }\n}\n\nexport class PawnOfPawn extends Pawn {\n  static #firstPromoted = 1\n  static #secondPromoted = 2\n  static #noPromoted = 0\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedCount = 0\n  }\n  validMoves(board, playerColor) {\n    let moves\n    switch (this.getPromotedType(playerColor)) {\n      //regular moves\n      case PawnOfPawn.#noPromoted:\n        moves = super.validMoves(board, playerColor)\n        break\n      case PawnOfPawn.#firstPromoted:\n        moves = [...this.getForkMoves(board), ...this.getImmobileMoves(board, playerColor)]\n      case PawnOfPawn.#secondPromoted:\n        // move to pawn of king position\n        break\n    }\n\n    return moves\n  }\n\n  getForkMoves(board) {\n    const moves = []\n    let row\n    let square\n    // for (row of board) {\n    //   for (square of row) {\n    //   }\n    // }\n    return moves\n  }\n\n  getImmobileMoves(board, playerColor) {\n    const moves = []\n    let row\n    let piece\n  \n    for (row of board) {\n      for (piece of row) {\n        if (this.isOpponentPiece(piece)) {\n          const opponentPieceMoves = getMoveList(board, piece, playerColor)\n          \n          if (opponentPieceMoves.length === 0) {\n            let rowPos, colPos\n            const rowIncerementValue = playerColor === this.color ? -1 : 1\n            rowPos = piece.row + rowIncerementValue\n            let colIncrementValue\n            for (colIncrementValue of PawnOfPawn._diagonalColsIncrementValues) {\n              colPos = piece.col + colIncrementValue\n              if (this.IsPositionInBoard(rowPos, colPos)) {\n                moves.push({\n                  row: rowPos,\n                  col: colPos,\n                })\n              }\n            }\n          }\n        }\n      }\n    }\n    return moves\n  }\n\n  getPromotedType(playerColor) {\n    if (\n      playerColor === this.color &&\n      this.row === 9 &&\n      this.promotedCount === PawnOfPawn.#firstPromoted\n    ) {\n      return PawnOfPawn.#firstPromoted\n    } else if (\n      playerColor !== this.color &&\n      this.row === 0 &&\n      this.promotedCount === PawnOfPawn.#secondPromoted\n    ) {\n      return PawnOfPawn.#secondPromoted\n    }\n    return PawnOfPawn.#noPromoted\n  }\n}\n\nexport class KingPawn extends Pawn {\n  validMoves(board, playerColor) {\n    //eğer\n    if (true) {\n      return super.validMoves(board, playerColor)\n    }\n  }\n}\n\nexport class CamelPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Camel\n  }\n\n  validMoves(board, playerColor) {\n    return super.validMoves(board, playerColor)\n  }\n}\n\nexport class CatapultPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Catapult\n  }\n}\nexport class ElephantPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Elephant\n  }\n}\nexport class GeneralPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = General\n  }\n}\nexport class GiraffePawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Giraffe\n  }\n}\nexport class KnightPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Knight\n  }\n}\nexport class RookPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Rook\n  }\n}\nexport class VizierPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Vizier\n  }\n}\nexport class WarEnginePawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = WarEngine\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessReducers.js",["144","145","146"],"import {\n  START_GAME,\n  CLEAR_HIGHLIGHTING,\n  SET_HIGHLIGHTING,\n  MOVE,\n  SELECT_PIECE,\n} from './tamerlaneChessActionTypes'\nimport TamerlaneChess from '../tamerlane-chess'\nimport {\n  validFen,\n  fenToObj,\n  validPositionObject,\n  getPositionObject,\n} from '../helper/Fen'\n\nexport const initialState = {\n  fen: 'start',\n  dropSquareStyle: {},\n  squareStyles: {},\n  lightSquareStyle: { backgroundColor: 'rgb(240, 217, 181)' },\n  darkSquareStyle: { backgroundColor: 'rgb(181, 136, 99)' },\n  pieceSquare: '',\n  fromSquare: '',\n  toSquare: '',\n  selectedPiece: '',\n  history: [],\n  currentPosition: getPositionObject('start'),\n  sourceSquare: '',\n  targetSquare: '',\n  sourcePiece: '',\n  waitForTransition: false,\n  phantomPiece: null,\n  wasPieceTouched: false,\n  manualDrop: false,\n  squareClicked: false,\n  firstMove: false,\n}\n\nexport default function tamerlaneChessReducer(state = initialState, action) {\n  const { type, payload } = action\n  switch (type) {\n    case START_GAME:\n      const tamerlaneChess = new TamerlaneChess()\n      return {\n        ...state,\n        tamerlaneChess,\n      }\n    case MOVE:\n      const { currentPosition } = state\n      const newCurrentPosition = {}\n      let key\n      for (key in currentPosition) {\n        if (currentPosition.hasOwnProperty(key) && key !== payload.from) {\n          newCurrentPosition[key] = currentPosition[key]\n        }\n      }\n\n      newCurrentPosition[payload.to] = currentPosition[payload.from]\n\n      return {\n        ...state,\n        fromSquare: '',\n        currentPosition: newCurrentPosition,\n      }\n    case CLEAR_HIGHLIGHTING:\n      return {\n        ...state,\n      }\n    case SET_HIGHLIGHTING:\n      return {\n        ...state,\n        squareStyles: payload.highlightStyles,\n      }\n    case SELECT_PIECE:\n      return {\n        ...state,\n        fromSquare: payload.fromSquare,\n      }\n    default:\n      return state\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessActionTypes.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/helper/Fen.js",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":24,"column":13,"nodeType":"153","messageId":"154","endLine":24,"endColumn":24},{"ruleId":"151","severity":1,"message":"155","line":24,"column":26,"nodeType":"153","messageId":"154","endLine":24,"endColumn":33},{"ruleId":"151","severity":1,"message":"156","line":93,"column":9,"nodeType":"153","messageId":"154","endLine":93,"endColumn":20},{"ruleId":"151","severity":1,"message":"157","line":1,"column":28,"nodeType":"153","messageId":"154","endLine":1,"endColumn":36},{"ruleId":"151","severity":1,"message":"158","line":1,"column":38,"nodeType":"153","messageId":"154","endLine":1,"endColumn":45},{"ruleId":"151","severity":1,"message":"159","line":4,"column":8,"nodeType":"153","messageId":"154","endLine":4,"endColumn":13},{"ruleId":"151","severity":1,"message":"160","line":10,"column":5,"nodeType":"153","messageId":"154","endLine":10,"endColumn":20},{"ruleId":"151","severity":1,"message":"161","line":11,"column":5,"nodeType":"153","messageId":"154","endLine":11,"endColumn":21},{"ruleId":"151","severity":1,"message":"162","line":12,"column":5,"nodeType":"153","messageId":"154","endLine":12,"endColumn":20},{"ruleId":"151","severity":1,"message":"156","line":18,"column":9,"nodeType":"153","messageId":"154","endLine":18,"endColumn":20},{"ruleId":"151","severity":1,"message":"163","line":20,"column":9,"nodeType":"153","messageId":"154","endLine":20,"endColumn":19},{"ruleId":"151","severity":1,"message":"164","line":21,"column":9,"nodeType":"153","messageId":"154","endLine":21,"endColumn":19},{"ruleId":"151","severity":1,"message":"165","line":23,"column":9,"nodeType":"153","messageId":"154","endLine":23,"endColumn":29},{"ruleId":"151","severity":1,"message":"166","line":24,"column":9,"nodeType":"153","messageId":"154","endLine":24,"endColumn":29},{"ruleId":"151","severity":1,"message":"167","line":2,"column":8,"nodeType":"153","messageId":"154","endLine":2,"endColumn":17},{"ruleId":"151","severity":1,"message":"168","line":177,"column":7,"nodeType":"153","messageId":"154","endLine":177,"endColumn":14},{"ruleId":"151","severity":1,"message":"168","line":230,"column":9,"nodeType":"153","messageId":"154","endLine":230,"endColumn":16},{"ruleId":"169","severity":1,"message":"170","line":10,"column":3,"nodeType":"171","messageId":"172","endLine":12,"endColumn":4},{"ruleId":"151","severity":1,"message":"173","line":18,"column":11,"nodeType":"153","messageId":"154","endLine":18,"endColumn":16},{"ruleId":"174","severity":1,"message":"175","line":81,"column":5,"nodeType":"176","messageId":"177","endLine":91,"endColumn":6},{"ruleId":"178","severity":1,"message":"179","line":88,"column":7,"nodeType":"180","messageId":"181","endLine":90,"endColumn":14},{"ruleId":"151","severity":1,"message":"182","line":98,"column":9,"nodeType":"153","messageId":"154","endLine":98,"endColumn":12},{"ruleId":"151","severity":1,"message":"183","line":99,"column":9,"nodeType":"153","messageId":"154","endLine":99,"endColumn":15},{"ruleId":"151","severity":1,"message":"184","line":10,"column":3,"nodeType":"153","messageId":"154","endLine":10,"endColumn":11},{"ruleId":"151","severity":1,"message":"185","line":11,"column":3,"nodeType":"153","messageId":"154","endLine":11,"endColumn":11},{"ruleId":"151","severity":1,"message":"186","line":12,"column":3,"nodeType":"153","messageId":"154","endLine":12,"endColumn":22},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'pieceSquare' is assigned a value but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'useState' is defined but never used.","'useMemo' is defined but never used.","'Piece' is defined but never used.","'currentPosition' is assigned a value but never used.","'lightSquareStyle' is assigned a value but never used.","'darkSquareStyle' is assigned a value but never used.","'handleDrag' is assigned a value but never used.","'handleDrop' is assigned a value but never used.","'getSquareCoordinates' is assigned a value but never used.","'setSquareCoordinates' is assigned a value but never used.","'PropTypes' is defined but never used.","'changed' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'piece' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'row' is defined but never used.","'square' is defined but never used.","'validFen' is defined but never used.","'fenToObj' is defined but never used.","'validPositionObject' is defined but never used.","no-global-assign","no-unsafe-negation"]