[{"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js":"1","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js":"2","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js":"3","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js":"4","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js":"5","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js":"6","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js":"7","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js":"8","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js":"9","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js":"10","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js":"11","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js":"12","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js":"13","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js":"14","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js":"15","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js":"16","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js":"17","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js":"18","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js":"19","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js":"20","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js":"21","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js":"22","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js":"23","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js":"24","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessReducers.js":"25","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessActionTypes.js":"26","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/helper/Fen.js":"27"},{"size":500,"mtime":1610695920352,"results":"28","hashOfConfig":"29"},{"size":203,"mtime":1610971058234,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1610695920352,"results":"31","hashOfConfig":"29"},{"size":3020,"mtime":1611392354785,"results":"32","hashOfConfig":"29"},{"size":1439,"mtime":1611242597940,"results":"33","hashOfConfig":"29"},{"size":1508,"mtime":1611394475621,"results":"34","hashOfConfig":"29"},{"size":158,"mtime":1611136956381,"results":"35","hashOfConfig":"29"},{"size":12584,"mtime":1611241579834,"results":"36","hashOfConfig":"29"},{"size":763,"mtime":1611134382815,"results":"37","hashOfConfig":"29"},{"size":263,"mtime":1610810278639,"results":"38","hashOfConfig":"29"},{"size":503,"mtime":1611133546986,"results":"39","hashOfConfig":"29"},{"size":1319,"mtime":1611176890005,"results":"40","hashOfConfig":"29"},{"size":377,"mtime":1611133713515,"results":"41","hashOfConfig":"29"},{"size":375,"mtime":1611133594186,"results":"42","hashOfConfig":"29"},{"size":425,"mtime":1611133605710,"results":"43","hashOfConfig":"29"},{"size":362,"mtime":1611133639483,"results":"44","hashOfConfig":"29"},{"size":428,"mtime":1611133648375,"results":"45","hashOfConfig":"29"},{"size":203,"mtime":1611133816256,"results":"46","hashOfConfig":"29"},{"size":143,"mtime":1611224374685,"results":"47","hashOfConfig":"29"},{"size":2788,"mtime":1611223241778,"results":"48","hashOfConfig":"29"},{"size":689,"mtime":1611237705002,"results":"49","hashOfConfig":"29"},{"size":604,"mtime":1610911409532,"results":"50","hashOfConfig":"29"},{"size":156,"mtime":1610813905318,"results":"51","hashOfConfig":"29"},{"size":606,"mtime":1611223896042,"results":"52","hashOfConfig":"29"},{"size":1491,"mtime":1611331427181,"results":"53","hashOfConfig":"29"},{"size":171,"mtime":1611263102755,"results":"54","hashOfConfig":"29"},{"size":4884,"mtime":1611245872560,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"qgqcp2",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js",[],["116","117"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js",["118","119","120"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js",["121","122","123","124","125","126","127","128","129","130","131"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport './board.css'\r\nimport Square from './Square'\r\nimport Piece from './Piece'\r\nimport { COLUMNS } from '../helper/helpers'\r\nimport { useTamerlaneChessContext } from './index'\r\n// import TamerlaneChess from '../tamerlane-chess'\r\nconst Board = () => {\r\n  const {\r\n    currentPosition,\r\n    lightSquareStyle,\r\n    darkSquareStyle,\r\n  } = useTamerlaneChessContext()\r\n  // let game\r\n  useEffect(() => {\r\n    // game = new TamerlaneChess()\r\n  }, [])\r\n  const setPosition = (sourceSquare, targetSquare, piece) => {}\r\n\r\n  const handleDrag = () => {}\r\n  const handleDrop = (sourceSquare, targetSquare) => {}\r\n\r\n  const getSquareCoordinates = () => {}\r\n  const setSquareCoordinates = () => {}\r\n  let squareColor = 'black'\r\n  return (\r\n    <div id='GameBoard'>\r\n      {[...Array(10)].map((_, r) => {\r\n        return [...Array(11)].map((_, c) => {\r\n          const row = 10 - r\r\n          const square = `${COLUMNS[c]}${row}`\r\n          squareColor = squareColor === 'black' ? 'white' : 'black'\r\n          return (\r\n            <Square\r\n              key={square}\r\n              square={square}\r\n              squareColor={squareColor}\r\n              row={row}\r\n              col={c + 1}\r\n            ></Square>\r\n          )\r\n        })\r\n      })}\r\n      {/* <Square key='x' square={'x'}></Square>\r\n      <Square key='y' square={'y'}></Square> */}\r\n    </div>\r\n  )\r\n}\r\nexport default Board\r\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js",["132"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js",["133"],"import { includeInTwoDimensArray } from './helper'\nimport {\n  King,\n  Camel,\n  Catapult,\n  Elephant,\n  General,\n  Giraffe,\n  Knight,\n  Vizier,\n  WarEngine,\n  Rook,\n  PawnOfPawn,\n  CamelPawn,\n  CatapultPawn,\n  ElephantPawn,\n  GeneralPawn,\n  GiraffePawn,\n  KnightPawn,\n  VizierPawn,\n  WarEnginePawn,\n  RookPawn,\n  KingPawn,\n} from './Pieces'\nimport { FEN_TYPE, COLOR } from './types'\nconst COLUMNS = 'abcdefghijk'.split('')\nexport default class TamerlaneChess {\n  #rowCount = 10\n  #colCount = 11\n  #board = Array.from(Array(10), () => new Array(11))\n  #opponentBoard = Array.from(Array(10), () => new Array(11))\n  #player = 'player'\n  #opponetPlayer = 'opponent'\n  #turn = 'w'\n  #time1 = 900\n  #time2 = 900\n  #storedTime1 = 0\n  #storedTime2 = 0\n  #winner = null\n  #last = null\n  #copy = true\n  #ready = false\n  #whiteKingCount = 1\n  #blackKingCount\n  #blackColor = 'b'\n  #whiteColor = 'w'\n  #playerColor\n  #opponentPlayerColor\n\n  constructor(playerColor, fen = null) {\n    this.#playerColor = playerColor\n    this.#opponentPlayerColor =\n      this.#playerColor === this.#blackColor\n        ? this.#blackColor\n        : this.#whiteColor\n\n    for (let row = 0; row < 10; row++) {\n      for (let col = 0; col < 11; col++) {\n        this.#board[row][col] = 0\n        this.#opponentBoard[row][col] = 0\n      }\n    }\n\n    //Beyaz taşlar ekranda aşağıda ise\n    /*\n    'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBYQEHTNR/KAMZGSVZMAK/F1D1I1I1D1F*2 w'\n    */\n    const defaultWhitePiecesAtBottomFen =\n      'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBEQYHTNR/KAMZGSVZMAK/F1D1I1I1D1F/ w'\n    //Siyah taşlar ekranda aşağıda ise\n    const defaultBlackPiecesAtBottomFen =\n      'F1D1I1I1D1F/KAMZVSGZMAK/PXCBYQEHTNR/92/92/92/92/pxcbyqehtnr/kamzgsvzmak/f1d1i1i1d1f/ w'\n\n    if (fen === null) {\n      fen =\n        this.#playerColor === this.#whiteColor\n          ? defaultWhitePiecesAtBottomFen\n          : defaultBlackPiecesAtBottomFen\n    }\n    const opponentFen = this.computeOpponentFen(fen)\n    this.parseFen(fen, FEN_TYPE.player)\n    this.parseFen(opponentFen, FEN_TYPE.opponent)\n    this.printBoard()\n  }\n\n  getPiece(square) {\n    const { row, col } = this.squareToPosition(square)\n    console.log(`row:${row}, col:${col}`)\n    return this.#board[row][col]\n  }\n\n  getMoves(square) {\n    const { row, col } = this.squareToPosition(square)\n    const piece = this.#board[row][col]\n    const moveList = piece.validMoves(this.#board)\n    const squareList = moveList.map((pos) => {\n      return this.positionToSquare(pos.row, pos.col)\n    })\n    return squareList\n  }\n\n  getTurn() {\n    return this.#turn\n  }\n\n  gameOver(){\n    return false\n  }\n\n  makeMove(from, to) {\n    console.log(`from:${from}, to:$${to}`)\n    const color = this.#board[from.row][from.to]\n    const checkedBefore = this.isChecked(color)\n    let changed = true\n    let copyBoard = [...this.#board]\n    // if(copyBoard[from.row][from.col].pawn){\n\n    // }\n    const movingPiece = copyBoard[from.row][from.col]\n    movingPiece.changePosition(to.row, to.col)\n    copyBoard[to.row][to.col] = copyBoard[from.row][from.col]\n    copyBoard[from.row][from.col] = 0\n    this.#board = copyBoard\n\n    if (this.isChecked(color) || (checkedBefore && this.isChecked(color))) {\n      changed = false\n      copyBoard = [...this.#board]\n      copyBoard[to.row][to.col].changePosition(from.row, from.col)\n      copyBoard[from.row][from.col] = copyBoard[to.row][to.col]\n      copyBoard[to.row][to.col] = 0\n      this.#board = copyBoard\n    } else {\n      this.resetSelected()\n    }\n    this.updateMoves()\n    if (changed) {\n      this.#last = [from, to]\n    }\n    // return changed\n    //return game status\n    const move = {}\n    const moveInOpponentBoard = this.computeMoveInOpponentBoard(\n      move.from,\n      move.to\n    )\n    //saved Move always according to white player\n    let savedMove\n    if (this.#playerColor === COLOR.white) {\n      savedMove = move\n    } else {\n      savedMove = moveInOpponentBoard\n    }\n    return {\n      status: '',\n      move,\n      moveInOpponentBoard,\n      savedMove,\n    }\n  }\n\n  select(row, col, color) {\n    let changed = false\n    let prev = [-1, -1]\n    for (let i = 0; i < this.#rowCount; i++) {\n      for (let j = 0; j < this.#colCount; j++) {\n        if (\n          typeof this.#board[i][j] === 'object' &&\n          this.#board[i][j].selected\n        ) {\n          prev = [i, j]\n        }\n      }\n    }\n\n    if (\n      this.#board[row][col] === 0 &&\n      JSON.stringify(prev) !== JSON.stringify([-1, -1])\n    ) {\n      const moves = this.#board[prev[0]][prev[1]].moveList\n      if (includeInTwoDimensArray(moves, [row, col])) {\n        changed = this.makeMove(prev, [row, col], color)\n      }\n    } else {\n      // if(prev)\n    }\n  }\n\n  //Helper functions\n  squareToPosition(square) {\n    console.log(`square:${square}`)\n    const col = COLUMNS.indexOf(square[0])\n    //square length can be 2 or 3\n    const row = Number(square.replace(/^[a-k]/, '')) - 1\n    console.log(`square row: ${row}, col: ${col}`)\n    return { col, row }\n  }\n  positionToSquare(row, col) {\n    const rank = row + 1\n    const file = COLUMNS[col]\n    const square = `${file}${rank}`\n    return square\n  }\n\n  computeMoveInOpponentBoard(from, to) {\n    from.row = this.#rowCount - from.row - 1\n    from.col = this.#colCount - from.col - 1\n    to.row = this.#rowCount - to.row - 1\n    to.col = this.#colCount - to.colCount - 1\n    return { from, to }\n  }\n\n  computeOpponentFen(fen) {\n    const lastSlahIndex = fen.lastIndexOf('/')\n    let opponentFen = ''\n    for (let i = 0; i < fen.length; i++) {\n      if (i === lastSlahIndex) {\n        break\n      }\n\n      opponentFen = `${fen[i]}${opponentFen}`\n    }\n    let remainStringIndex = lastSlahIndex\n    for (; remainStringIndex < fen.length; remainStringIndex++) {\n      opponentFen = `${opponentFen}${fen[remainStringIndex]}`\n    }\n\n    return opponentFen\n  }\n\n  updateMoves() {\n    for (let row = 0; row < this.#rowCount; row++) {\n      for (let col = 0; col < this.#colCount; col++) {\n        const piece = this.#board[row][col]\n        if (piece !== 0) {\n          piece.updateValidMoves(this.#board)\n        }\n      }\n    }\n  }\n\n  getOpponentValues() {}\n\n  draw(win, color) {}\n  getDangerMoves(color) {}\n\n  isChecked(color) {\n    //şahın evindeki taşlar kontrol edilecek\n    this.updateMoves()\n    const dangerMoves = this.getDangerMoves(color)\n    const kingPositions = []\n    for (let i = 0; i < this.#rowCount; i++) {\n      for (let j = 0; j < this.#colCount; j++) {\n        const piece = this.#board[i][j]\n        if (typeof piece === 'object' && piece.king && piece.color === color) {\n          kingPositions.push([i, j])\n        }\n      }\n    }\n\n    if (kingPositions.length > 1 && dangerMoves.includes(kingPositions[0])) {\n      return true\n    }\n    return false\n  }\n\n  resetSelected() {\n    for (let i = 0; i < this.#rowCount; i++) {\n      for (let j = 0; j < this.#colCount; j++) {\n        const piece = this.#board[i][j]\n        if (piece === 'object') {\n          piece.selected = false\n        }\n      }\n    }\n  }\n\n  printBoard() {\n    for (let i = this.#board.length - 1; i >= 0; i--) {\n      console.log(this.#board[i])\n    }\n  }\n\n  checkMate(color) {}\n\n  parseFen(fen, fenType) {\n    let BOARD\n    if (fenType === FEN_TYPE.player) BOARD = this.#board\n    else if (fenType === FEN_TYPE.opponent) BOARD = this.#opponentBoard\n    else throw Error('fen type not matching')\n    let fenCounter = 0\n    let row = 0\n    let col = 0\n\n    while (row < this.#rowCount && fenCounter < fen.length) {\n      let emptySquareCount = 0\n      switch (fen[fenCounter]) {\n        case 'p':\n          BOARD[row][col] = new PawnOfPawn(row, col, this.#blackColor)\n          break\n        case 'b':\n          BOARD[row][col] = new ElephantPawn(row, col, this.#blackColor)\n          break\n        case 'c':\n          BOARD[row][col] = new CamelPawn(row, col, this.#blackColor)\n          break\n        case 'x':\n          BOARD[row][col] = new WarEnginePawn(row, col, this.#blackColor)\n          break\n        case 'r':\n          BOARD[row][col] = new RookPawn(row, col, this.#blackColor)\n          break\n        case 'n':\n          BOARD[row][col] = new KnightPawn(row, col, this.#blackColor)\n          break\n        case 't':\n          BOARD[row][col] = new CatapultPawn(row, col, this.#blackColor)\n          break\n        case 'h':\n          BOARD[row][col] = new GiraffePawn(row, col, this.#blackColor)\n          break\n        case 'y':\n          BOARD[row][col] = new VizierPawn(row, col, this.#blackColor)\n          break\n        case 'q':\n          BOARD[row][col] = new KingPawn(row, col, this.#blackColor)\n          break\n        case 'e':\n          BOARD[row][col] = new GeneralPawn(row, col, this.#blackColor)\n          break\n        case 'f':\n          BOARD[row][col] = new Elephant(row, col, this.#blackColor)\n          break\n        case 'd':\n          BOARD[row][col] = new Camel(row, col, this.#blackColor)\n          break\n        case 'i':\n          BOARD[row][col] = new WarEngine(row, col, this.#blackColor)\n          break\n        case 'k':\n          BOARD[row][col] = new Rook(row, col, this.#blackColor)\n          break\n        case 'a':\n          BOARD[row][col] = new Knight(row, col, this.#blackColor)\n          break\n        case 'm':\n          BOARD[row][col] = new Catapult(row, col, this.#blackColor)\n          break\n        case 'z':\n          BOARD[row][col] = new Giraffe(row, col, this.#blackColor)\n          break\n        case 'g':\n          BOARD[row][col] = new General(row, col, this.#blackColor)\n          break\n        case 's':\n          BOARD[row][col] = new King(row, col, this.#blackColor)\n          break\n        case 'v':\n          BOARD[row][col] = new Vizier(row, col, this.#blackColor)\n          break\n        case 'P':\n          BOARD[row][col] = new PawnOfPawn(row, col, this.#whiteColor)\n          break\n        case 'B':\n          BOARD[row][col] = new ElephantPawn(row, col, this.#whiteColor)\n          break\n        case 'C':\n          BOARD[row][col] = new CamelPawn(row, col, this.#whiteColor)\n          break\n        case 'X':\n          BOARD[row][col] = new WarEnginePawn(row, col, this.#whiteColor)\n          break\n        case 'R':\n          BOARD[row][col] = new RookPawn(row, col, this.#whiteColor)\n          break\n        case 'N':\n          BOARD[row][col] = new KnightPawn(row, col, this.#whiteColor)\n          break\n        case 'T':\n          BOARD[row][col] = new CatapultPawn(row, col, this.#whiteColor)\n          break\n        case 'H':\n          BOARD[row][col] = new GiraffePawn(row, col, this.#whiteColor)\n          break\n        case 'Y':\n          BOARD[row][col] = new VizierPawn(row, col, this.#whiteColor)\n          break\n        case 'Q':\n          BOARD[row][col] = new KingPawn(row, col, this.#whiteColor)\n          break\n        case 'E':\n          BOARD[row][col] = new GeneralPawn(row, col, this.#whiteColor)\n          break\n        case 'F':\n          BOARD[row][col] = new Elephant(row, col, this.#whiteColor)\n          break\n        case 'D':\n          BOARD[row][col] = new Camel(row, col, this.#whiteColor)\n          break\n        case 'I':\n          BOARD[row][col] = new WarEngine(row, col, this.#whiteColor)\n          break\n        case 'K':\n          BOARD[row][col] = new Rook(row, col, this.#whiteColor)\n          break\n        case 'A':\n          BOARD[row][col] = new Knight(row, col, this.#whiteColor)\n          break\n        case 'M':\n          BOARD[row][col] = new Catapult(row, col, this.#whiteColor)\n          break\n        case 'Z':\n          BOARD[row][col] = new Giraffe(row, col, this.#whiteColor)\n          break\n        case 'G':\n          BOARD[row][col] = new General(row, col, this.#whiteColor)\n          break\n        case 'S':\n          BOARD[row][col] = new King(row, col, this.#whiteColor)\n          break\n        case 'V':\n          BOARD[row][col] = new Vizier(row, col, this.#whiteColor)\n          break\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          emptySquareCount = Number(fen[fenCounter])\n          break\n        case '/':\n        case ' ':\n          row += 1\n          col = 0\n          fenCounter++\n          continue\n        default:\n          console.log('Fen ERROR')\n          return\n      }\n      if (emptySquareCount === 0) col += 1\n      else {\n        for (let i = 0; i < emptySquareCount; i++) {\n          col += 1\n          BOARD[row][col] = 0\n        }\n      }\n\n      fenCounter++\n    }\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js",["134"],"import NoneSlidePiece from './NoneSlidePiece'\n\nexport default class Vizier extends NoneSlidePiece {\n  _directions = [\n    { rowDir: -1, colDir: 0 },\n    { rowDir: 0, colDir: 1 },\n    { rowDir: 1, colDir: 0 },\n    { rowDir: 0, colDir: -1 },\n  ]\n  constructor(row, col, color) {\n    super(row, col, color)\n  }\n  get directions() {\n    return this._directions\n  }\n}","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js",["135","136"],"import Piece from './Piece'\nimport { COLOR } from '../types'\nclass Pawn extends Piece {\n  \n  constructor(row, col, color) {\n    super(row, col, color)\n    if (this.constructor === Pawn) {\n      throw Error('Pawn can not be instated')\n    }\n    \n    this.pawn = true\n  }\n\n  validMoves(board, playerColor) {\n    if (playerColor !== COLOR.white && playerColor !== COLOR.black) {\n      throw Error('No matching player color with black or white')\n    }\n    const moves = []\n    let col = this.col\n    let attackedPiece\n    let row\n    if (playerColor === this.color) {\n      //UP\n      row = this.row - 1\n      if (col < 12 && col > -1 && row < 10 && row > -1) {\n        attackedPiece = board[row][col]\n        if (attackedPiece === 0) {\n          moves.push({ row, col })\n        }\n      }\n\n      //RIGHT UP\n      col = this.col + 1\n      if (col < 12 && col > -1 && row < 10 && row > -1) {\n        attackedPiece = board[row][col]\n        if (attackedPiece.color !== this.color) {\n          moves.push({ row, col })\n        }\n      }\n\n      //LEFT UP\n      col = this.col - 1\n      if (col < 12 && col > -1 && row < 10 && row > -1) {\n        attackedPiece = board[row][col]\n        if (attackedPiece.color !== this.color) {\n          moves.push({ row, col })\n        }\n      }\n    }\n    else {\n      //DOWN\n      row = this.row + 1\n      col = this.col\n      if (col < 12 && col > -1 && row < 10 && row > -1) {\n        attackedPiece = board[row][col]\n        if (attackedPiece == 0) {\n          moves.push({ row, col })\n        }\n      }\n\n      //RIGHT DOWN\n      col = this.col + 1\n      if (col < 12 && col > -1 && row < 10 && row > -1) {\n        attackedPiece = board[row][col]\n        if (attackedPiece.color !== this.color) {\n          moves.push({ row, col })\n        }\n      }\n      //LEFT DOWN\n      if (col < 12 && col > -1 && row < 10 && row > -1) {\n        col = this.col - 1\n        attackedPiece = board[row][col]\n        if (attackedPiece.color !== this.color) {\n          moves.push({ row, col })\n        }\n      }\n    }\n  }\n}\n\nexport class PawnOfPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n  }\n  validMoves(board, playerColor) {\n    //ozel durumlar kontrol edilecek\n    if (true) {\n      super.validMoves(board, playerColor)\n    }\n  }\n}\n\nexport class KingPawn extends Pawn {\n  validMoves(board) {\n    //eğer\n    if (true) {\n      super.validMoves(board)\n    }\n  }\n}\n\nexport class CamelPawn extends Pawn {}\nexport class CatapultPawn extends Pawn {}\n\nexport class ElephantPawn extends Pawn {}\n\nexport class GeneralPawn extends Pawn {}\n\nexport class GiraffePawn extends Pawn {}\n\nexport class KnightPawn extends Pawn {}\n\nexport class RookPawn extends Pawn {}\n\nexport class VizierPawn extends Pawn {}\nexport class WarEnginePawn extends Pawn {}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessReducers.js",["137","138","139"],"import {\n  START_GAME,\n  CLEAR_HIGHLIGHTING,\n  SET_HIGHLIGHTING,\n  MOVE,\n} from './tamerlaneChessActionTypes'\nimport TamerlaneChess from '../tamerlane-chess'\nimport {\n  validFen,\n  fenToObj,\n  validPositionObject,\n  getPositionObject,\n} from '../helper/Fen'\n\nexport const initialState = {\n  fen: 'start',\n  dropSquareStyle: {},\n  squareStyles: {},\n  lightSquareStyle: { backgroundColor: 'rgb(240, 217, 181)' },\n  darkSquareStyle: { backgroundColor: 'rgb(181, 136, 99)' },\n  pieceSquare: '',\n  fromSquare: '',\n  toSquare: '',\n  selectedPiece: '',\n  history: [],\n  currentPosition: getPositionObject('start'),\n  sourceSquare: '',\n  targetSquare: '',\n  sourcePiece: '',\n  waitForTransition: false,\n  phantomPiece: null,\n  wasPieceTouched: false,\n  manualDrop: false,\n  squareClicked: false,\n  firstMove: false,\n}\n\nexport default function tamerlaneChessReducer(state = initialState, action) {\n  const {type, payload} = action\n  switch (type) {\n    case START_GAME:\n      const tamerlaneChess = new TamerlaneChess()\n      return {\n        ...state,\n        tamerlaneChess,\n      }\n    case MOVE:\n      const lastMoveStatus = state.tamerlaneChess.makeMove(payload)\n      return {\n        ...state,\n        lastMoveStatus,\n        isGameOver: state.tamerlaneChess.gameOver(),\n      }\n    case CLEAR_HIGHLIGHTING:\n      return {\n        ...state,\n        \n      }\n    case SET_HIGHLIGHTING:\n      return{\n        ...state,\n        squareStyles: payload\n      }\n    default:\n      return state\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessActionTypes.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/helper/Fen.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":5,"column":3,"nodeType":"146","messageId":"147","endLine":5,"endColumn":11},{"ruleId":"144","severity":1,"message":"148","line":6,"column":3,"nodeType":"146","messageId":"147","endLine":6,"endColumn":10},{"ruleId":"144","severity":1,"message":"149","line":83,"column":9,"nodeType":"146","messageId":"147","endLine":83,"endColumn":20},{"ruleId":"144","severity":1,"message":"145","line":1,"column":28,"nodeType":"146","messageId":"147","endLine":1,"endColumn":36},{"ruleId":"144","severity":1,"message":"148","line":1,"column":38,"nodeType":"146","messageId":"147","endLine":1,"endColumn":45},{"ruleId":"144","severity":1,"message":"150","line":4,"column":8,"nodeType":"146","messageId":"147","endLine":4,"endColumn":13},{"ruleId":"144","severity":1,"message":"151","line":10,"column":5,"nodeType":"146","messageId":"147","endLine":10,"endColumn":20},{"ruleId":"144","severity":1,"message":"152","line":11,"column":5,"nodeType":"146","messageId":"147","endLine":11,"endColumn":21},{"ruleId":"144","severity":1,"message":"153","line":12,"column":5,"nodeType":"146","messageId":"147","endLine":12,"endColumn":20},{"ruleId":"144","severity":1,"message":"149","line":18,"column":9,"nodeType":"146","messageId":"147","endLine":18,"endColumn":20},{"ruleId":"144","severity":1,"message":"154","line":20,"column":9,"nodeType":"146","messageId":"147","endLine":20,"endColumn":19},{"ruleId":"144","severity":1,"message":"155","line":21,"column":9,"nodeType":"146","messageId":"147","endLine":21,"endColumn":19},{"ruleId":"144","severity":1,"message":"156","line":23,"column":9,"nodeType":"146","messageId":"147","endLine":23,"endColumn":29},{"ruleId":"144","severity":1,"message":"157","line":24,"column":9,"nodeType":"146","messageId":"147","endLine":24,"endColumn":29},{"ruleId":"144","severity":1,"message":"158","line":2,"column":8,"nodeType":"146","messageId":"147","endLine":2,"endColumn":17},{"ruleId":"144","severity":1,"message":"159","line":181,"column":9,"nodeType":"146","messageId":"147","endLine":181,"endColumn":16},{"ruleId":"160","severity":1,"message":"161","line":10,"column":3,"nodeType":"162","messageId":"163","endLine":12,"endColumn":4},{"ruleId":"164","severity":1,"message":"165","line":56,"column":27,"nodeType":"166","messageId":"167","endLine":56,"endColumn":29},{"ruleId":"160","severity":1,"message":"161","line":82,"column":3,"nodeType":"162","messageId":"163","endLine":84,"endColumn":4},{"ruleId":"144","severity":1,"message":"168","line":9,"column":3,"nodeType":"146","messageId":"147","endLine":9,"endColumn":11},{"ruleId":"144","severity":1,"message":"169","line":10,"column":3,"nodeType":"146","messageId":"147","endLine":10,"endColumn":11},{"ruleId":"144","severity":1,"message":"170","line":11,"column":3,"nodeType":"146","messageId":"147","endLine":11,"endColumn":22},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","'setPosition' is assigned a value but never used.","'Piece' is defined but never used.","'currentPosition' is assigned a value but never used.","'lightSquareStyle' is assigned a value but never used.","'darkSquareStyle' is assigned a value but never used.","'handleDrag' is assigned a value but never used.","'handleDrop' is assigned a value but never used.","'getSquareCoordinates' is assigned a value but never used.","'setSquareCoordinates' is assigned a value but never used.","'PropTypes' is defined but never used.","'changed' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'validFen' is defined but never used.","'fenToObj' is defined but never used.","'validPositionObject' is defined but never used.","no-global-assign","no-unsafe-negation"]