[{"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js":"1","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js":"2","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js":"3","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js":"4","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js":"5","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js":"6","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js":"7","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js":"8","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js":"9","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js":"10","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js":"11","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js":"12","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js":"13","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js":"14","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js":"15","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js":"16","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js":"17","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Prince.js":"18","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js":"19","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/AdventitiousKing.js":"20","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js":"21","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/PlayGame.js":"22","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/VerifyEmail.js":"23","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/Login.js":"24","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/Signup.js":"25","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/PasswordReset.js":"26","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/home/Home.js":"27","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/profile/Profile.js":"28","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/hooks/useLocalStorage.js":"29","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/TakedPieceList.js":"30","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/GameTimer.js":"31","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/UserContext/index.js":"32","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/SocketContext/index.js":"33","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/AuthContext/index.js":"34","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/AuthContext/authActions.js":"35","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/AuthContext/authReducer.js":"36","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/PlayersContext/index.js":"37","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/index.js":"38","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/helper/Fen.js":"39","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/Board.js":"40","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/GameFinishDialog.js":"41","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/Square.js":"42","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/Piece.js":"43","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/CenteredContainer.js":"44","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/Dialog.js":"45","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/AppBar.js":"46","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/PasswordResetConfirm.js":"47","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/PageNotFound.js":"48","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/PrivateRoute.js":"49","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/contexts/TamerlaneChessContext/index.js":"50","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/contexts/TamerlaneChessContext/types.js":"51","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/contexts/TamerlaneChessContext/reducer.js":"52","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/hoc/withProvider.js":"53","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/GameAnalyze.js":"54","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/profile/shared/components/GameCardContainer.js":"55","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/profile/shared/contexts/ProfileContext/index.js":"56","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/profile/shared/components/GameCard.js":"57"},{"size":221,"mtime":1616683140521,"results":"58","hashOfConfig":"59"},{"size":2608,"mtime":1616772316872,"results":"60","hashOfConfig":"59"},{"size":156,"mtime":1610813905318,"results":"61","hashOfConfig":"59"},{"size":29279,"mtime":1616756666154,"results":"62","hashOfConfig":"59"},{"size":2240,"mtime":1612731440853,"results":"63","hashOfConfig":"59"},{"size":763,"mtime":1611134382815,"results":"64","hashOfConfig":"59"},{"size":364,"mtime":1612175140642,"results":"65","hashOfConfig":"59"},{"size":1303,"mtime":1612175140642,"results":"66","hashOfConfig":"59"},{"size":495,"mtime":1612175140642,"results":"67","hashOfConfig":"59"},{"size":361,"mtime":1612175140642,"results":"68","hashOfConfig":"59"},{"size":364,"mtime":1612175140642,"results":"69","hashOfConfig":"59"},{"size":631,"mtime":1612175140642,"results":"70","hashOfConfig":"59"},{"size":366,"mtime":1612175140642,"results":"71","hashOfConfig":"59"},{"size":489,"mtime":1612175140642,"results":"72","hashOfConfig":"59"},{"size":1077,"mtime":1612175140642,"results":"73","hashOfConfig":"59"},{"size":7042,"mtime":1612175140642,"results":"74","hashOfConfig":"59"},{"size":692,"mtime":1612212963247,"results":"75","hashOfConfig":"59"},{"size":476,"mtime":1612175140642,"results":"76","hashOfConfig":"59"},{"size":1239,"mtime":1612175140642,"results":"77","hashOfConfig":"59"},{"size":580,"mtime":1612175140642,"results":"78","hashOfConfig":"59"},{"size":584,"mtime":1612175140642,"results":"79","hashOfConfig":"59"},{"size":1319,"mtime":1616786750797,"results":"80","hashOfConfig":"59"},{"size":1192,"mtime":1616746527133,"results":"81","hashOfConfig":"59"},{"size":2463,"mtime":1616756103029,"results":"82","hashOfConfig":"59"},{"size":4264,"mtime":1616756113225,"results":"83","hashOfConfig":"59"},{"size":1771,"mtime":1616756777937,"results":"84","hashOfConfig":"59"},{"size":2735,"mtime":1616756125277,"results":"85","hashOfConfig":"59"},{"size":569,"mtime":1616786783486,"results":"86","hashOfConfig":"59"},{"size":843,"mtime":1616836391039,"results":"87","hashOfConfig":"59"},{"size":669,"mtime":1616754406075,"results":"88","hashOfConfig":"59"},{"size":3790,"mtime":1616770371494,"results":"89","hashOfConfig":"59"},{"size":454,"mtime":1616747470404,"results":"90","hashOfConfig":"59"},{"size":786,"mtime":1616683680581,"results":"91","hashOfConfig":"59"},{"size":3962,"mtime":1616664704462,"results":"92","hashOfConfig":"59"},{"size":798,"mtime":1612256306390,"results":"93","hashOfConfig":"59"},{"size":1524,"mtime":1613133021243,"results":"94","hashOfConfig":"59"},{"size":5419,"mtime":1616834667421,"results":"95","hashOfConfig":"59"},{"size":192,"mtime":1616770196266,"results":"96","hashOfConfig":"59"},{"size":5753,"mtime":1616756343745,"results":"97","hashOfConfig":"59"},{"size":1517,"mtime":1616770353906,"results":"98","hashOfConfig":"59"},{"size":1030,"mtime":1616770401475,"results":"99","hashOfConfig":"59"},{"size":893,"mtime":1616770385287,"results":"100","hashOfConfig":"59"},{"size":279,"mtime":1616836469601,"results":"101","hashOfConfig":"59"},{"size":356,"mtime":1612688878963,"results":"102","hashOfConfig":"59"},{"size":1115,"mtime":1616747229364,"results":"103","hashOfConfig":"59"},{"size":5225,"mtime":1616747229232,"results":"104","hashOfConfig":"59"},{"size":1614,"mtime":1616756751441,"results":"105","hashOfConfig":"59"},{"size":126,"mtime":1612257939093,"results":"106","hashOfConfig":"59"},{"size":489,"mtime":1615976606035,"results":"107","hashOfConfig":"59"},{"size":7474,"mtime":1616770268820,"results":"108","hashOfConfig":"59"},{"size":299,"mtime":1616683254350,"results":"109","hashOfConfig":"59"},{"size":2842,"mtime":1616770268820,"results":"110","hashOfConfig":"59"},{"size":165,"mtime":1616786706823,"results":"111","hashOfConfig":"59"},{"size":306,"mtime":1616772307451,"results":"112","hashOfConfig":"59"},{"size":344,"mtime":1616783262335,"results":"113","hashOfConfig":"59"},{"size":1002,"mtime":1616782751282,"results":"114","hashOfConfig":"59"},{"size":845,"mtime":1616783115495,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"qgqcp2",{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"118"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"118"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"118"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"118"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"118"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"118"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"118"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"118"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"118"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"118"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"118"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"118"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"118"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"118"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"118"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"118"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"118"},"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js",[],["250","251"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js",["252"],"import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport PlayGame from './game/PlayGame'\nimport Login from './auth/Login'\nimport Signup from './auth/Signup'\nimport VerifyEmail from './auth/VerifyEmail'\nimport PasswordReset from './auth/PasswordReset'\nimport PasswordResetConfirm from './auth/PasswordResetConfirm'\n\nimport Home from './home/Home'\nimport Profile from './profile/Profile'\nimport PageNotFound from './shared/components/PageNotFound'\nimport PrivateRoute from './shared/components/PrivateRoute'\nimport GameAnalyze from './game/GameAnalyze'\n\nimport BaseTemplate from './shared/components/AppBar'\nimport {\n  SocketProvider,\n  PlayersProvider,\n  AuthProvider,\n} from './shared/contexts'\nimport useLocalStorage from './shared/hooks/useLocalStorage'\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useLocalStorage('currentUser')\n  const [isGameStarted, setIsGameStarted] = useLocalStorage('isGameStarted')\n  console.log('isGameStarted', isGameStarted)\n  return (\n    <AuthProvider>\n      <SocketProvider currentUser={currentUser}>\n        <Pages currentUser={currentUser} setCurrentUser={setCurrentUser} />\n      </SocketProvider>\n    </AuthProvider>\n  )\n}\n\nfunction Pages({ currentUser, setCurrentUser }) {\n  return (\n    <>\n      <Router>\n        <PlayersProvider>\n          <PrivateRoute>\n            <BaseTemplate currentUser={currentUser} />\n          </PrivateRoute>\n          <Switch>\n            <Route exact path='/'>\n              <PrivateRoute>\n                <Home />\n              </PrivateRoute>\n            </Route>\n            <Route path='/signup'>\n              <Signup />\n            </Route>\n            <Route path='/login'>\n              <Login onSubmitUser={setCurrentUser} />\n            </Route>\n            <Route path='/email-verify'>\n              <VerifyEmail />\n            </Route>\n            <Route path='/password-reset'>\n              <PasswordReset />\n            </Route>\n            <Route path='/password-reset-complete/:uidb64/:token'>\n              <PasswordResetConfirm />\n            </Route>\n            <Route path='/play/online'>\n              <PlayGame />\n            </Route>\n            <Route path='/games/:id'>\n              <GameAnalyze />\n            </Route>\n            <Route path='/:username'>\n              <Profile />\n            </Route>\n            <Route path='*'>\n              <PageNotFound />\n            </Route>\n          </Switch>\n        </PlayersProvider>\n      </Router>\n    </>\n  )\n}\n\nexport default App\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js",["253","254","255","256","257","258","259"],"import { includeInTwoDimensArray, replaceAt } from './helper'\nimport { expandFenEmptySquares } from '../shared/helper/Fen'\nimport {\n  King,\n  Camel,\n  Catapult,\n  Elephant,\n  General,\n  Giraffe,\n  Knight,\n  Vizier,\n  WarEngine,\n  Rook,\n  PawnOfPawn,\n  CamelPawn,\n  CatapultPawn,\n  ElephantPawn,\n  GeneralPawn,\n  GiraffePawn,\n  KnightPawn,\n  VizierPawn,\n  WarEnginePawn,\n  RookPawn,\n  KingPawn,\n} from './Pieces'\nimport { FEN_TYPE } from './types'\nimport { positionChecker, getMoveList } from './helper'\nconst COLUMNS = 'abcdefghijk'.split('')\n\nexport default class TamerlaneChess {\n  static #rowCount = 10\n  static #lastRowIndex = 9\n  static #firstRowIndex = 0\n  static #colCount = 11\n  static #blackColor = 'b'\n  static #whiteColor = 'w'\n  #board = Array.from(Array(10), () => new Array(11))\n  #opponentBoard = Array.from(Array(10), () => new Array(11))\n  #player = 'player'\n  #opponetPlayer = 'opponent'\n  #turn = TamerlaneChess.#whiteColor\n  #time1 = 900\n  #time2 = 900\n  #storedTime1 = 0\n  #storedTime2 = 0\n  #winner = null\n  #last = null\n  #copy = true\n  #ready = false\n  #whiteKingCount = 1\n  #blackKingCount = 1\n\n  #playerColor\n  #opponentPlayerColor\n  #whiteKings = []\n  #blackKings = []\n  static #blackCitadel = 'y'\n  static #whiteCitadel = 'x'\n  #lastTakedPiece = null\n  #fen\n  #opponentFen\n  #whitePieces\n  #blackPieces\n  #isFinished = false\n  #history = []\n  #currentPlayerTakedPieceList = []\n  #opponentPlayerTakedPieceList = []\n\n  constructor(playerColor, fen = null) {\n    this.#playerColor = playerColor\n\n    this.#opponentPlayerColor =\n      this.#playerColor === TamerlaneChess.#blackColor\n        ? TamerlaneChess.#blackColor\n        : TamerlaneChess.#whiteColor\n\n    for (let row = 0; row < 10; row++) {\n      for (let col = 0; col < 11; col++) {\n        this.setPieceToBoard({ row, col }, 0)\n        this.#opponentBoard[row][col] = 0\n      }\n    }\n\n    this.setFen(fen)\n\n    this.#fen = expandFenEmptySquares(this.#fen)\n    this.#opponentFen = expandFenEmptySquares(this.#opponentFen)\n    console.log('')\n    this.parseFen()\n    // this.parseFen(FEN_TYPE.opponent)\n    console.log('this player color', this.#playerColor)\n    this.#whitePieces = this.getActivePiece(TamerlaneChess.#whiteColor)\n    this.#blackPieces = this.getActivePiece(TamerlaneChess.#blackColor)\n    // this.printBoard()\n  }\n\n  getActivePiece(color) {\n    const pieceList = []\n    let row, col\n    for (row = 0; row < TamerlaneChess.#rowCount; row++) {\n      for (col = 0; col < TamerlaneChess.#colCount; col++) {\n        const piece = this.getPiece({ row, col })\n        if (piece.color === color) {\n          pieceList.push(piece)\n        }\n      }\n    }\n\n    return pieceList\n  }\n\n  getPiece(position) {\n    if (typeof position === 'string') {\n      const { row, col } = this.squareToPosition(position)\n      return this.#board[row][col]\n    } else if (typeof position === 'object') {\n      const { row, col } = position\n\n      if (position.hasOwnProperty('row') && position.hasOwnProperty('col')) {\n        return this.#board[row][col]\n      } else {\n        throw Error('Position object must have row and col properties')\n      }\n    } else {\n      throw Error('Position type must be string or object')\n    }\n  }\n\n  setPieceToBoard({ row, col }, piece) {\n    this.#board[row][col] = piece\n  }\n\n  isPromoted(piece) {\n    if (!piece.pawn) return false\n    const { row, col, color, promotedToPiece } = piece\n    const conditionRow =\n      this.#playerColor === color\n        ? TamerlaneChess.#lastRowIndex\n        : TamerlaneChess.#firstRowIndex\n    console.log('condition row', conditionRow)\n    console.log('piece row', row)\n    if (conditionRow === row + 1) {\n      return true\n    }\n    return false\n  }\n\n  makePromotion(piece) {\n    if (!piece.pawn) return\n    const { row, col, color, promotedToPiece } = piece\n    const conditionRow =\n      this.#playerColor === color\n        ? TamerlaneChess.#lastRowIndex\n        : TamerlaneChess.#firstRowIndex\n    console.log('condition row', conditionRow)\n    if (\n      conditionRow !== row ||\n      (piece.constructor.name === 'PawnOfPawn' && piece.promotedCount === 3)\n    ) {\n      return\n    }\n\n    //opponent board will be set\n    console.log('piece.promotedCount ', piece.promotedCount)\n    if (piece.constructor.name === 'PawnOfPawn') {\n      piece.promotedCount += 1\n      if (piece.promotedCount === 3) {\n        const adventitiousKing = new promotedToPiece(row, col, color)\n        this.setPieceToBoard({ row, col }, adventitiousKing)\n        this.setPieceToList(adventitiousKing)\n        this.updateFenToPromotedPiece({ row, col }, adventitiousKing.fenChar)\n        this.setKing(adventitiousKing)\n      }\n    } else {\n      const piece = new promotedToPiece(row, col, color)\n      this.setPieceToBoard({ row, col }, piece)\n      this.setPieceToList(piece)\n      this.updateFenToPromotedPiece({ row, col }, piece.fenChar)\n      if (piece.constructor.name === 'Prince') {\n        this.setKing(piece)\n      }\n    }\n\n    console.log('piece.promotedCount ', piece.promotedCount)\n    // this.printBoard()\n  }\n\n  isPiecePromotedPawnOfPawn(fromSquare) {\n    const piece = this.getPiece(fromSquare)\n    if (\n      piece !== 0 &&\n      piece.constructor.name === 'PawnOfPawn' &&\n      piece.promotedCount > 0\n    ) {\n      return true\n    }\n    return false\n  }\n\n  getMoves(square, movingPlayerColor) {\n    if (this.isFinished()) return null\n    const { row, col } = this.squareToPosition(square)\n    if (!this.isMovingPlayerInTurn(row, col)) return null\n    console.log(`row:${row}, col:${col}`)\n    const piece = this.getPiece({ row, col })\n    // this.printBoard()\n    console.log('piece', piece)\n    let moveList\n    console.log(moveList)\n    let squareList\n    const kings = this.getKings(piece.color)\n    if (kings.length === 1) {\n      console.log('kings length 1')\n      moveList = this.getSafeMoves(piece, movingPlayerColor)\n    } else {\n      console.log('multiple king')\n      moveList = getMoveList(this.#board, piece, this.#playerColor)\n    }\n\n    squareList = moveList.map((move) => {\n      return this.positionToSquare(move.row, move.col)\n    })\n    if (piece.color === TamerlaneChess.#whiteColor) {\n      console.log(this.#whiteKings)\n    } else {\n      console.log(this.#blackKings)\n    }\n    return squareList\n  }\n\n  getKings(color) {\n    return color === TamerlaneChess.#whiteColor\n      ? this.#whiteKings\n      : this.#blackKings\n  }\n\n  getPlayerPieces(color) {\n    return color === TamerlaneChess.#whiteColor\n      ? this.#whitePieces\n      : this.#blackPieces\n  }\n\n  getSafeMoves(piece, movingPlayerColor) {\n    let fakeTakedPiece\n    const safeMoves = []\n    const opponentColor =\n      movingPlayerColor === TamerlaneChess.#whiteColor\n        ? TamerlaneChess.#blackColor\n        : TamerlaneChess.#whiteColor\n    const moves = getMoveList(this.#board, piece, this.#playerColor)\n    for (const move of moves) {\n      const from = { row: piece.row, col: piece.col }\n      fakeTakedPiece = this.getPiece(move)\n      console.log('before remove piece from list')\n      console.log(this.getPlayerPieceList(opponentColor))\n      this.removePieceFromList(fakeTakedPiece)\n      this.changePiecePosition(from, move)\n      console.log('updating opponent player moves')\n      this.updatePlayerMoves(movingPlayerColor)\n      console.log('after remove piece from list')\n      console.log(this.getPlayerPieceList(opponentColor))\n      const king = this.getSingleKing(piece.color)\n      console.log('king', king)\n      if (\n        !this.isSquareInAttacked({ row: king.row, col: king.col }, piece.color)\n      ) {\n        safeMoves.push(move)\n      }\n      this.changePiecePosition(move, from)\n      this.setTakedPiece(fakeTakedPiece)\n    }\n    this.updatePlayerMoves(movingPlayerColor)\n    return safeMoves\n  }\n\n  removePieceFromList(piece) {\n    if (piece === 0) return\n    if (piece.color === TamerlaneChess.#whiteColor) {\n      console.log('taked piece', piece)\n      this.#whitePieces = [...this.#whitePieces].filter(\n        (pce) => JSON.stringify(pce) !== JSON.stringify(piece)\n      )\n      console.log('white pieces in this')\n      console.log(this.#whitePieces)\n    } else {\n      console.log('taked piece', piece)\n      this.#blackPieces = [...this.#blackPieces].filter(\n        (pce) => JSON.stringify(pce) !== JSON.stringify(piece)\n      )\n      console.log('black pieces in this')\n      console.log(this.#blackPieces)\n    }\n  }\n\n  removeKing(piece) {\n    console.log('removing king', piece)\n    if (piece.color === TamerlaneChess.#whiteColor) {\n      console.log('king removed', piece)\n      this.#whiteKings = [...this.#whiteKings].filter(\n        (king) => JSON.stringify(king) !== JSON.stringify(piece)\n      )\n      console.log('white kings', this.#whiteKings)\n    } else {\n      this.#blackKings = [...this.#blackKings].filter(\n        (king) => JSON.stringify(king) !== JSON.stringify(piece)\n      )\n    }\n  }\n\n  setTakedPiece(piece) {\n    if (piece === 0) return\n    this.setPieceToBoard({ row: piece.row, col: piece.col }, piece)\n    this.setPieceToList(piece)\n  }\n\n  getPlayerPieceList(color) {\n    return color === TamerlaneChess.#whiteColor\n      ? this.#whitePieces\n      : this.#blackPieces\n  }\n\n  getSingleKing(color) {\n    return color === TamerlaneChess.#whiteColor\n      ? this.#whiteKings[0]\n      : this.#blackKings[0]\n  }\n\n  isSquareInAttacked(square, color) {\n    const opponentPieces =\n      color === TamerlaneChess.#whiteColor\n        ? this.getPlayerPieces(TamerlaneChess.#blackColor)\n        : this.getPlayerPieces(TamerlaneChess.#whiteColor)\n    for (const piece of opponentPieces) {\n      for (const move of piece.moveList) {\n        if (move.row === square.row && move.col === square.col) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  getTurn() {\n    return this.#turn\n  }\n\n  gameOver() {\n    return false\n  }\n\n  hasMovingPlayerPiece(row, col, movingPlayerColor) {\n    console.log(`row:${row}, col:${col}`)\n    const piece = this.getPiece({ row, col })\n    // if (piece && piece.color === movingPlayerColor) {\n    //   return true\n    // }\n    return true\n  }\n\n  isMovingPlayerInTurn(row, col) {\n    console.log(`row:${row}, col:${col}`)\n    const piece = this.getPiece({ row, col })\n    if (piece && piece.color === this.#turn) return true\n    return false\n  }\n\n  undoMove(from, to, takedPiece) {\n    this.changePiecePosition(to, from)\n    this.setTakedPiece(takedPiece)\n    if (takedPiece.king) {\n      this.setKing(takedPiece)\n    }\n  }\n\n  changePiecePosition(from, to) {\n    // this.updateFen(from, to)\n    this.#lastTakedPiece = this.#board[to.row][to.col]\n    const movingPiece = this.#board[from.row][from.col]\n    movingPiece.changePosition(to.row, to.col)\n    this.#board[to.row][to.col] = this.#board[from.row][from.col]\n    this.#board[from.row][from.col] = 0\n  }\n\n  makeTemporaryMove(from, to) {\n    this.changePiecePosition(from, to)\n  }\n\n  undoTemporaryMove(from, to) {}\n\n  makeMove(fromSquare, toSquare, movingPlayerColor) {\n    const t0 = performance.now()\n    if (this.isFinished()) return null\n    console.log(`from:${fromSquare}, to:${toSquare}`)\n    const fromPos = this.squareToPosition(fromSquare)\n    const toPos = this.squareToPosition(toSquare)\n    if (\n      !(\n        this.IsPositionInBoard(fromPos.row, fromPos.col) &&\n        this.IsPositionInBoard(toPos.row, toPos.col) &&\n        this.isMovingPlayerInTurn(fromPos.row, fromPos.col) &&\n        this.hasMovingPlayerPiece(fromPos.row, fromPos.col, movingPlayerColor)\n      )\n    ) {\n      return null\n    }\n\n    const piece = this.#board[fromPos.row][fromPos.col]\n    const moves = getMoveList(this.#board, piece, this.#playerColor)\n\n    let isMoveValid = false\n    //check if move is possible\n    for (const { row, col } of moves) {\n      if (toPos.row === row && toPos.col === col) {\n        isMoveValid = true\n        break\n      }\n    }\n    console.log('is move valid')\n    if (!isMoveValid) return null\n    console.log('move valid')\n\n    const takedPiece = this.getPiece(toPos)\n    this.changePiecePosition(fromPos, toPos)\n    this.removePieceFromList(takedPiece)\n    if (takedPiece.king) {\n      console.log('try to remove king')\n      this.removeKing(takedPiece)\n    }\n    if (this.isChecked(piece.color)) {\n      this.undoMove(fromPos, toPos, takedPiece)\n      return\n    }\n    // this.printBoard()\n    //move is possible\n\n    this.makePromotion(piece)\n    this.updateMoves(movingPlayerColor)\n    this.setHistory(fromSquare, toSquare)\n    console.log('history', this.#history)\n\n    this.#turn =\n      this.#turn === TamerlaneChess.#whiteColor\n        ? TamerlaneChess.#blackColor\n        : TamerlaneChess.#whiteColor\n    this.updateFen(fromPos, toPos, piece.fenChar)\n    const move = { from: fromSquare, to: toSquare }\n    const rowColMoveInOpponentBoard = this.computeMoveInOpponentBoard(\n      fromPos,\n      toPos\n    )\n    const moveInOpponentBoard = {\n      from: this.positionToSquare(\n        rowColMoveInOpponentBoard.from.row,\n        rowColMoveInOpponentBoard.from.col\n      ),\n      to: this.positionToSquare(\n        rowColMoveInOpponentBoard.to.row,\n        rowColMoveInOpponentBoard.to.col\n      ),\n    }\n    console.log('opponent move', moveInOpponentBoard)\n    //saved Move always according to white player\n    let savedMove\n    if (this.#playerColor === TamerlaneChess.#whiteColor) {\n      savedMove = move\n    } else {\n      savedMove = moveInOpponentBoard\n    }\n    if (takedPiece.king) {\n      if (takedPiece.color === TamerlaneChess.#whiteColor) {\n        console.log(this.#whiteKings)\n      } else {\n        console.log(this.#blackKings)\n      }\n    }\n    console.log('current fen', this.#fen)\n    console.log('current opponentFen', this.#opponentFen)\n    this.setTakedPieceList(takedPiece)\n    const t1 = performance.now()\n    console.log('moved in', t1 - t0)\n    return {\n      status: '',\n      move,\n      moveInOpponentBoard,\n      savedMove,\n    }\n  }\n\n  setTakedPieceList(takedPiece) {\n    if (takedPiece === 0) return\n    if (takedPiece.color === this.#playerColor) {\n      this.#currentPlayerTakedPieceList.push(takedPiece)\n    } else {\n      this.#opponentPlayerTakedPieceList.push(takedPiece)\n    }\n  }\n  getOpponentTakedPieceList() {\n    return this.#opponentPlayerTakedPieceList\n  }\n  getCurrentPlayerTakedPieceList() {\n    return this.#currentPlayerTakedPieceList\n  }\n\n  setHistory(fromSquare, toSquare) {\n    if (this.#turn === TamerlaneChess.#whiteColor) {\n      this.#history.push({ [this.#turn]: { from: fromSquare, to: toSquare } })\n    } else {\n      const lastMove = this.#history[this.#history.length - 1]\n      lastMove[this.#turn] = { from: fromSquare, to: toSquare }\n    }\n  }\n\n  getHistory() {\n    return this.#history\n  }\n\n  getCurrentFen() {\n    return this.#fen\n  }\n\n  static reverseFen(fen) {\n    const startIndex = fen.indexOf('*')\n    const veriablesFen = fen.substring(startIndex + 1)\n    const boardFen = fen.replace(/\\*.+$/, '')\n    const reverseBoardFen = boardFen.split('').reverse().join('') + '*'\n    const reversedFen = reverseBoardFen + veriablesFen\n    console.log('reversedFen', reversedFen)\n    return reversedFen\n  }\n\n  setFen(fen) {\n    //Beyaz taşlar ekranda aşağıda ise\n    //  'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBYQEHTNR/KAMZGSVZMAK/F1D1I1I1D1F*2 w'\n    let defaultWhitePiecesAtBottomFen =\n      'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBEQYHTNR/KAMZGSVZMAK/F1D1I1I1D1F* w'\n    //Siyah taşlar ekranda aşağıda ise\n    let defaultBlackPiecesAtBottomFen =\n      'F1D1I1I1D1F/KAMZVSGZMAK/PXCBYQEHTNR/92/92/92/92/pxcbyqehtnr/kamzgsvzmak/f1d1i1i1d1f* w'\n\n    if (fen === null) {\n      if (this.#playerColor === TamerlaneChess.#whiteColor) {\n        this.#fen = defaultWhitePiecesAtBottomFen\n        this.#opponentFen = defaultBlackPiecesAtBottomFen\n        console.log('white side')\n      } else {\n        console.log('white side')\n        this.#fen = defaultBlackPiecesAtBottomFen\n        this.#opponentFen = defaultWhitePiecesAtBottomFen\n      }\n\n      console.log('fen', fen)\n    } else {\n      if (this.#playerColor === TamerlaneChess.#whiteColor) {\n        this.#fen = fen\n        this.#opponentFen = TamerlaneChess.reverseFen(fen)\n      } else {\n        this.#opponentFen = fen\n        this.#fen = TamerlaneChess.reverseFen(fen)\n      }\n    }\n    console.log('fen', this.#fen)\n    console.log('opponent fen', this.#opponentFen)\n    this.printBoard()\n  }\n\n  getWhiteAtBottomFen() {\n    console.log('this.#playerColor', this.#playerColor)\n    return this.#playerColor === TamerlaneChess.#whiteColor\n      ? this.#fen\n      : this.#opponentFen\n  }\n\n  isSwitched() {\n    return false\n  }\n\n  updateFenToPromotedPiece(promotedPiecePosition, promotedPieceFenChar) {\n    const movedPieceCharIndexInFen = this.getIndexInFen(promotedPiecePosition)\n    this.replacePieceFenCharAt(movedPieceCharIndexInFen, promotedPieceFenChar)\n  }\n\n  updateFen(from, to, movedPieceFenChar) {\n    //position already chaged so from is to, to is from\n\n    const newTo = from\n    const newFrom = to\n    const moveInOpponentBoard = this.computeMoveInOpponentBoard(newFrom, newTo)\n    const movedPiece = this.getPiece(newFrom)\n    console.log('moved piece', movedPiece)\n    const pieceCharIndex = this.getIndexInFen(movedPiece)\n    const opponentPieceCharIndex = this.getIndexInOpponentFen(movedPiece)\n    const toSquareCharIndex = this.getIndexInFen(newTo)\n    const opponentToSquareCharIndex = this.getIndexInOpponentFen(newTo)\n    // this.replacePieceFenCharAt(charIndexInFen, movedPieceFenChar)\n    this.#fen = replaceAt(this.#fen, pieceCharIndex, movedPieceFenChar)\n    this.#opponentFen = replaceAt(\n      this.#opponentFen,\n      opponentPieceCharIndex,\n      movedPieceFenChar\n    )\n    // this.replacePieceFenCharAt(toSquareCharIndexInFen, '1')\n    this.#fen = replaceAt(this.#fen, toSquareCharIndex, '1')\n    this.#opponentFen = replaceAt(\n      this.#opponentFen,\n      opponentToSquareCharIndex,\n      '1'\n    )\n    console.log('opponent fen length', this.#opponentFen.length)\n    console.log('fen length', this.#fen.length)\n    const lastIndex = this.#fen.length - 1\n    this.#fen = this.#fen.substring(0, lastIndex) + this.#turn\n    this.#opponentFen = this.#opponentFen.substring(0, lastIndex) + this.#turn\n    console.log('updated fen', this.#fen)\n    console.log('updated opponent fen', this.#opponentFen)\n  }\n\n  replacePieceFenCharAt(charIndex, pieceFenChar) {\n    this.#fen = replaceAt(this.#fen, charIndex, pieceFenChar)\n  }\n\n  getIndexInFen({ row, col }) {\n    /*\n     let defaultWhitePiecesAtBottomFen =\n      'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBEQYHTNR/KAMZGSVZMAK/F1D1I1I1D1F* w'\n    //Siyah taşlar ekranda aşağıda ise\n    let defaultBlackPiecesAtBottomFen =\n      'F1D1I1I1D1F/KAMZVSGZMAK/PXCBYQEHTNR/92/92/92/92/pxcbyqehtnr/kamzgsvzmak/f1d1i1i1d1f* w'\n    */\n\n    return (9 - row) * 12 + col\n  }\n\n  getIndexInOpponentFen({ row, col }) {\n    return row * 12 + col\n  }\n\n  //Helper functions\n  squareToPosition(square) {\n    console.log(square)\n    console.log(`square:${square}`)\n    const col = COLUMNS.indexOf(square[0])\n    //square length can be 2 or 3\n    const row = Number(square.replace(/^[a-k]/, '')) - 1\n    console.log(`square row: ${row}, col: ${col}`)\n    return { col, row }\n  }\n  positionToSquare(row, col) {\n    const rank = row + 1\n    const file = COLUMNS[col]\n    const square = `${file}${rank}`\n    return square\n  }\n\n  isOwnCitadel(square, movingPlayerColor) {\n    const ownCitadel =\n      movingPlayerColor === TamerlaneChess.#whiteColor\n        ? TamerlaneChess.#whiteCitadel\n        : TamerlaneChess.#blackCitadel\n\n    if (square === ownCitadel) return true\n    else return false\n  }\n\n  computeMoveInOpponentBoard(from, to) {\n    console.log('computeMoveInOpponentBoard')\n    console.log('from')\n    console.log(from)\n    console.log('to')\n    console.log(to)\n    const fromInOpponent = {}\n    const toInOpponent = {}\n    fromInOpponent.row = TamerlaneChess.#rowCount - from.row - 1\n    fromInOpponent.col = TamerlaneChess.#colCount - from.col - 1\n    toInOpponent.row = TamerlaneChess.#rowCount - to.row - 1\n    toInOpponent.col = TamerlaneChess.#colCount - to.col - 1\n    // const toSquare = this.positionToSquare(to.row, to.col)\n    // const fromSquare = this.positionToSquare(from.row, from.col)\n    return { from: fromInOpponent, to: toInOpponent }\n  }\n\n  computeOpponentFen(fen) {\n    // const lastSlahIndex = fen.lastIndexOf('/')\n    // let opponentFen = ''\n    // for (let i = 0; i < fen.length; i++) {\n    //   if (i === lastSlahIndex) {\n    //     break\n    //   }\n    //   opponentFen = `${fen[i]}${opponentFen}`\n    // }\n    // let remainStringIndex = lastSlahIndex\n    // for (; remainStringIndex < fen.length; remainStringIndex++) {\n    //   opponentFen = `${opponentFen}${fen[remainStringIndex]}`\n    // }\n    // return opponentFen\n  }\n\n  updateMoves(movingPlayerColor) {\n    this.updatePlayerMoves(movingPlayerColor)\n    this.updatePlayerMoves(movingPlayerColor)\n  }\n\n  updatePlayerMoves(movingPlayerColor) {\n    const opponentPlayerColor =\n      movingPlayerColor === TamerlaneChess.#whiteColor\n        ? TamerlaneChess.#blackColor\n        : TamerlaneChess.#whiteColor\n    console.log('moving playerColor', movingPlayerColor)\n    const pieces =\n      opponentPlayerColor === TamerlaneChess.#whiteColor\n        ? this.#whitePieces\n        : this.#blackPieces\n    let piece\n    for (piece of pieces) {\n      if (piece.pawn) piece.updateValidMoves(this.#board, this.#playerColor)\n      else piece.updateValidMoves(this.#board)\n    }\n  }\n\n  setPieceToList(piece) {\n    if (piece.color === TamerlaneChess.#whiteColor) {\n      this.#whitePieces.push(piece)\n    } else if (piece.color === TamerlaneChess.#blackColor) {\n      this.#blackPieces.push(piece)\n    }\n  }\n\n  getOpponentValues() {}\n\n  draw(win, color) {}\n  setKing(king) {\n    console.log('king setting', king)\n    if (king.color === TamerlaneChess.#whiteColor) {\n      this.#whiteKings.push(king)\n    } else {\n      this.#blackKings.push(king)\n    }\n  }\n\n  getDangerMoves(color) {\n    const kings =\n      color === TamerlaneChess.#whiteColor ? this.#whiteKings : this.#blackKings\n\n    if (kings.length === 1) {\n      const pieces =\n        color === TamerlaneChess.#whiteColor\n          ? this.#blackPieces\n          : this.#whitePieces\n      let piece, move\n      for (piece of pieces) {\n        for (move of piece.moveList) {\n          if (move.row === kings[0].row && move.col === kings[0].col) {\n          }\n        }\n      }\n    }\n  }\n\n  isChecked(color) {\n    console.log('updating move in isChecked func')\n    this.updateMoves(color)\n\n    const kings =\n      color === TamerlaneChess.#whiteColor ? this.#whiteKings : this.#blackKings\n    console.log('kings', kings)\n    console.log('white kings', this.#whiteKings)\n    console.log('black kings', this.#blackKings)\n    if (kings.length === 1) {\n      const pieces =\n        color === TamerlaneChess.#whiteColor\n          ? this.#blackPieces\n          : this.#whitePieces\n      let piece, move\n      const singleKing = kings[0]\n      console.log(pieces)\n      for (piece of pieces) {\n        for (move of piece.moveList) {\n          if (move.row === singleKing.row && move.col === singleKing.col) {\n            console.log('checked')\n            return true\n          }\n        }\n      }\n    }\n    return false\n  }\n\n  isSingleKingIndangerMoves() {}\n\n  printBoard() {\n    for (let i = this.#board.length - 1; i >= 0; i--) {\n      console.log(this.#board[i])\n    }\n  }\n\n  finish() {\n    this.#isFinished = true\n  }\n\n  isFinished() {\n    return this.#isFinished\n  }\n\n  checkMate(color) {}\n\n  parseFen() {\n    console.log('fen in parseFen', this.#fen)\n    let fen\n\n    let fenCounter = 0\n    let row = TamerlaneChess.#rowCount - 1\n    let col = 0\n    let king\n    let piece\n    while (row >= 0 && fenCounter < this.#fen.length) {\n      let emptySquareCount = 0\n      switch (this.#fen[fenCounter]) {\n        case 'p':\n          piece = new PawnOfPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'b':\n          piece = new ElephantPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'c':\n          piece = new CamelPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'x':\n          piece = new WarEnginePawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'r':\n          piece = new RookPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'n':\n          piece = new KnightPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 't':\n          piece = new CatapultPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'h':\n          piece = new GiraffePawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'y':\n          piece = new VizierPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'q':\n          piece = new KingPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'e':\n          piece = new GeneralPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'f':\n          piece = new Elephant(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'd':\n          piece = new Camel(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'i':\n          piece = new WarEngine(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'k':\n          piece = new Rook(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'a':\n          piece = new Knight(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'm':\n          piece = new Catapult(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'z':\n          piece = new Giraffe(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'g':\n          piece = new General(row, col, TamerlaneChess.#blackColor)\n          break\n        case 's':\n          king = new King(row, col, TamerlaneChess.#blackColor)\n          this.setKing(king)\n          piece = king\n          break\n        case 'v':\n          piece = new Vizier(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'P':\n          piece = new PawnOfPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'B':\n          piece = new ElephantPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'C':\n          piece = new CamelPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'X':\n          piece = new WarEnginePawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'R':\n          piece = new RookPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'N':\n          piece = new KnightPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'T':\n          piece = new CatapultPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'H':\n          piece = new GiraffePawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'Y':\n          piece = new VizierPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'Q':\n          piece = new KingPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'E':\n          piece = new GeneralPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'F':\n          piece = new Elephant(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'D':\n          piece = new Camel(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'I':\n          piece = new WarEngine(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'K':\n          piece = new Rook(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'A':\n          piece = new Knight(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'M':\n          piece = new Catapult(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'Z':\n          piece = new Giraffe(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'G':\n          piece = new General(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'S':\n          piece = new King(row, col, TamerlaneChess.#whiteColor)\n          this.setKing(piece)\n          break\n        case 'V':\n          piece = new Vizier(row, col, TamerlaneChess.#whiteColor)\n          break\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          emptySquareCount = Number(this.#fen[fenCounter])\n          break\n        case '/':\n        case ' ':\n          row -= 1\n          col = 0\n          fenCounter++\n          continue\n        default:\n          console.log(this.#fen[fenCounter])\n          console.log('Fen finished')\n          console.log('after parsed')\n          this.printBoard()\n          return\n      }\n      console.log('emptySquareCount', emptySquareCount)\n      if (emptySquareCount === 0) {\n        this.setPieceToBoard({ row, col }, piece)\n        console.log('piece', piece)\n        col += 1\n      } else {\n        for (let i = 0; i < emptySquareCount; i++) {\n          col += 1\n          this.setPieceToBoard({ row, col }, 0)\n        }\n      }\n\n      fenCounter++\n    }\n  }\n}\nObject.assign(TamerlaneChess.prototype, positionChecker())\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js",["260"],"import Piece from './Piece'\n\nexport default class Giraffe extends Piece {\n  static #directions = [\n    { rowDir: -1, colDir: 1 },\n    { rowDir: 1, colDir: 1 },\n    { rowDir: 1, colDir: -1 },\n    { rowDir: -1, colDir: -1 },\n  ]\n\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.fenChar = 'z'\n    this.setFenChar()\n  }\n\n  validMoves(board) {\n    const moves = []\n    let currentCol\n    let currentRow\n    for (const { rowDir, colDir } of Giraffe.#directions) {\n      currentCol = this.col + rowDir\n      currentRow = this.row + colDir\n      let piece = board[currentCol][currentRow]\n    }\n\n    return moves\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js",["261","262"],"import Piece from './Piece'\nimport Camel from './Camel'\nimport Knight from './Knight'\nimport General from './General'\nimport Catapult from './Catapult'\nimport Vizier from './Vizier'\nimport WarEngine from './WarEngine'\nimport Giraffe from './Giraffe'\nimport Elephant from './Elephant'\nimport Rook from './Rook'\nimport AdventitiousKing from './AdventitiousKing'\nimport Prince from './Prince'\nimport { COLOR } from '../types'\nimport { getMoveList, SuperArray } from '../helper'\nclass Pawn extends Piece {\n  static _diagonalColsIncrementValues = [-1, 1]\n  constructor(row, col, color) {\n    super(row, col, color)\n    if (this.constructor === Pawn) {\n      throw Error('Pawn can not be instated')\n    }\n\n    this.pawn = true\n  }\n\n  updateValidMoves(board, playerColor) {\n    this.moveList = this.validMoves(board, playerColor)\n  }\n\n  isPieceOpponent(row, col, board) {\n    const attackedPiece = board[row][col]\n    if (attackedPiece !== 0 && attackedPiece.color !== this.color) {\n      return true\n    }\n    return false\n  }\n\n  validMoves(board, playerColor) {\n    if (playerColor !== COLOR.white && playerColor !== COLOR.black) {\n      throw Error('No matching player color with black or white')\n    }\n    const moves = []\n    let row\n    let col\n\n    const rowIncrementValue = playerColor === this.color ? 1 : -1\n    row = this.row + rowIncrementValue\n\n    //UP\n    col = this.col\n    if (\n      this.IsPositionInBoard(row, col) &&\n      this.isSquareEmpty(row, col, board)\n    ) {\n      moves.push({ row, col })\n    }\n\n    let colIncrementValue\n    for (colIncrementValue of Pawn._diagonalColsIncrementValues) {\n      col = this.col + colIncrementValue\n      if (\n        this.IsPositionInBoard(row, col) &&\n        this.isPieceOpponent(row, col, board)\n      ) {\n        moves.push({ row, col })\n      }\n    }\n\n    return moves\n  }\n}\n\nexport class PawnOfPawn extends Pawn {\n  static #firstPromoted = 1\n  static #secondPromoted = 2\n  static #noPromoted = 0\n\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedCount = 0\n    this.fenChar = 'p'\n    this.promotedToPiece = AdventitiousKing\n    this.setFenChar()\n  }\n  validMoves(board, playerColor) {\n    switch (this.getPromotedType(playerColor)) {\n      //regular moves\n      case PawnOfPawn.#noPromoted:\n        return super.validMoves(board, playerColor)\n      case PawnOfPawn.#firstPromoted:\n        return SuperArray.getUniqueItemContextArray([\n          ...this.getForkMoves(board, playerColor),\n          ...this.getImmobileMoves(board, playerColor),\n        ])\n      case PawnOfPawn.#secondPromoted:\n        const kingPawnInıtPos =\n          playerColor === this.color ? { row: 2, col: 5 } : { row: 7, col: 5 }\n        return [kingPawnInıtPos]\n    }\n  }\n\n  getForkMoves(board, playerColor) {\n    const moves = []\n    let row, col, piece\n    for (row of board) {\n      for (piece of row) {\n        if (\n          this.isOpponentPiece(piece) &&\n          this.IsPositionInBoard(piece.row, piece.col + 2)\n        ) {\n          const rowIncrement = playerColor === this.color ? -1 : 1\n          const forkingRow = piece.row + rowIncrement\n          const forkingCol = piece.col + 1\n          if (this.IsPositionInBoard(forkingRow, forkingCol)) {\n            moves.push({ row: forkingRow, col: forkingCol })\n          }\n        }\n      }\n    }\n    return moves\n  }\n\n  getImmobileMoves(board, playerColor) {\n    const moves = []\n    let row\n    let piece\n    for (row of board) {\n      for (piece of row) {\n        if (this.isOpponentPiece(piece)) {\n          const opponentPieceMoves = getMoveList(board, piece, playerColor)\n          if (opponentPieceMoves.length === 0) {\n            let rowPos, colPos\n            const rowIncerementValue = playerColor === this.color ? -1 : 1\n            rowPos = piece.row + rowIncerementValue\n            let colIncrementValue\n            for (colIncrementValue of PawnOfPawn._diagonalColsIncrementValues) {\n              colPos = piece.col + colIncrementValue\n              if (this.IsPositionInBoard(rowPos, colPos)) {\n                moves.push({\n                  row: rowPos,\n                  col: colPos,\n                })\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return moves\n  }\n\n  getPromotedType(playerColor) {\n    if (\n      (playerColor === this.color &&\n        this.row === 9 &&\n        this.promotedCount === PawnOfPawn.#firstPromoted) ||\n      (playerColor !== this.color &&\n        this.row === 0 &&\n        this.promotedCount === PawnOfPawn.#firstPromoted)\n    ) {\n      return PawnOfPawn.#firstPromoted\n    } else if (\n      (playerColor !== this.color &&\n        this.row === 0 &&\n        this.promotedCount === PawnOfPawn.#secondPromoted) ||\n      (playerColor === this.color &&\n        this.row === 9 &&\n        this.promotedCount === PawnOfPawn.#secondPromoted)\n    ) {\n      console.log('second promoted')\n      return PawnOfPawn.#secondPromoted\n    }\n    return PawnOfPawn.#noPromoted\n  }\n}\n\nexport class KingPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Prince\n    this.fenChar = 'q'\n    this.setFenChar()\n  }\n  validMoves(board, playerColor) {\n    //eğer\n    if (true) {\n      return super.validMoves(board, playerColor)\n    }\n  }\n}\n\nexport class CamelPawn extends Pawn {\n  constructor(row, col, color, fenChar) {\n    super(row, col, color, fenChar)\n    this.promotedToPiece = Camel\n    this.fenChar = 'c'\n    this.setFenChar()\n  }\n\n  validMoves(board, playerColor) {\n    return super.validMoves(board, playerColor)\n  }\n}\n\nexport class CatapultPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Catapult\n    this.fenChar = 't'\n  }\n}\nexport class ElephantPawn extends Pawn {\n  constructor(row, col, color, fenChar) {\n    super(row, col, color, fenChar)\n    this.promotedToPiece = Elephant\n    this.fenChar = 'b'\n    this.setFenChar()\n  }\n}\nexport class GeneralPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = General\n    this.fenChar = 'e'\n    this.setFenChar()\n  }\n}\nexport class GiraffePawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Giraffe\n    this.fenChar = 'h'\n    this.setFenChar()\n  }\n}\nexport class KnightPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Knight\n    this.fenChar = 'n'\n    this.setFenChar()\n  }\n}\nexport class RookPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Rook\n    this.fenChar = 'r'\n    this.setFenChar()\n  }\n}\nexport class VizierPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Vizier\n    this.fenChar = 'y'\n    this.setFenChar()\n  }\n}\nexport class WarEnginePawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = WarEngine\n    this.fenChar = 'x'\n    this.setFenChar()\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Prince.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/AdventitiousKing.js",["263"],"import Piece from './Piece'\n\nimport { KingDirectionsObj, NoneSlidePieceMovesObj } from '../helper'\n\nexport default class AdventitiousKing extends Piece {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.king = true\n    this.fenChar = 'j'\n    this.setFenChar()\n  }\n\n  validMoves(board, playerColor) {\n    const ownCitadel =\n      playerColor === 'w' ? { row: 1, col: 12 } : { row: 8, col: -1 }\n    if (true) {\n      return this.noneSlidePieceMoves(board)\n    }\n  }\n}\n\nObject.assign(\n  AdventitiousKing.prototype,\n  NoneSlidePieceMovesObj,\n  KingDirectionsObj\n)\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/PlayGame.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/VerifyEmail.js",["264"],"import React, { useState, useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport queryString from 'query-string'\nimport axios from 'axios'\n\nconst EmailVerify = ({ history }) => {\n  const initialState = {\n    default: 'default',\n    verified: 'verified',\n    failed: 'failed',\n  }\n\n  const [emailStatus, setEmailStatus] = useState(initialState.default)\n\n  useEffect(() => {\n    const token = queryString.parse(window.location.search)\n\n    history.replace(window.location.pathname)\n\n    if (!token) {\n      return\n    }\n    const BASE_API_URL = 'http://127.0.0.1:8000'\n\n    axios\n      .post(`${BASE_API_URL}/account/email-verify/`, token)\n      .then((response) => {\n        if (response.status !== 200) {\n          setEmailStatus(initialState.failed)\n          return\n        }\n        setEmailStatus(initialState.verified)\n      })\n  }, [])\n\n  const getBody = () => {\n    if (emailStatus === initialState.verified) {\n      return <div>Mail adresiniz doğrulandı</div>\n    } else if (emailStatus === initialState.failed) {\n      return <div>Hata, mail adresiniz doğrulanmadı</div>\n    }\n  }\n\n  return <div>{getBody()}</div>\n}\n\nexport default withRouter(EmailVerify)\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/Login.js",["265","266","267","268","269","270"],"import React, { useState, useRef } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Card, Button, Form, Container, Alert } from 'react-bootstrap'\nimport { useAuthContext } from '../contexts/AuthContext'\nimport { Link, useHistory } from 'react-router-dom'\nimport CenteredContainer from '../components/CenteredContainer'\n// import { useUserContext } from '../../contexts'\nconst Login = ({onSubmitUser}) => {\n  // const {setCurrentUser} = useUserContext()\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  })\n  const history = useHistory()\n\n  const [error, setError] = useState({\n    isError: null,\n    message: '',\n  })\n  const { login } = useAuthContext()\n\n  const handleChange = (e) => {\n    const { id, value } = e.target\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [id]: value,\n    }))\n  }\n\n  const redirectToLogin = () => {\n    history.push('/login')\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    const { email, password } = formData\n    console.log('formData', formData)\n\n    try {\n      const res = await login(formData)\n      console.log(\"res\", res)\n      onSubmitUser(res)\n      console.log('redirected to home')\n      history.push('/')\n    } catch (err) {}\n  }\n\n  return (\n    <CenteredContainer>\n      <Card className='w-100' style={{ maxWidth: '430px' }}>\n        <Card.Body>\n          <h2 className='text-center mb-4'>Giriş yap</h2>\n          {error.isError && <Alert variant='danger'>{error.message}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id='email'>\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type='email'\n                id='email'\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n            <Form.Group id='password'>\n              <Form.Label>Şifre</Form.Label>\n              <Form.Control\n                type='password'\n                id='password'\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n            <Button className='w-100' type='submit'>\n              Giriş yap\n            </Button>\n          </Form>\n        </Card.Body>\n        <div className='w-100 text-center mt-2'>\n          Hesabınız yok mu? <Link to='/signup'>Kaydol</Link>\n        </div>\n      </Card>\n    </CenteredContainer>\n  )\n}\n\nexport default withRouter(Login)\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/Signup.js",["271","272","273","274"],"import React, { useState, useRef } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport { Card, Button, Form, Container, Alert } from 'react-bootstrap'\nimport { useAuthContext } from '../contexts/AuthContext'\nimport CenteredContainer from '../components/CenteredContainer'\n\nconst Signup = (props) => {\n  const [formData, setFormData] = useState({\n    email: '',\n    username: '',\n    firstname: '',\n    lastname: '',\n    password: '',\n    confirmPassword: '',\n    displayForm: true,\n    loading: false,\n  })\n\n  const [error, setError] = useState({\n    isError: null,\n    message: '',\n  })\n  const { history } = props\n  const { signup } = useAuthContext()\n\n  const handleChange = (e) => {\n    const { id, value } = e.target\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [id]: value,\n    }))\n  }\n\n  const redirectToLogin = () => {\n    history.push('/login')\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    const { email, password, confirmPassword, firstname, lastname, username } = formData\n    console.log('formData', formData)\n    if (password !== confirmPassword) {\n      setError((prevState) => ({\n        ...prevState,\n        isError: true,\n        message: 'Şifreler eşleşmiyor',\n      }))\n      return\n    }\n\n    try {\n      const res = await signup({\n        email,\n        password,\n        firstname,\n        lastname,\n        username,\n      })\n      setFormData((prevState) => ({\n        ...prevState,\n        displayForm: false,\n      }))\n    } catch (err) {}\n  }\n\n  return (\n    <CenteredContainer>\n      {formData.displayForm ? (\n        <Card className='w-100' style={{ maxWidth: '430px' }}>\n          <Card.Body>\n            <h2 className='text-center mb-4'>Kayıt ol</h2>\n            {error.isError && <Alert variant='danger'>{error.message}</Alert>}\n            <Form onSubmit={handleSubmit}>\n              <Form.Group id='firstname'>\n                <Form.Label>Adınız</Form.Label>\n                <Form.Control\n                  type='text'\n                  id='firstname'\n                  onChange={handleChange}\n                  required\n                />\n              </Form.Group>\n              <Form.Group id='lastname'>\n                <Form.Label>Soyadınız</Form.Label>\n                <Form.Control\n                  type='text'\n                  id='lastname'\n                  onChange={handleChange}\n                  required\n                />\n              </Form.Group>\n              <Form.Group id='username'>\n                <Form.Label>Kullanıcı Adı</Form.Label>\n                <Form.Control\n                  type='text'\n                  id='username'\n                  onChange={handleChange}\n                  required\n                />\n              </Form.Group>\n              <Form.Group id='email'>\n                <Form.Label>Email</Form.Label>\n                <Form.Control\n                  type='email'\n                  id='email'\n                  onChange={handleChange}\n                  required\n                />\n              </Form.Group>\n              <Form.Group id='password'>\n                <Form.Label>Şifre</Form.Label>\n                <Form.Control\n                  type='password'\n                  id='password'\n                  onChange={handleChange}\n                  required\n                />\n              </Form.Group>\n              <Form.Group id='confirm-password'>\n                <Form.Label>Şifre Doğrulama</Form.Label>\n                <Form.Control\n                  type='password'\n                  onChange={handleChange}\n                  id='confirmPassword'\n                  required\n                />\n              </Form.Group>\n              <Button\n                className='w-100'\n                type='submit'\n                disabled={formData.loading}\n              >\n                Kayıt ol\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      ) : (\n        <Alert variant='info'>Mail adresinizi doğrulayınız!</Alert>\n      )}\n      <div className='w-100 text-center mt-2'>\n        <Link to='/login'>Giriş Yap</Link>\n      </div>\n    </CenteredContainer>\n  )\n}\n\nexport default withRouter(Signup)\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/PasswordReset.js",["275","276","277","278","279","280","281"],"import React, { useState, useRef } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Card, Button, Form, Container, Alert } from 'react-bootstrap'\nimport { useAuthContext } from '../shared/contexts'\nimport CenteredContainer from '../shared/components/CenteredContainer'\n\nconst Login = (props) => {\n  const [formData, setFormData] = useState({\n    email: '',\n  })\n\n  const [error, setError] = useState({\n    isError: null,\n    message: '',\n  })\n  const { history } = props\n  const { verify } = useAuthContext()\n\n  const handleChange = (e) => {\n    const { id, value } = e.target\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [id]: value,\n    }))\n  }\n\n  const redirectToLogin = () => {\n    history.push('/login')\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    const { email, password } = formData\n    console.log('formData', formData)\n\n    try {\n      const res = await verify(formData)\n    } catch (err) {}\n  }\n\n  return (\n    <CenteredContainer>\n      <Card className='w-100' style={{ maxWidth: '430px' }}>\n        <Card.Body>\n          <h2 className='text-center mb-4'>Şifre sıfırlama</h2>\n          {error.isError && <Alert variant='danger'>{error.message}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id='email'>\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type='email'\n                id='email'\n                onChange={handleChange}\n                required\n              />\n            </Form.Group>\n\n            <Button className='w-100' type='submit'>\n              Şifre sıfırla\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    </CenteredContainer>\n  )\n}\n\nexport default withRouter(Login)\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/home/Home.js",["282","283","284","285"],"import React, { useState } from 'react'\nimport Dialog from '../components/Dialog'\nimport AppBar from '../containers/AppBar'\nimport { ListGroup, Alert } from 'react-bootstrap'\nimport { useHistory } from 'react-router-dom'\nimport { useAuthContext, usePlayersContext } from '../contexts'\nimport SearchIcon from '@material-ui/icons/Search'\nimport { InputBase } from '@material-ui/core'\nimport { useSocket } from '../contexts/SocketContext'\nconst Home = () => {\n  const history = useHistory()\n  const [selectedUser, setSelectedUser] = useState()\n  const socket = useSocket()\n  const { logout } = useAuthContext()\n  const {\n    getUser,\n    playRequest,\n    request,\n    response,\n    PLAY_STATE,\n    users,\n    resetUsers,\n  } = usePlayersContext()\n\n  const isCancelled = response === PLAY_STATE.Cancelled\n\n  const logoutClick = async () => {\n    try {\n      await logout()\n      history.push('/login')\n    } catch {\n      console.log('çıkış yapılamadı')\n    }\n  }\n\n  const searchClick = async (e) => {\n    const value = e.target.value\n    console.log('value', value)\n    if (value) {\n      if (users.length === 0 || users.length > 0) {\n        const res = await getUser(value)\n        console.log('search', res.data)\n        if (res.data.length === 1) {\n          console.log('length 1')\n          setSelectedUser(users[0])\n        }\n      }\n    } else {\n      console.log('reset users')\n      resetUsers(() => [])\n    }\n  }\n\n  const selectUser = async (e) => {\n    // document.getElementById('search-input').value = ''\n    console.log('socket', socket)\n    resetUsers([])\n    const user = JSON.parse(e.target.getAttribute('user'))\n    console.log('user', user)\n    // setSelectedUser(user)\n    const res = await playRequest(user.id)\n  }\n\n  console.log('users', users)\n  return (\n    <>\n      {request && <Dialog requestedPlayer={request} />}\n      {isCancelled && <Alert />}\n      <div>\n        <div>\n          <SearchIcon />\n        </div>\n        <InputBase\n          placeholder='Search…'\n          // classes={{\n          //   root: classes.inputRoot,\n          //   input: classes.inputInput,\n          // }}\n          // inputProps={{ 'aria-label': 'search' }}\n          onChange={searchClick}\n        />\n      </div>\n      {users && (\n        <ListGroup as='ul' onClick={selectUser}>\n          {users.map((user) => {\n            console.log(user)\n            return (\n              <ListGroup.Item\n                as='li'\n                active\n                user={JSON.stringify(user)}\n                key={user.id}\n                style={{ marginTop: '3px' }}\n              >\n                {user.username}\n              </ListGroup.Item>\n            )\n          })}\n        </ListGroup>\n      )}\n    </>\n  )\n}\n\nexport default Home\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/profile/Profile.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/hooks/useLocalStorage.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/TakedPieceList.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/GameTimer.js",["286","287","288","289","290","291","292"],"import React, { useState, useEffect } from 'react'\nimport { usePlayersContext } from '../../../shared/contexts'\nimport { GAME_FINISH } from '../contexts/TamerlaneChessContext/types'\nimport { COLOR } from '../../../tamerlane-chess/types'\nimport { useTamerlaneChessContext } from '../contexts/TamerlaneChessContext'\n\nconst TIMER = {\n  PAUSED: 'PAUSED',\n  TICKING: 'TICKING',\n}\nlet lastOpponentMove\nexport default function GameTimer() {\n  const { currentPlayer, opponentPlayer } = usePlayersContext()\n  const {\n    turn,\n    dispatch,\n    opponentLastMoveAt,\n    history,\n  } = useTamerlaneChessContext()\n\n  const [zamanFarkı, setZamanFarkı] = useState({\n    currentPlayerZaman: [],\n    opponentPlayerZaman: [],\n  })\n\n  const startedTime = new Date().getTime()\n\n  let delay = 0\n\n  if (history.length !== 0 && turn === currentPlayer.side) {\n    lastOpponentMove = history[history.length - 1][opponentPlayer.side]\n  }\n\n  useEffect(() => {\n    console.log('startedTime', startedTime)\n    console.log('opponentLastMoveAt', opponentLastMoveAt)\n    console.log('lastOpponentMove', lastOpponentMove)\n    if (history.length !== 0) {\n      delay = startedTime - opponentLastMoveAt\n    }\n\n    console.log('delay', delay)\n  }, [JSON.stringify(lastOpponentMove)])\n\n  const time = {\n    minutes: 10,\n    seconds: 0,\n  }\n\n  const [currentPlayerLeftTime, setCurrentPlayerLeftTime] = useState({\n    ...time,\n  })\n  const [opponentPlayerLeftTime, setOpponentPlayerLeftTime] = useState({\n    ...time,\n  })\n\n  function tick() {\n    if (turn === currentPlayer.side) {\n      setCurrentPlayerLeftTime((prevState) => ({\n        ...prevState,\n        ...getTimeLeft(currentPlayerLeftTime),\n      }))\n    } else {\n      setOpponentPlayerLeftTime((prevState) => ({\n        ...prevState,\n        ...getTimeLeft(opponentPlayerLeftTime),\n      }))\n    }\n  }\n\n  function pauseTimer(timeoutId) {\n    clearTimeout(timeoutId)\n  }\n\n  useEffect(() => {\n    let timeoutId\n\n    if (\n      currentPlayerLeftTime.minutes === 0 &&\n      currentPlayerLeftTime.seconds === 0\n    ) {\n      dispatch({ type: GAME_FINISH, payload: { winner: opponentPlayer.side } })\n      return\n    }\n\n    timeoutId = setTimeout(tick, 1000 - delay)\n\n    return () => pauseTimer(timeoutId)\n  }, [currentPlayerLeftTime.seconds])\n\n  useEffect(() => {\n    let timeoutId\n\n    if (\n      opponentPlayerLeftTime.minutes === 0 &&\n      opponentPlayerLeftTime.seconds === 0\n    ) {\n      dispatch({\n        type: GAME_FINISH,\n        payload: { winner: currentPlayer.side },\n      })\n      return\n    }\n\n    timeoutId = setTimeout(tick, 1000 + delay)\n\n    return () => pauseTimer(timeoutId)\n  }, [opponentPlayerLeftTime.seconds])\n\n  const getTimeLeft = (playerLeftTime) => {\n    const currentTime = new Date().getTime()\n    const spentTime = currentTime - startedTime\n    let spentMinutes = Math.floor((spentTime % (1000 * 60 * 60)) / (1000 * 60))\n    let spentSeconds = Math.floor((spentTime % (1000 * 60)) / 1000)\n\n    let minutes = playerLeftTime.minutes - spentMinutes\n    let seconds = playerLeftTime.seconds - spentSeconds\n    if (seconds === -1) {\n      seconds = 59\n      minutes -= 1\n    }\n\n    return {\n      minutes,\n      seconds,\n    }\n  }\n\n  return (\n    <>\n      <div>\n        Kalan zamanın: {currentPlayerLeftTime.minutes}:\n        {currentPlayerLeftTime.seconds}\n      </div>\n      <div>\n        Rakibinin kalan zamanı: {opponentPlayerLeftTime.minutes}:\n        {opponentPlayerLeftTime.seconds}\n      </div>\n    </>\n  )\n}\n\nfunction getOpponentLastMove(history, opponentPlayerColor) {\n  if (opponentPlayerColor === COLOR.white) {\n    const lastMove = history[history.length - 1]\n    return lastMove[opponentPlayerColor]\n  } else {\n    const previousLastMove = history[history.length - 2]\n    return previousLastMove[opponentPlayerColor]\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/UserContext/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/SocketContext/index.js",["293"],"import React, { useContext, useEffect, useState } from 'react'\nimport io from 'socket.io-client'\n\nconst SocketContext = React.createContext()\n\nexport const useSocket = () => useContext(SocketContext)\n\nexport function SocketProvider({ children, currentUser }) {\n  const [socket, setSocket] = useState()\n  console.log('localStorage', localStorage)\n  // console.log('currentUser', currentUser)\n  // const {currentUser} = useUserContext()\n  useEffect(() => {\n    const newSocket = io('http://localhost:5000', {\n      query: { id: currentUser?.id },\n    })\n    console.log('socket in socket context', socket)\n    setSocket(newSocket)\n\n    return () => newSocket.close()\n  }, [currentUser?.id])\n\n  return (\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\n  )\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/AuthContext/index.js",["294","295","296"],"import React, { useReducer, createContext, useContext } from 'react'\nimport axios from 'axios'\n\nimport {\n  SIGNUP_SUCCESS,\n  SIGNUP_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  ACTIVATION_SUCCES,\n  ACTIVATION_FAIL,\n  RESET_PASSWORD_SUCCESS,\n  RESET_PASSWORD_FAIL,\n  RESET_PASSWORD_CONFIRM_SUCCESS,\n  RESET_PASSWORD_CONFIRM_FAIL,\n  LOGOUT,\n  AUTHENTICATED_SUCCES,\n  AUTHENTICATED_FAIL,\n  USER_LOADED_SUCCESS,\n  USER_LOADED_FAIL,\n} from './authActions'\nimport authReducer, { initialState } from './authReducer'\nconst REACT_APP_API_URL = process.env.REACT_APP_API_URL\n\nconst AuthContext = createContext()\nexport const useAuthContext = () => useContext(AuthContext)\nexport const AuthProvider = (props) => {\n  const [state, dispatch] = useReducer(authReducer, initialState)\n\n  const login = async (payload) => {\n    try {\n      // dispatch({  stateType: LOGIN_REQUEST })\n      const res = await axios.post(`${REACT_APP_API_URL}/account/login/`, payload)\n      dispatch({\n        stateType: LOGIN_SUCCESS,\n        payload: res.data,\n      })\n      \n      return res.data\n    } catch (error) {\n      dispatch({\n        stateType: LOGIN_FAIL,\n        error,\n      })\n      throw error\n    }\n  }\n\n  const checkAuthenticated = async () => {\n    if (typeof window === 'undefined') {\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n      })\n    }\n    if (!localStorage.getItem('access')) {\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n      })\n      return\n    }\n\n    const payload = { token: localStorage.getItem('access') }\n\n    try {\n      const res = await axios.post(\n        `${REACT_APP_API_URL}/account/jwt/verify/`,\n        payload\n      )\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCES,\n        })\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL,\n        })\n      }\n    } catch (error) {\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n      })\n    }\n  }\n\n\n  const signup = async (payload) => {\n    console.log('sign up payload', payload)\n    try {\n      const res = await axios.post(\n        `${REACT_APP_API_URL}/account/register/`,\n        payload\n      )\n      dispatch({\n        stateType: SIGNUP_SUCCESS,\n        payload: res.data,\n      })\n      return res\n    } catch (err) {\n      dispatch({\n        stateType: SIGNUP_FAIL,\n      })\n      throw err\n    }\n  }\n\n  const verify = async (payload) => {\n    try {\n      const res = await axios.post(\n        `${REACT_APP_API_URL}/account/email-verify/`,\n        payload\n      )\n      dispatch({\n        payload: res.data,\n      })\n    } catch (err) {\n      dispatch({\n        type: ACTIVATION_FAIL,\n      })\n    }\n  }\n\n  const resetPassword = async (payload) => {\n    try {\n      const res = await axios.post(\n        `${REACT_APP_API_URL}/account/password-reset-request/`,\n        payload\n      )\n      dispatch({\n        stateType: RESET_PASSWORD_SUCCESS,\n        payload: res.data,\n      })\n      return res\n    } catch (err) {\n      dispatch({\n        stateType: RESET_PASSWORD_FAIL,\n      })\n      throw err\n    }\n  }\n\n  const resetPasswordConfirm = async (payload) => {\n    try {\n      const res = await axios.post(\n        `${REACT_APP_API_URL}/account/password-reset-confirm/`,\n        payload\n      )\n      dispatch({\n        stateType: RESET_PASSWORD_CONFIRM_SUCCESS,\n        payload: res.data,\n      })\n      return res\n    } catch (error) {\n      dispatch({\n        stateType: RESET_PASSWORD_CONFIRM_FAIL,\n        error,\n      })\n      throw error\n    }\n  }\n  const logout = () => {\n    dispatch({\n      stateType: LOGOUT,\n    })\n  }\n\n  const value = {\n    user: state.user,\n    access: state.access,\n    refresh: state.refresh,\n    isAuthenticated: state.isAuthenticated,\n    signup,\n    verify,\n    login,\n    logout,\n    checkAuthenticated,\n    resetPassword,\n    resetPasswordConfirm,\n  }\n\n  return (\n    <AuthContext.Provider\n      value={value}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  )\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/AuthContext/authActions.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/AuthContext/authReducer.js",["297","298","299","300","301","302","303","304"],"import {\n  SIGNUP_SUCCESS,\n  SIGNUP_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  ACTIVATION_SUCCES,\n  ACTIVATION_FAIL,\n  RESET_PASSWORD_SUCCESS,\n  RESET_PASSWORD_FAIL,\n  RESET_PASSWORD_CONFIRM_SUCCES,\n  RESET_PASSWORD_CONFIRM_FAIL,\n  LOGOUT,\n  AUTHENTICATED_SUCCES,\n  AUTHENTICATED_FAIL,\n  USER_LOADED_SUCCESS,\n  USER_LOADED_FAIL,\n} from './authActions'\n\nexport const initialState = {\n  access: localStorage.getItem('access'),\n  refresh: localStorage.getItem('refresh'),\n  isAuthenticated: localStorage.getItem('currentUser') ? true : false,\n  user: localStorage.getItem('currentUser'),\n}\n\nexport default function authReducer(state = initialState, action) {\n  const { stateType, payload } = action\n  switch (stateType) {\n    case AUTHENTICATED_SUCCES:\n      return {\n        ...state,\n        isAuthenticated: true,\n      }\n    case LOGIN_SUCCESS:\n      console.log(payload)\n      localStorage.setItem('currentUser', payload)\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: payload,\n      }\n    case SIGNUP_SUCCESS:\n      return {\n        ...state,\n        isAuthenticated: false,\n      }\n    case USER_LOADED_FAIL:\n      return {\n        ...state,\n        user: null,\n      }\n    case SIGNUP_FAIL:\n    case LOGIN_FAIL:\n    case LOGOUT:\n      localStorage.clear()\n      console.log('logout')\n      console.log(localStorage)\n      return {\n        ...state,\n        access: null,\n        refresh: null,\n        isAuthenticated: false,\n        user: null,\n      }\n    default:\n      return state\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/PlayersContext/index.js",["305"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/contexts/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/helper/Fen.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/Board.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/GameFinishDialog.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/Square.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/components/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/CenteredContainer.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/Dialog.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/AppBar.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/auth/PasswordResetConfirm.js",["306","307","308"],"import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { useAuthContext } from '../shared/contexts'\n\nconst PasswordResetConfirm = (props) => {\n  const { history, match } = props\n  const { resetPasswordConfirm } = useAuthContext()\n  const [state, setState] = useState({\n    password: '',\n    confirmPassword: '',\n    response: '',\n  })\n\n  const handleChange = (e) => {\n    const { id, value } = e.target\n    setState((prevState) => ({\n      ...prevState,\n      [id]: value,\n    }))\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    const { uidb64, token } = match.params\n    const { password, confirmPassword, response } = state\n    if (password !== confirmPassword) {\n      return\n    }\n\n    const payload = {\n      password: state.password,\n      token: token,\n      uidb64: uidb64,\n    }\n    try {\n      const res = await resetPasswordConfirm(payload)\n    } catch (err) {}\n  }\n  return (\n    <>\n      <form display={state.response ? 'none' : 'block'}>\n        <input\n          type='password'\n          id='password'\n          value={state.password}\n          onChange={(e) => handleChange(e)}\n          placeholder='Yeni şifrenizi giriniz'\n        />\n        <input\n          type='password'\n          id='confirmPassword'\n          value={state.confirmPassword}\n          onChange={(e) => handleChange(e)}\n          placeholder='Yeni şifrenizi tekrar giriniz!'\n        />\n        <button type='submit' onClick={(e) => handleSubmit(e)}>\n          Gönder\n        </button>\n      </form>\n    </>\n  )\n}\n\nexport default withRouter(PasswordResetConfirm)\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/PageNotFound.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/components/PrivateRoute.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/contexts/TamerlaneChessContext/index.js",["309","310","311","312","313","314","315","316"],"import { useEffect, useContext, createContext, useReducer } from 'react'\n\nimport tamerlaneChessReducer, { initialState } from './reducer'\nimport {\n  START_GAME,\n  SET_HIGHLIGHTING,\n  SELECT_PIECE,\n  MOVE,\n  REFRESH_PAGE,\n} from './types'\nimport { useSocket } from '../../../../shared/contexts/SocketContext'\nimport { usePlayersContext } from '../../../../shared/contexts/PlayersContext'\nimport axios from 'axios'\nimport { COLOR } from '../../tamerlane-chess/types'\n\nimport { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles({\n  opponentTakedPieceList: {\n    marginTop: 300,\n  },\n})\n\nexport const useTamerlaneChessContext = () => useContext(TamerlaneChessContext)\nconst TamerlaneChessContext = createContext()\nexport function TamerlaneChessProvider({\n  isGameStarted,\n  setIsGameStarted,\n  children,\n}) {\n  const [state, dispatch] = useReducer(tamerlaneChessReducer, initialState)\n  const socket = useSocket()\n  const { currentPlayer, opponentPlayer } = usePlayersContext()\n  const gameId = localStorage.getItem('gameId')\n  console.log('currentPlayer', currentPlayer)\n  console.log('opponentPlayer', opponentPlayer)\n  console.log('Provider called')\n\n  useEffect(async () => {\n    let type\n    let payload\n    console.log('isGameStarted', isGameStarted)\n    console.log('isGameStarted type', typeof isGameStarted)\n    if (isGameStarted === true) {\n      const res = await axios.get(\n        `${process.env.REACT_APP_API_URL}/play/online/${gameId}`\n      )\n      console.log('refresh page')\n      type = REFRESH_PAGE\n      console.log('res', res)\n      const currentUserId = currentPlayer.id\n      console.log(currentPlayer)\n      const currentPlayerColor =\n        currentUserId === res.data.black_player ? COLOR.black : COLOR.white\n      payload = { currentPlayerColor, fen: res.data.current_fen }\n      console.log('currentPlayerColor', currentPlayerColor)\n      console.log('current user id', currentUserId)\n    } else {\n      type = START_GAME\n      payload = {\n        currentPlayerColor: currentPlayer.side,\n      }\n      console.log('game starting')\n      // setIsGameStarted(true)\n    }\n\n    dispatch({ type, payload })\n  }, [])\n\n  const removeHighlightSquare = () => {\n    const { pieceSquare, history } = state\n  }\n\n  const highlightSquare = (squaresToHighlight) => {\n    const legalMovesSquares = squaresToHighlight.reduce((a, c) => {\n      return {\n        ...a,\n        ...{\n          [c]: {\n            background:\n              'radial-gradient(circle, rgb(125, 226, 1) 20%, transparent 20%)',\n          },\n        },\n      }\n    }, {})\n    const highlightStyles = {\n      ...legalMovesSquares,\n      ...opponentMoveSquareStyles({\n        history: state.history,\n        pieceSquare: state.pieceSquare,\n      }),\n    }\n\n    const payload = {\n      highlightStyles,\n    }\n    dispatch({ type: SET_HIGHLIGHTING, payload })\n  }\n\n  const handleClick = async (square) => {\n    const { tamerlaneChess } = state\n    console.log('from square', state.fromSquare)\n    console.log()\n    console.log('clicked square', square)\n    const piece = tamerlaneChess.getPiece(square)\n    console.log(`clicked piece`)\n    console.log(piece)\n    let turn = tamerlaneChess.getTurn()\n    console.log('turn', turn)\n    if (\n      !(\n        state.fromSquare &&\n        tamerlaneChess.isPiecePromotedPawnOfPawn(state.fromSquare)\n      ) &&\n      piece.color === turn\n    ) {\n      const moves = tamerlaneChess.getMoves(square, turn)\n      console.log('posible move')\n      console.log(moves)\n      if (!moves) return\n      const squaresToHighlight = []\n\n      moves.forEach((move) => {\n        squaresToHighlight.push(move)\n      })\n      const payload = {\n        fromSquare: square,\n      }\n      dispatch({ type: SELECT_PIECE, payload })\n      highlightSquare(squaresToHighlight)\n    }\n    // make move\n    else {\n      removeHighlightSquare()\n      console.log('trying to make move')\n      console.log('state.fromSquare', state.fromSquare)\n      console.log(turn)\n      const move = tamerlaneChess.makeMove(state.fromSquare, square, turn)\n      if (move == null) return\n\n      console.log('move before send', move)\n\n      let white_player\n      let black_player\n      if (currentPlayer.side === COLOR.white) {\n        white_player = currentPlayer.id\n        black_player = opponentPlayer.id\n      } else {\n        white_player = opponentPlayer.id\n        black_player = currentPlayer.id\n      }\n\n      const fen = tamerlaneChess.getCurrentFen()\n      turn = tamerlaneChess.getTurn()\n      const history = tamerlaneChess.getHistory()\n      const currentPlayerTakedPieceList = tamerlaneChess.getCurrentPlayerTakedPieceList()\n      const payload = {\n        fen,\n        turn,\n        history,\n        currentPlayerTakedPieceList,\n        squareStyles: {\n          ...opponentMoveSquareStyles({\n            history,\n            pieceSquare: state.pieceSquare,\n          }),\n        },\n      }\n\n      dispatch({ type: MOVE, payload })\n      socket.emit('send-move', {\n        opponentId: opponentPlayer.id,\n        move: move.moveInOpponentBoard,\n        opponentLastMoveAt: new Date().getTime(),\n      })\n      console.log('currentPlayer', currentPlayer)\n      const currentTime = new Date().getTime()\n      const current_fen = tamerlaneChess.getWhiteAtBottomFen()\n      axios.put(`${process.env.REACT_APP_API_URL}/play/online/${gameId}`, {\n        move: move.savedMove,\n        white_player,\n        black_player,\n        player_color: currentPlayer.side,\n        current_fen,\n      })\n    }\n  }\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-move', makeOpponentMove)\n\n    return () => socket.off('receive-move')\n  }, [socket, makeOpponentMove])\n\n  function makeOpponentMove({ move, opponentLastMoveAt }) {\n    console.log('state in useEffect', state)\n    console.log('move', move)\n    const { tamerlaneChess } = state\n    const madeMove = tamerlaneChess.makeMove(move.from, move.to)\n    const opponentTakedPieceList = tamerlaneChess.getOpponentTakedPieceList()\n    const fen = tamerlaneChess.getCurrentFen()\n    const turn = tamerlaneChess.getTurn()\n    const history = tamerlaneChess.getHistory()\n    console.log('history', history)\n\n    const squareStyles = opponentMoveSquareStyles({\n      history,\n      pieceSquare: state.pieceSquare,\n    })\n    console.log('squareStyles xxxx', squareStyles)\n    const payload = {\n      fen,\n      turn,\n      opponentLastMoveAt,\n      move,\n      history,\n      opponentTakedPieceList,\n      squareStyles,\n    }\n\n    console.log('taked piece', state.opponentTakedPieceList)\n    dispatch({ type: MOVE, payload })\n  }\n\n  const value = {\n    ...state,\n    handleClick,\n    dispatch,\n  }\n  console.log('opponentTakedPieceList', state.opponentTakedPieceList)\n\n  return (\n    <TamerlaneChessContext.Provider value={value}>\n      {children}\n    </TamerlaneChessContext.Provider>\n  )\n}\n\nfunction opponentMoveSquareStyles({ pieceSquare, history }) {\n  const { b, w } = history.length && history[history.length - 1]\n  if (!w) return\n  let sourceSquare\n  let targetSquare\n\n  if (w && b) {\n    sourceSquare = b.from\n    targetSquare = b.to\n  } else {\n    sourceSquare = w.from\n    targetSquare = w.to\n  }\n\n  return {\n    [pieceSquare]: { backgroundColor: 'rgba(255, 255, 0, 0.4)' },\n    ...(history.length && {\n      [sourceSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      },\n      [targetSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      },\n    }),\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/contexts/TamerlaneChessContext/types.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/shared/contexts/TamerlaneChessContext/reducer.js",["317","318","319","320","321"],"import {\n  START_GAME,\n  CLEAR_HIGHLIGHTING,\n  SET_HIGHLIGHTING,\n  MOVE,\n  SELECT_PIECE,\n  GAME_FINISH,\n  REFRESH_PAGE,\n} from './types'\nimport TamerlaneChess from '../../tamerlane-chess'\nimport {\n  validFen,\n  fenToObj,\n  validPositionObject,\n  getPositionObject,\n} from '../../helper/Fen'\nimport { COLOR } from '../../tamerlane-chess/types'\n\nexport const initialState = {\n  fen: 'start',\n  dropSquareStyle: {},\n  squareStyles: {},\n  lightSquareStyle: { backgroundColor: 'rgb(240, 217, 181)' },\n  darkSquareStyle: { backgroundColor: 'rgb(181, 136, 99)' },\n  pieceSquare: '',\n  fromSquare: '',\n  toSquare: '',\n  turn: COLOR.white,\n  opponentLastMoveAt: '',\n  opponentLastMove: '',\n  winner: '',\n  opponentTakedPieceList: '',\n  currentPlayerTakedPieceList: '',\n  selectedPiece: '',\n  history: '',\n  sourceSquare: '',\n  targetSquare: '',\n  sourcePiece: '',\n  waitForTransition: false,\n  phantomPiece: null,\n  wasPieceTouched: false,\n  manualDrop: false,\n  squareClicked: false,\n  firstMove: false,\n}\n\nexport default function tamerlaneChessReducer(state = initialState, action) {\n  const { type, payload } = action\n  let tamerlaneChess, fen, currentPlayerColor\n  switch (type) {\n    case START_GAME:\n      currentPlayerColor = payload.currentPlayerColor\n      console.log('payload', payload)\n      console.log('currentPlayerColor', currentPlayerColor)\n      const currentPosition = getPositionObject('start', currentPlayerColor)\n      tamerlaneChess = new TamerlaneChess(currentPlayerColor)\n      return {\n        ...state,\n        currentPosition,\n        tamerlaneChess,\n      }\n    case MOVE:\n      const { turn, opponentLastMoveAt, opponentLastMove, history } = payload\n      console.log('turn', turn)\n      console.log('history', history)\n\n      return {\n        ...state,\n        currentPosition: getPositionObject(payload.fen),\n        ...payload,\n      }\n    case REFRESH_PAGE:\n      console.log('payload', payload)\n      console.log('payload.fen', payload.fen)\n      console.log('state in refresh', state)\n      tamerlaneChess = new TamerlaneChess(payload.currentPlayerColor, fen)\n      fen = tamerlaneChess.getCurrentFen()\n      console.log('fen', fen)\n      return {\n        ...state,\n        tamerlaneChess,\n        currentPosition: getPositionObject(fen),\n        currentPlayerColor: payload.currentPlayerColor,\n        turn: fen[fen.length - 1],\n      }\n    case CLEAR_HIGHLIGHTING:\n      return {\n        ...state,\n      }\n    case SET_HIGHLIGHTING:\n      return {\n        ...state,\n        squareStyles: payload.highlightStyles,\n      }\n    case SELECT_PIECE:\n      return {\n        ...state,\n        fromSquare: payload.fromSquare,\n      }\n    case GAME_FINISH:\n      console.log('GAME FINISHED', payload)\n      state.tamerlaneChess.finish()\n      return {\n        ...state,\n        winner: payload.winner,\n      }\n    default:\n      return state\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/shared/hoc/withProvider.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/game/GameAnalyze.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/profile/shared/components/GameCardContainer.js",["322"],"import React from 'react'\nimport GameCard from './GameCard'\nimport { useProfileContext } from '../contexts/ProfileContext'\n\nexport default function GameCardContainer() {\n  const { games } = useProfileContext()\n\n  return (\n    <>\n      profile page\n      {games?.map((game) => {\n        return <GameCard game={game} />\n      })}\n    </>\n  )\n}\n\n\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/profile/shared/contexts/ProfileContext/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/profile/shared/components/GameCard.js",["323"],"import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Card } from 'react-bootstrap'\nimport { useAuthContext } from '../../../shared/contexts'\nimport { useProfileContext } from '../contexts/ProfileContext'\n\nexport default function GameCard({ game }) {\n  const { getGameById } = useProfileContext()\n  const history = useHistory()\n  const { user } = useAuthContext()\n  const handleClick = async () => {\n    const res = await getGameById(game.id)\n    history.push(`/${user.username}/games/${game.id}`)\n  }\n  return (\n    <Card style={{ width: '18rem' }}>\n      <Card.Body>\n        <Card.Text>{game.opponent}</Card.Text>\n        <Card.Link href='#' onClick={handleClick}>\n          İncele\n        </Card.Link>\n        <Card.Text className='mb-2 text-muted'>{game.playedAt}</Card.Text>\n      </Card.Body>\n    </Card>\n  )\n}\n",{"ruleId":"324","replacedBy":"325"},{"ruleId":"326","replacedBy":"327"},{"ruleId":"328","severity":1,"message":"329","line":28,"column":25,"nodeType":"330","messageId":"331","endLine":28,"endColumn":41},{"ruleId":"328","severity":1,"message":"332","line":1,"column":10,"nodeType":"330","messageId":"331","endLine":1,"endColumn":33},{"ruleId":"328","severity":1,"message":"333","line":26,"column":10,"nodeType":"330","messageId":"331","endLine":26,"endColumn":18},{"ruleId":"328","severity":1,"message":"334","line":135,"column":18,"nodeType":"330","messageId":"331","endLine":135,"endColumn":21},{"ruleId":"328","severity":1,"message":"335","line":135,"column":30,"nodeType":"330","messageId":"331","endLine":135,"endColumn":45},{"ruleId":"328","severity":1,"message":"336","line":353,"column":11,"nodeType":"330","messageId":"331","endLine":353,"endColumn":16},{"ruleId":"328","severity":1,"message":"337","line":587,"column":11,"nodeType":"330","messageId":"331","endLine":587,"endColumn":30},{"ruleId":"328","severity":1,"message":"338","line":807,"column":9,"nodeType":"330","messageId":"331","endLine":807,"endColumn":12},{"ruleId":"328","severity":1,"message":"336","line":24,"column":11,"nodeType":"330","messageId":"331","endLine":24,"endColumn":16},{"ruleId":"339","severity":1,"message":"340","line":86,"column":5,"nodeType":"341","messageId":"342","endLine":99,"endColumn":6},{"ruleId":"328","severity":1,"message":"343","line":104,"column":14,"nodeType":"330","messageId":"331","endLine":104,"endColumn":17},{"ruleId":"328","severity":1,"message":"344","line":14,"column":11,"nodeType":"330","messageId":"331","endLine":14,"endColumn":21},{"ruleId":"345","severity":1,"message":"346","line":34,"column":6,"nodeType":"347","endLine":34,"endColumn":8,"suggestions":"348"},{"ruleId":"328","severity":1,"message":"349","line":1,"column":27,"nodeType":"330","messageId":"331","endLine":1,"endColumn":33},{"ruleId":"328","severity":1,"message":"350","line":3,"column":30,"nodeType":"330","messageId":"331","endLine":3,"endColumn":39},{"ruleId":"328","severity":1,"message":"351","line":16,"column":17,"nodeType":"330","messageId":"331","endLine":16,"endColumn":25},{"ruleId":"328","severity":1,"message":"352","line":30,"column":9,"nodeType":"330","messageId":"331","endLine":30,"endColumn":24},{"ruleId":"328","severity":1,"message":"353","line":36,"column":13,"nodeType":"330","messageId":"331","endLine":36,"endColumn":18},{"ruleId":"328","severity":1,"message":"354","line":36,"column":20,"nodeType":"330","messageId":"331","endLine":36,"endColumn":28},{"ruleId":"328","severity":1,"message":"349","line":1,"column":27,"nodeType":"330","messageId":"331","endLine":1,"endColumn":33},{"ruleId":"328","severity":1,"message":"350","line":3,"column":30,"nodeType":"330","messageId":"331","endLine":3,"endColumn":39},{"ruleId":"328","severity":1,"message":"352","line":34,"column":9,"nodeType":"330","messageId":"331","endLine":34,"endColumn":24},{"ruleId":"328","severity":1,"message":"355","line":52,"column":13,"nodeType":"330","messageId":"331","endLine":52,"endColumn":16},{"ruleId":"328","severity":1,"message":"349","line":1,"column":27,"nodeType":"330","messageId":"331","endLine":1,"endColumn":33},{"ruleId":"328","severity":1,"message":"350","line":3,"column":30,"nodeType":"330","messageId":"331","endLine":3,"endColumn":39},{"ruleId":"328","severity":1,"message":"351","line":12,"column":17,"nodeType":"330","messageId":"331","endLine":12,"endColumn":25},{"ruleId":"328","severity":1,"message":"352","line":27,"column":9,"nodeType":"330","messageId":"331","endLine":27,"endColumn":24},{"ruleId":"328","severity":1,"message":"353","line":33,"column":13,"nodeType":"330","messageId":"331","endLine":33,"endColumn":18},{"ruleId":"328","severity":1,"message":"354","line":33,"column":20,"nodeType":"330","messageId":"331","endLine":33,"endColumn":28},{"ruleId":"328","severity":1,"message":"355","line":37,"column":13,"nodeType":"330","messageId":"331","endLine":37,"endColumn":16},{"ruleId":"328","severity":1,"message":"356","line":3,"column":8,"nodeType":"330","messageId":"331","endLine":3,"endColumn":14},{"ruleId":"328","severity":1,"message":"357","line":12,"column":10,"nodeType":"330","messageId":"331","endLine":12,"endColumn":22},{"ruleId":"328","severity":1,"message":"358","line":27,"column":9,"nodeType":"330","messageId":"331","endLine":27,"endColumn":20},{"ruleId":"328","severity":1,"message":"355","line":61,"column":11,"nodeType":"330","messageId":"331","endLine":61,"endColumn":14},{"ruleId":"328","severity":1,"message":"359","line":7,"column":7,"nodeType":"330","messageId":"331","endLine":7,"endColumn":12},{"ruleId":"328","severity":1,"message":"360","line":21,"column":10,"nodeType":"330","messageId":"331","endLine":21,"endColumn":20},{"ruleId":"328","severity":1,"message":"361","line":21,"column":22,"nodeType":"330","messageId":"331","endLine":21,"endColumn":35},{"ruleId":"345","severity":1,"message":"362","line":39,"column":15,"nodeType":"363","endLine":39,"endColumn":47},{"ruleId":"345","severity":1,"message":"364","line":89,"column":6,"nodeType":"347","endLine":89,"endColumn":37,"suggestions":"365"},{"ruleId":"345","severity":1,"message":"366","line":108,"column":6,"nodeType":"347","endLine":108,"endColumn":38,"suggestions":"367"},{"ruleId":"328","severity":1,"message":"368","line":143,"column":10,"nodeType":"330","messageId":"331","endLine":143,"endColumn":29},{"ruleId":"345","severity":1,"message":"369","line":21,"column":6,"nodeType":"347","endLine":21,"endColumn":23,"suggestions":"370"},{"ruleId":"328","severity":1,"message":"371","line":9,"column":3,"nodeType":"330","messageId":"331","endLine":9,"endColumn":20},{"ruleId":"328","severity":1,"message":"372","line":18,"column":3,"nodeType":"330","messageId":"331","endLine":18,"endColumn":22},{"ruleId":"328","severity":1,"message":"373","line":19,"column":3,"nodeType":"330","messageId":"331","endLine":19,"endColumn":19},{"ruleId":"328","severity":1,"message":"371","line":6,"column":3,"nodeType":"330","messageId":"331","endLine":6,"endColumn":20},{"ruleId":"328","severity":1,"message":"374","line":7,"column":3,"nodeType":"330","messageId":"331","endLine":7,"endColumn":18},{"ruleId":"328","severity":1,"message":"375","line":8,"column":3,"nodeType":"330","messageId":"331","endLine":8,"endColumn":25},{"ruleId":"328","severity":1,"message":"376","line":9,"column":3,"nodeType":"330","messageId":"331","endLine":9,"endColumn":22},{"ruleId":"328","severity":1,"message":"377","line":10,"column":3,"nodeType":"330","messageId":"331","endLine":10,"endColumn":32},{"ruleId":"328","severity":1,"message":"378","line":11,"column":3,"nodeType":"330","messageId":"331","endLine":11,"endColumn":30},{"ruleId":"328","severity":1,"message":"379","line":14,"column":3,"nodeType":"330","messageId":"331","endLine":14,"endColumn":21},{"ruleId":"328","severity":1,"message":"372","line":15,"column":3,"nodeType":"330","messageId":"331","endLine":15,"endColumn":22},{"ruleId":"345","severity":1,"message":"380","line":166,"column":6,"nodeType":"347","endLine":166,"endColumn":14,"suggestions":"381"},{"ruleId":"328","severity":1,"message":"382","line":7,"column":11,"nodeType":"330","messageId":"331","endLine":7,"endColumn":18},{"ruleId":"328","severity":1,"message":"383","line":26,"column":40,"nodeType":"330","messageId":"331","endLine":26,"endColumn":48},{"ruleId":"328","severity":1,"message":"355","line":37,"column":13,"nodeType":"330","messageId":"331","endLine":37,"endColumn":16},{"ruleId":"328","severity":1,"message":"384","line":18,"column":7,"nodeType":"330","messageId":"331","endLine":18,"endColumn":16},{"ruleId":"345","severity":1,"message":"385","line":39,"column":13,"nodeType":"386","endLine":68,"endColumn":4},{"ruleId":"345","severity":1,"message":"387","line":68,"column":6,"nodeType":"347","endLine":68,"endColumn":8,"suggestions":"388"},{"ruleId":"328","severity":1,"message":"389","line":71,"column":13,"nodeType":"330","messageId":"331","endLine":71,"endColumn":24},{"ruleId":"328","severity":1,"message":"382","line":71,"column":26,"nodeType":"330","messageId":"331","endLine":71,"endColumn":33},{"ruleId":"328","severity":1,"message":"390","line":177,"column":13,"nodeType":"330","messageId":"331","endLine":177,"endColumn":24},{"ruleId":"345","severity":1,"message":"391","line":197,"column":3,"nodeType":"392","endLine":225,"endColumn":4},{"ruleId":"328","severity":1,"message":"393","line":201,"column":11,"nodeType":"330","messageId":"331","endLine":201,"endColumn":19},{"ruleId":"328","severity":1,"message":"394","line":12,"column":3,"nodeType":"330","messageId":"331","endLine":12,"endColumn":11},{"ruleId":"328","severity":1,"message":"395","line":13,"column":3,"nodeType":"330","messageId":"331","endLine":13,"endColumn":11},{"ruleId":"328","severity":1,"message":"396","line":14,"column":3,"nodeType":"330","messageId":"331","endLine":14,"endColumn":22},{"ruleId":"328","severity":1,"message":"397","line":63,"column":21,"nodeType":"330","messageId":"331","endLine":63,"endColumn":39},{"ruleId":"328","severity":1,"message":"398","line":63,"column":41,"nodeType":"330","messageId":"331","endLine":63,"endColumn":57},{"ruleId":"328","severity":1,"message":"399","line":3,"column":29,"nodeType":"330","messageId":"331","endLine":3,"endColumn":44},{"ruleId":"328","severity":1,"message":"355","line":12,"column":11,"nodeType":"330","messageId":"331","endLine":12,"endColumn":14},"no-native-reassign",["400"],"no-negated-in-lhs",["401"],"no-unused-vars","'setIsGameStarted' is assigned a value but never used.","Identifier","unusedVar","'includeInTwoDimensArray' is defined but never used.","'FEN_TYPE' is defined but never used.","'col' is assigned a value but never used.","'promotedToPiece' is assigned a value but never used.","'piece' is assigned a value but never used.","'moveInOpponentBoard' is assigned a value but never used.","'fen' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'col' is defined but never used.","'ownCitadel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'initialState.failed', and 'initialState.verified'. Either include them or remove the dependency array.","ArrayExpression",["402"],"'useRef' is defined but never used.","'Container' is defined but never used.","'setError' is assigned a value but never used.","'redirectToLogin' is assigned a value but never used.","'email' is assigned a value but never used.","'password' is assigned a value but never used.","'res' is assigned a value but never used.","'AppBar' is defined but never used.","'selectedUser' is assigned a value but never used.","'logoutClick' is assigned a value but never used.","'TIMER' is assigned a value but never used.","'zamanFarkı' is assigned a value but never used.","'setZamanFarkı' is assigned a value but never used.","Assignments to the 'delay' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","BinaryExpression","React Hook useEffect has missing dependencies: 'currentPlayerLeftTime.minutes', 'delay', 'dispatch', 'opponentPlayer.side', and 'tick'. Either include them or remove the dependency array.",["403"],"React Hook useEffect has missing dependencies: 'currentPlayer.side', 'delay', 'dispatch', 'opponentPlayerLeftTime.minutes', and 'tick'. Either include them or remove the dependency array.",["404"],"'getOpponentLastMove' is defined but never used.","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["405"],"'ACTIVATION_SUCCES' is defined but never used.","'USER_LOADED_SUCCESS' is defined but never used.","'USER_LOADED_FAIL' is defined but never used.","'ACTIVATION_FAIL' is defined but never used.","'RESET_PASSWORD_SUCCESS' is defined but never used.","'RESET_PASSWORD_FAIL' is defined but never used.","'RESET_PASSWORD_CONFIRM_SUCCES' is defined but never used.","'RESET_PASSWORD_CONFIRM_FAIL' is defined but never used.","'AUTHENTICATED_FAIL' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["406"],"'history' is assigned a value but never used.","'response' is assigned a value but never used.","'useStyles' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'currentPlayer', 'gameId', and 'isGameStarted'. Either include them or remove the dependency array.",["407"],"'pieceSquare' is assigned a value but never used.","'currentTime' is assigned a value but never used.","The 'makeOpponentMove' function makes the dependencies of useEffect Hook (at line 195) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'makeOpponentMove' in its own useCallback() Hook.","FunctionDeclaration","'madeMove' is assigned a value but never used.","'validFen' is defined but never used.","'fenToObj' is defined but never used.","'validPositionObject' is defined but never used.","'opponentLastMoveAt' is assigned a value but never used.","'opponentLastMove' is assigned a value but never used.","'ProfileProvider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},"Update the dependencies array to be: [history, initialState.failed, initialState.verified]",{"range":"420","text":"421"},"Update the dependencies array to be: [currentPlayerLeftTime.minutes, currentPlayerLeftTime.seconds, delay, dispatch, opponentPlayer.side, tick]",{"range":"422","text":"423"},"Update the dependencies array to be: [currentPlayer.side, delay, dispatch, opponentPlayerLeftTime.minutes, opponentPlayerLeftTime.seconds, tick]",{"range":"424","text":"425"},"Update the dependencies array to be: [currentUser?.id, socket]",{"range":"426","text":"427"},"Update the dependencies array to be: [history, socket]",{"range":"428","text":"429"},"Update the dependencies array to be: [currentPlayer, gameId, isGameStarted]",{"range":"430","text":"431"},[861,863],"[history, initialState.failed, initialState.verified]",[2230,2261],"[currentPlayerLeftTime.minutes, currentPlayerLeftTime.seconds, delay, dispatch, opponentPlayer.side, tick]",[2623,2655],"[currentPlayer.side, delay, dispatch, opponentPlayerLeftTime.minutes, opponentPlayerLeftTime.seconds, tick]",[670,687],"[currentUser?.id, socket]",[4783,4791],"[history, socket]",[2152,2154],"[currentPlayer, gameId, isGameStarted]"]