[{"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js":"1","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js":"2","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js":"3","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js":"4","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js":"5","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js":"6","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js":"7","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js":"8","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js":"9","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js":"10","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js":"11","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js":"12","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js":"13","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js":"14","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js":"15","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js":"16","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js":"17","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js":"18","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js":"19","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js":"20","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js":"21","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js":"22","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js":"23","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js":"24","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessReducers.js":"25","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessActionTypes.js":"26","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/helper/Fen.js":"27","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/AdventitiousKing.js":"28","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Prince.js":"29"},{"size":500,"mtime":1610695920352,"results":"30","hashOfConfig":"31"},{"size":203,"mtime":1610971058234,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1610695920352,"results":"33","hashOfConfig":"31"},{"size":3500,"mtime":1611829950918,"results":"34","hashOfConfig":"31"},{"size":1008,"mtime":1611854108402,"results":"35","hashOfConfig":"31"},{"size":1474,"mtime":1611394900621,"results":"36","hashOfConfig":"31"},{"size":158,"mtime":1611136956381,"results":"37","hashOfConfig":"31"},{"size":21771,"mtime":1612026942462,"results":"38","hashOfConfig":"31"},{"size":763,"mtime":1611134382815,"results":"39","hashOfConfig":"31"},{"size":2314,"mtime":1611850705794,"results":"40","hashOfConfig":"31"},{"size":495,"mtime":1611910585521,"results":"41","hashOfConfig":"31"},{"size":1303,"mtime":1611910581447,"results":"42","hashOfConfig":"31"},{"size":364,"mtime":1611910576067,"results":"43","hashOfConfig":"31"},{"size":361,"mtime":1611910601859,"results":"44","hashOfConfig":"31"},{"size":489,"mtime":1611910619933,"results":"45","hashOfConfig":"31"},{"size":364,"mtime":1611910690018,"results":"46","hashOfConfig":"31"},{"size":366,"mtime":1611910696233,"results":"47","hashOfConfig":"31"},{"size":631,"mtime":1611910606604,"results":"48","hashOfConfig":"31"},{"size":1077,"mtime":1611910686384,"results":"49","hashOfConfig":"31"},{"size":7042,"mtime":1611910677807,"results":"50","hashOfConfig":"31"},{"size":584,"mtime":1611604801993,"results":"51","hashOfConfig":"31"},{"size":1239,"mtime":1611916568858,"results":"52","hashOfConfig":"31"},{"size":156,"mtime":1610813905318,"results":"53","hashOfConfig":"31"},{"size":668,"mtime":1611910612813,"results":"54","hashOfConfig":"31"},{"size":1537,"mtime":1611916428125,"results":"55","hashOfConfig":"31"},{"size":217,"mtime":1611395259331,"results":"56","hashOfConfig":"31"},{"size":4868,"mtime":1611916374591,"results":"57","hashOfConfig":"31"},{"size":580,"mtime":1611910593793,"results":"58","hashOfConfig":"31"},{"size":476,"mtime":1611910682497,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"qgqcp2",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js",[],["127","128"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js",["129","130","131"],"import { useEffect, useContext, createContext, useReducer } from 'react'\n\nimport Board from './Board'\nimport tamerlaneChessReducer, {\n  initialState,\n} from '../reducers/tamerlaneChessReducers'\nimport {\n  START_GAME,\n  SET_HIGHLIGHTING,\n  SELECT_PIECE,\n  MOVE,\n} from '../reducers/tamerlaneChessActionTypes'\n\nexport const useTamerlaneChessContext = () => useContext(TamerlaneChessContext)\nconst TamerlaneChessContext = createContext()\nexport default function TamerlaneChessBoard() {\n  const [state, dispatch] = useReducer(tamerlaneChessReducer, initialState)\n  console.log('Provider called')\n  useEffect(() => {\n    dispatch({ type: START_GAME })\n  }, [])\n\n  const removeHighlightSquare = () => {\n    const { pieceSquare, history } = state\n    // setState((prevState) => ({\n    //   ...prevState,\n    //   fromSquare: '',\n    //   squareStyles: squareStyling({ pieceSquare, history }),\n    // }))\n  }\n  const highlightSquare = (squaresToHighlight) => {\n    const highlightStyles = squaresToHighlight.reduce((a, c) => {\n      return {\n        ...a,\n        ...{\n          [c]: {\n            background:\n              'radial-gradient(circle, rgb(125, 226, 1) 36%, transparent 40%)',\n            borderRadius: '50%',\n          },\n        },\n        ...squareStyling({\n          history: state.history,\n          pieceSquare: state.pieceSquare,\n        }),\n      }\n    }, {})\n    const payload = {\n      highlightStyles,\n    }\n    dispatch({ type: SET_HIGHLIGHTING, payload })\n  }\n\n  const handleClick = (square) => {\n    const { tamerlaneChess } = state\n    console.log('from square', state.fromSquare)\n    console.log('clicked square', square)\n    const piece = tamerlaneChess.getPiece(square)\n    console.log(`clicked piece`)\n    console.log(piece)\n    const turn = tamerlaneChess.getTurn()\n\n    // highlight possible moves\n    if (\n      !(\n        state.fromSquare &&\n        tamerlaneChess.isPiecePromotedPawnOfPawn(state.fromSquare)\n      ) &&\n      piece.color === turn\n    ) {\n      const moves = tamerlaneChess.getMoves(square, turn)\n      console.log('posible move')\n      console.log(moves)\n      if (!moves) return\n      const squaresToHighlight = []\n\n      moves.forEach((move) => {\n        squaresToHighlight.push(move)\n      })\n      const payload = {\n        fromSquare: square,\n      }\n      dispatch({ type: SELECT_PIECE, payload })\n      highlightSquare(squaresToHighlight)\n    }\n    // make move\n    else {\n      removeHighlightSquare()\n      console.log('trying to make move')\n      console.log(turn)\n      const move = tamerlaneChess.makeMove(state.fromSquare, square, turn)\n      if (move === null) return\n      const fen = tamerlaneChess.getCurrentFen()\n      const payload = { fen }\n      \n      dispatch({ type: MOVE, payload })\n    }\n  }\n\n  const setPosition = ({ sourceSquare, targetSquare, piece }) => {}\n\n  const value = {\n    ...state,\n    handleClick,\n  }\n  return (\n    <TamerlaneChessContext.Provider value={value}>\n      <Board></Board>\n    </TamerlaneChessContext.Provider>\n  )\n}\n\nfunction squareStyling({ pieceSquare, history }) {\n  const sourceSquare = history.length && history[history.length - 1].from\n  const targetSquare = history.length && history[history.length - 1].to\n\n  return {\n    [pieceSquare]: { backgroundColor: 'rgba(255, 255, 0, 0.4)' },\n    ...(history.length && {\n      [sourceSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      },\n      [targetSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      },\n    }),\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js",["132","133","134","135","136"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport './board.css'\r\nimport Square from './Square'\r\nimport Piece from './Piece'\r\nimport { COLUMNS } from '../helper/Fen'\r\nimport { useTamerlaneChessContext } from './index'\r\n// import TamerlaneChess from '../tamerlane-chess'\r\nconst Board = () => {\r\n\r\n  let squareColor = 'black'\r\n  return (\r\n    <div id='GameBoard'>\r\n      {[...Array(10)].map((_, r) => {\r\n        return [...Array(11)].map((_, c) => {\r\n          const row = 10 - r\r\n          const square = `${COLUMNS[c]}${row}`\r\n          squareColor = squareColor === 'black' ? 'white' : 'black'\r\n          return (\r\n            <Square\r\n              key={square}\r\n              square={square}\r\n              squareColor={squareColor}\r\n              row={row}\r\n              col={c + 1}\r\n            ></Square>\r\n          )\r\n        })\r\n      })}\r\n      {/* <Square key='x' square={'x'}></Square>\r\n      <Square key='y' square={'y'}></Square> */}\r\n    </div>\r\n  )\r\n}\r\nexport default Board\r\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js",["137"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Piece from './Piece'\nimport { useTamerlaneChessContext } from './index'\n\nconst Square = ({ square, squareColor, row, col }) => {\n  const {\n    darkSquareStyle,\n    lightSquareStyle,\n    currentPosition,\n    handleClick,\n    squareStyles,\n  } = useTamerlaneChessContext()\n\n  const hasPiece = (currentPosition, square) => {\n    const keys = Object.keys(currentPosition)\n    return currentPosition && keys && keys.includes(square)\n  }\n  const getPieceName = (square) => {\n    return currentPosition[square]\n  }\n\n  const squareStyle = () => {\n    return {\n      ...(squareColor === 'black' ? darkSquareStyle : lightSquareStyle),\n    }\n  }\n\n  return (\n    <div\n      style={squareStyle()}\n      id={square}\n      onClick={() => handleClick(square)}\n      className={`file${col} rank${row}`}\n    > \n      <div style={{ ...squareStyles[square], ...size() }}>\n        {hasPiece(currentPosition, square) && (\n          <Piece pieceName={getPieceName(square)}></Piece>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst size = () => ({\n  height: 50,\n  width: 50,\n})\n\n// Square.PropTypes = {\n//   width: PropTypes.func,\n//   squareColor: PropTypes.oneOf(['white', 'black']),\n//   children: PropTypes.oneOfType([PropTypes.array, PropTypes.node]),\n//   square: PropTypes.string,\n//   lightSquareStyle: PropTypes.object,\n//   darkSquareStyle: PropTypes.object,\n//   roughSquare: PropTypes.func,\n// }\n\nexport default Square\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js",["138","139","140","141","142"],"import { includeInTwoDimensArray, replaceAt } from './helper'\nimport { expandFenEmptySquares } from '../helper/Fen'\nimport {\n  King,\n  Camel,\n  Catapult,\n  Elephant,\n  General,\n  Giraffe,\n  Knight,\n  Vizier,\n  WarEngine,\n  Rook,\n  PawnOfPawn,\n  CamelPawn,\n  CatapultPawn,\n  ElephantPawn,\n  GeneralPawn,\n  GiraffePawn,\n  KnightPawn,\n  VizierPawn,\n  WarEnginePawn,\n  RookPawn,\n  KingPawn,\n} from './Pieces'\nimport { FEN_TYPE, COLOR } from './types'\nimport { positionChecker, getMoveList } from './helper'\nconst COLUMNS = 'abcdefghijk'.split('')\n\nexport default class TamerlaneChess {\n  static #rowCount = 10\n  static #lastRowIndex = 9\n  static #firstRowIndex = 0\n  static #colCount = 11\n  static #blackColor = 'b'\n  static #whiteColor = 'w'\n  #board = Array.from(Array(10), () => new Array(11))\n  #opponentBoard = Array.from(Array(10), () => new Array(11))\n  #player = 'player'\n  #opponetPlayer = 'opponent'\n  #turn = TamerlaneChess.#whiteColor\n  #time1 = 900\n  #time2 = 900\n  #storedTime1 = 0\n  #storedTime2 = 0\n  #winner = null\n  #last = null\n  #copy = true\n  #ready = false\n  #whiteKingCount = 1\n  #blackKingCount = 1\n\n  #playerColor\n  #opponentPlayerColor\n  #whiteKings = []\n  #blackKings = []\n  static #blackCitadel = 'y'\n  static #whiteCitadel = 'x'\n  #lastTakedPiece = null\n  #fen\n  #opponentFen\n  #whitePieces\n  #blackPieces\n\n  constructor(playerColor, fen = null) {\n    this.#playerColor = playerColor\n\n    this.#opponentPlayerColor =\n      this.#playerColor === TamerlaneChess.#blackColor\n        ? TamerlaneChess.#blackColor\n        : TamerlaneChess.#whiteColor\n\n    for (let row = 0; row < 10; row++) {\n      for (let col = 0; col < 11; col++) {\n        this.setPieceToBoard({ row, col }, 0)\n        this.#opponentBoard[row][col] = 0\n      }\n    }\n\n    //Beyaz taşlar ekranda aşağıda ise\n    //  'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBYQEHTNR/KAMZGSVZMAK/F1D1I1I1D1F*2 w'\n    let defaultWhitePiecesAtBottomFen =\n      'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBEQYHTNR/KAMZGSVZMAK/F1D1I1I1D1F* w'\n    //Siyah taşlar ekranda aşağıda ise\n    let defaultBlackPiecesAtBottomFen =\n      'F1D1I1I1D1F/KAMZVSGZMAK/PXCBYQEHTNR/92/92/92/92/pxcbyqehtnr/kamzgsvzmak/f1d1i1i1d1f* w'\n\n    if (fen === null) {\n      this.#fen =\n        this.#playerColor === TamerlaneChess.#whiteColor\n          ? defaultWhitePiecesAtBottomFen\n          : defaultBlackPiecesAtBottomFen\n    }\n    this.#fen = expandFenEmptySquares(this.#fen)\n    this.parseFen(FEN_TYPE.player)\n    // this.parseFen(FEN_TYPE.opponent)\n    this.#whitePieces = this.getActivePiece(COLOR.white)\n    this.#blackPieces = this.getActivePiece(COLOR.black)\n    // this.printBoard()\n  }\n\n  getActivePiece(color) {\n    const pieceList = []\n    let row, col\n    for (row = 0; row < TamerlaneChess.#rowCount; row++) {\n      for (col = 0; col < TamerlaneChess.#colCount; col++) {\n        const piece = this.getPiece({ row, col })\n        if (piece.color === color) {\n          pieceList.push(piece)\n        }\n      }\n    }\n\n    return pieceList\n  }\n\n  getPiece(position) {\n    if (typeof position === 'string') {\n      const { row, col } = this.squareToPosition(position)\n      return this.#board[row][col]\n    } else if (typeof position === 'object') {\n      const { row, col } = position\n\n      if (position.hasOwnProperty('row') && position.hasOwnProperty('col')) {\n        return this.#board[row][col]\n      } else {\n        throw Error('Position object must have row and col properties')\n      }\n    } else {\n      throw Error('Position type must be string or object')\n    }\n  }\n\n  setPieceToBoard({ row, col }, piece) {\n    this.#board[row][col] = piece\n  }\n\n  isPromoted(piece) {\n    if (!piece.pawn) return false\n    const { row, col, color, promotedToPiece } = piece\n    const conditionRow =\n      this.#playerColor === color\n        ? TamerlaneChess.#lastRowIndex\n        : TamerlaneChess.#firstRowIndex\n    console.log('condition row', conditionRow)\n    console.log('piece row', row)\n    if (conditionRow === row + 1) {\n      return true\n    }\n    return false\n  }\n\n  makePromotion(piece) {\n    if (!piece.pawn) return\n    const { row, col, color, promotedToPiece } = piece\n    const conditionRow =\n      this.#playerColor === color\n        ? TamerlaneChess.#lastRowIndex\n        : TamerlaneChess.#firstRowIndex\n    console.log('condition row', conditionRow)\n    if (\n      conditionRow !== row ||\n      (piece.constructor.name === 'PawnOfPawn' && piece.promotedCount === 3)\n    ) {\n      return\n    }\n\n    //opponent board will be set\n    console.log('piece.promotedCount ', piece.promotedCount)\n    if (piece.constructor.name === 'PawnOfPawn') {\n      piece.promotedCount += 1\n      if (piece.promotedCount === 3) {\n        const adventitiousKing = new promotedToPiece(row, col, color)\n        this.setPieceToBoard({ row, col }, adventitiousKing)\n        this.updateFenToPromotedPiece({ row, col }, adventitiousKing.fenChar)\n      }\n    } else {\n      const piece = new promotedToPiece(row, col, color)\n      this.setPieceToBoard({ row, col }, piece)\n      this.updateFenToPromotedPiece({ row, col }, piece.fenChar)\n    }\n\n    console.log('piece.promotedCount ', piece.promotedCount)\n    // this.printBoard()\n  }\n\n  isPiecePromotedPawnOfPawn(fromSquare) {\n    const piece = this.getPiece(fromSquare)\n    if (\n      piece !== 0 &&\n      piece.constructor.name === 'PawnOfPawn' &&\n      piece.promotedCount > 0\n    ) {\n      return true\n    }\n    return false\n  }\n\n  getMoves(square, movingPlayerColor) {\n    const { row, col } = this.squareToPosition(square)\n    if (!this.isMovingPlayerInTurn(row, col)) return null\n    console.log(`row:${row}, col:${col}`)\n    const piece = this.getPiece({ row, col })\n    // this.printBoard()\n    console.log('piece', piece)\n    let moveList\n    console.log(moveList)\n    let squareList\n    if (this.isChecked(piece.color)) {\n      console.log('checked, getting safe moves')\n      moveList = this.getSafeMoves(piece, movingPlayerColor)\n    } else {\n      moveList = getMoveList(this.#board, piece, this.#playerColor)\n    }\n\n    squareList = moveList.map((move) => {\n      return this.positionToSquare(move.row, move.col)\n    })\n\n    return squareList\n  }\n\n  getPlayerPieces(color) {\n    return color === COLOR.white ? this.#whitePieces : this.#blackPieces\n  }\n\n  getSafeMoves(piece, movingPlayerColor) {\n    let fakeTakedPiece\n    const safeMoves = []\n    const opponentPlayerColor =\n      piece.color === COLOR.white ? COLOR.black : COLOR.white\n    const moves = getMoveList(this.#board, piece, this.#playerColor)\n    for (const move of moves) {\n      const from = { row: piece.row, col: piece.col }\n      fakeTakedPiece = this.getPiece(move)\n      this.changePiecePosition(from, move)\n      console.log('updating opponent player moves')\n      this.updatePlayerMoves(opponentPlayerColor, movingPlayerColor)\n      const king = this.getSingleKing(piece.color)\n      if (\n        !this.isSquareInAttacked({ row: king.row, col: king.col }, piece.color)\n      ) {\n        safeMoves.push(move)\n      }\n      this.changePiecePosition(move, from)\n      this.setPieceToList(fakeTakedPiece)\n    }\n    this.updatePlayerMoves(opponentPlayerColor, movingPlayerColor)\n    return safeMoves\n  }\n\n  setTakedPiece(piece) {\n    if (piece === 0) return\n    this.setPieceToBoard({ row: piece.row, col: piece.col }, piece)\n    this.setPieceToList(piece)\n  }\n\n  getPlayerPieceList(color) {\n    return color === COLOR.white ? this.#whitePieces : this.#blackPieces\n  }\n\n  getSingleKing(color) {\n    return color === COLOR.white ? this.#whiteKings[0] : this.#blackKings[0]\n  }\n\n  isSquareInAttacked(square, color) {\n    const opponentPieces =\n      color === COLOR.white\n        ? this.getPlayerPieces(COLOR.black)\n        : this.getPlayerPieces(COLOR.white)\n    for (const piece of opponentPieces) {\n      for (const move of piece.moveList) {\n        if (move.row === square.row && move.col === square.col) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  getTurn() {\n    return this.#turn\n  }\n\n  gameOver() {\n    return false\n  }\n\n  hasMovingPlayerPiece(row, col, movingPlayerColor) {\n    console.log(`row:${row}, col:${col}`)\n    const piece = this.getPiece({ row, col })\n    // if (piece && piece.color === movingPlayerColor) {\n    //   return true\n    // }\n    return true\n  }\n\n  isMovingPlayerInTurn(row, col) {\n    console.log(`row:${row}, col:${col}`)\n    const piece = this.getPiece({ row, col })\n    if (piece && piece.color === this.#turn) return true\n    return false\n  }\n\n  undoMove(from, to) {\n    this.changePiecePosition(to, from)\n    if (this.#lastTakedPiece) {\n      this.#board[to.row][to.col] = this.#lastTakedPiece\n    }\n  }\n\n  changePiecePosition(from, to) {\n    // this.updateFen(from, to)\n    this.#lastTakedPiece = this.#board[to.row][to.col]\n    const movingPiece = this.#board[from.row][from.col]\n    movingPiece.changePosition(to.row, to.col)\n    this.#board[to.row][to.col] = this.#board[from.row][from.col]\n    this.#board[from.row][from.col] = 0\n  }\n\n  makeTemporaryMove(from, to) {\n    this.changePiecePosition(from, to)\n  }\n\n  undoTemporaryMove(from, to) {}\n\n  makeMove(fromSquare, toSquare, movingPlayerColor) {\n    console.log(`from:${fromSquare}, to:${toSquare}`)\n    const fromPos = this.squareToPosition(fromSquare)\n    const toPos = this.squareToPosition(toSquare)\n    if (\n      !(\n        this.IsPositionInBoard(fromPos.row, fromPos.col) &&\n        this.IsPositionInBoard(toPos.row, toPos.col) &&\n        this.isMovingPlayerInTurn(fromPos.row, fromPos.col) &&\n        this.hasMovingPlayerPiece(fromPos.row, fromPos.col, movingPlayerColor)\n      )\n    ) {\n      return null\n    }\n\n    const piece = this.#board[fromPos.row][fromPos.col]\n\n    const color = piece.color\n    const moves = getMoveList(this.#board, piece, this.#playerColor)\n\n    let isMoveValid = false\n    //check if move is possible\n    for (const { row, col } of moves) {\n      if (toPos.row === row && toPos.col === col) {\n        isMoveValid = true\n        break\n      }\n    }\n    console.log('is move valid')\n    if (!isMoveValid) return null\n    console.log('move valid')\n\n    const checkedBefore = this.isChecked(piece.color)\n    console.log('checkedBefore', checkedBefore)\n    this.changePiecePosition(fromPos, toPos)\n    //before is check or before is check and after move there is still check\n    const checked = this.isChecked(color)\n    console.log('checked', checked)\n    if (checked || (checkedBefore && this.isChecked(color))) {\n      this.undoMove(fromPos, toPos)\n      return\n    }\n    // this.printBoard()\n    //move is possible\n    this.updateFen(fromPos, toPos, piece.fenChar)\n    this.makePromotion(piece)\n    this.updateMoves(movingPlayerColor)\n\n    this.#turn =\n      this.#turn === TamerlaneChess.#whiteColor\n        ? TamerlaneChess.#blackColor\n        : TamerlaneChess.#whiteColor\n    const move = { from: fromSquare, to: toSquare }\n    const moveInOpponentBoard = this.computeMoveInOpponentBoard(fromPos, toPos)\n    console.log('opponent move', moveInOpponentBoard)\n    //saved Move always according to white player\n    let savedMove\n    if (this.#playerColor === COLOR.white) {\n      savedMove = move\n    } else {\n      savedMove = moveInOpponentBoard\n    }\n\n    return {\n      status: '',\n      move,\n      moveInOpponentBoard,\n      savedMove,\n    }\n  }\n\n  getCurrentFen() {\n    return this.#fen\n  }\n\n  isSwitched() {\n    return false\n  }\n\n  updateFenToPromotedPiece(promotedPiecePosition, promotedPieceFenChar) {\n    const movedPieceCharIndexInFen = this.getIndexInFen(promotedPiecePosition)\n    this.replacePieceFenCharAt(movedPieceCharIndexInFen, promotedPieceFenChar)\n  }\n\n  updateFen(from, to, movedPieceFenChar) {\n    //position already chaged so from is to, to is from\n    const newTo = from\n    const newFrom = to\n    const movedPiece = this.getPiece(newFrom)\n    console.log('moved piece', movedPiece)\n    const movedPieceCharIndexInFen = this.getIndexInFen(movedPiece)\n    const toSquareCharIndexInFen = this.getIndexInFen(newTo)\n    this.replacePieceFenCharAt(movedPieceCharIndexInFen, movedPieceFenChar)\n    this.replacePieceFenCharAt(toSquareCharIndexInFen, '1')\n  }\n\n  replacePieceFenCharAt(charIndex, pieceFenChar) {\n    this.#fen = replaceAt(this.#fen, charIndex, pieceFenChar)\n  }\n\n  getIndexInFen({ row, col }) {\n    return (9 - row) * 12 + col\n  }\n\n  //Helper functions\n  squareToPosition(square) {\n    console.log(square)\n    console.log(`square:${square}`)\n    const col = COLUMNS.indexOf(square[0])\n    //square length can be 2 or 3\n    const row = Number(square.replace(/^[a-k]/, '')) - 1\n    console.log(`square row: ${row}, col: ${col}`)\n    return { col, row }\n  }\n  positionToSquare(row, col) {\n    const rank = row + 1\n    const file = COLUMNS[col]\n    const square = `${file}${rank}`\n    return square\n  }\n\n  isOwnCitadel(square, movingPlayerColor) {\n    const ownCitadel =\n      movingPlayerColor === TamerlaneChess.#whiteColor\n        ? TamerlaneChess.#whiteCitadel\n        : TamerlaneChess.#blackCitadel\n\n    if (square === ownCitadel) return true\n    else return false\n  }\n\n  computeMoveInOpponentBoard(from, to) {\n    from.row = TamerlaneChess.#rowCount - from.row - 1\n    from.col = TamerlaneChess.#colCount - from.col - 1\n    to.row = TamerlaneChess.#rowCount - to.row - 1\n    to.col = TamerlaneChess.#colCount - to.colCount - 1\n    return { from, to }\n  }\n\n  computeOpponentFen(fen) {\n    // const lastSlahIndex = fen.lastIndexOf('/')\n    // let opponentFen = ''\n    // for (let i = 0; i < fen.length; i++) {\n    //   if (i === lastSlahIndex) {\n    //     break\n    //   }\n    //   opponentFen = `${fen[i]}${opponentFen}`\n    // }\n    // let remainStringIndex = lastSlahIndex\n    // for (; remainStringIndex < fen.length; remainStringIndex++) {\n    //   opponentFen = `${opponentFen}${fen[remainStringIndex]}`\n    // }\n    // return opponentFen\n  }\n\n  updateMoves(movingPlayerColor) {\n    this.updatePlayerMoves(COLOR.white, movingPlayerColor)\n    this.updatePlayerMoves(COLOR.black, movingPlayerColor)\n  }\n\n  updatePlayerMoves(color, movingPlayerColor) {\n    console.log('color', color)\n    console.log('moving playerColor', movingPlayerColor)\n    const pieces = color === COLOR.white ? this.#whitePieces : this.#blackPieces\n    let piece\n    console.log(pieces)\n    for (piece of pieces) {\n      if (piece.pawn) piece.updateValidMoves(this.#board, movingPlayerColor)\n      else piece.updateValidMoves(this.#board)\n    }\n  }\n\n  setPieceToList(piece) {\n    if (piece.color === COLOR.white) {\n      this.#whitePieces.push(piece)\n    } else if (piece.color === COLOR.black) {\n      this.#blackPieces.push(piece)\n    }\n  }\n\n  getOpponentValues() {}\n\n  draw(win, color) {}\n  setKing(king) {\n    console.log('king setting', king)\n    if (king.color === COLOR.white) {\n      this.#whiteKings.push(king)\n    } else {\n      this.#blackKings.push(king)\n    }\n  }\n\n  getDangerMoves(color) {\n    const kings = color === COLOR.white ? this.#whiteKings : this.#blackKings\n\n    if (kings.length === 1) {\n      const pieces =\n        color === COLOR.white ? this.#blackPieces : this.#whitePieces\n      let piece, move\n      for (piece of pieces) {\n        for (move of piece.moveList) {\n          if (move.row === kings[0].row && move.col === kings[0].col) {\n          }\n        }\n      }\n    }\n  }\n\n  isChecked(color) {\n    console.log('updating move in isChecked func')\n    this.updateMoves(color)\n\n    const kings = color === COLOR.white ? this.#whiteKings : this.#blackKings\n    console.log('kings', kings)\n    console.log('white kings', this.#whiteKings)\n    console.log('black kings', this.#blackKings)\n    if (kings.length === 1) {\n      const pieces =\n        color === COLOR.white ? this.#blackPieces : this.#whitePieces\n      console.log('pieces')\n      console.log(pieces)\n      let piece, move\n      const singleKing = kings[0]\n      for (piece of pieces) {\n        for (move of piece.moveList) {\n          if (move.row === singleKing.row && move.col === singleKing.col) {\n            return true\n          }\n        }\n      }\n    }\n    return false\n  }\n\n  isSingleKingIndangerMoves() {}\n\n  printBoard() {\n    for (let i = this.#board.length - 1; i >= 0; i--) {\n      console.log(this.#board[i])\n    }\n  }\n\n  checkMate(color) {}\n\n  parseFen(fenType) {\n    console.log(fenType)\n    let fen\n\n    let fenCounter = 0\n    let row = TamerlaneChess.#rowCount - 1\n    let col = 0\n    let king\n    let piece\n    while (row >= 0 && fenCounter < this.#fen.length) {\n      let emptySquareCount = 0\n      switch (this.#fen[fenCounter]) {\n        case 'p':\n          piece = new PawnOfPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'b':\n          piece = new ElephantPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'c':\n          piece = new CamelPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'x':\n          piece = new WarEnginePawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'r':\n          piece = new RookPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'n':\n          piece = new KnightPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 't':\n          piece = new CatapultPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'h':\n          piece = new GiraffePawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'y':\n          piece = new VizierPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'q':\n          piece = new KingPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'e':\n          piece = new GeneralPawn(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'f':\n          piece = new Elephant(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'd':\n          piece = new Camel(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'i':\n          piece = new WarEngine(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'k':\n          piece = new Rook(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'a':\n          piece = new Knight(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'm':\n          piece = new Catapult(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'z':\n          piece = new Giraffe(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'g':\n          piece = new General(row, col, TamerlaneChess.#blackColor)\n          break\n        case 's':\n          king = new King(row, col, TamerlaneChess.#blackColor)\n          this.setKing(king)\n          piece = king\n          break\n        case 'v':\n          piece = new Vizier(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'P':\n          piece = new PawnOfPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'B':\n          piece = new ElephantPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'C':\n          piece = new CamelPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'X':\n          piece = new WarEnginePawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'R':\n          piece = new RookPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'N':\n          piece = new KnightPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'T':\n          piece = new CatapultPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'H':\n          piece = new GiraffePawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'Y':\n          piece = new VizierPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'Q':\n          piece = new KingPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'E':\n          piece = new GeneralPawn(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'F':\n          piece = new Elephant(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'D':\n          piece = new Camel(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'I':\n          piece = new WarEngine(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'K':\n          piece = new Rook(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'A':\n          piece = new Knight(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'M':\n          piece = new Catapult(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'Z':\n          piece = new Giraffe(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'G':\n          piece = new General(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'S':\n          piece = new King(row, col, TamerlaneChess.#whiteColor)\n          this.setKing(piece)\n          break\n        case 'V':\n          piece = new Vizier(row, col, TamerlaneChess.#whiteColor)\n          break\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          emptySquareCount = Number(this.#fen[fenCounter])\n          break\n        case '/':\n        case ' ':\n          row -= 1\n          col = 0\n          fenCounter++\n          continue\n        default:\n          console.log(this.#fen[fenCounter])\n          console.log('Fen finished')\n          return\n      }\n\n      if (emptySquareCount === 0) {\n        this.setPieceToBoard({ row, col }, piece)\n        col += 1\n      } else {\n        for (let i = 0; i < emptySquareCount; i++) {\n          col += 1\n          this.setPieceToBoard({ row, col }, 0)\n        }\n      }\n\n      fenCounter++\n    }\n  }\n}\nObject.assign(TamerlaneChess.prototype, positionChecker())\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js",["143"],"import Piece from './Piece'\n\nexport default class Giraffe extends Piece {\n  static #directions = [\n    { rowDir: -1, colDir: 1 },\n    { rowDir: 1, colDir: 1 },\n    { rowDir: 1, colDir: -1 },\n    { rowDir: -1, colDir: -1 },\n  ]\n\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.fenChar = 'z'\n    this.setFenChar()\n  }\n\n  validMoves(board) {\n    const moves = []\n    let currentCol\n    let currentRow\n    for (const { rowDir, colDir } of Giraffe.#directions) {\n      currentCol = this.col + rowDir\n      currentRow = this.row + colDir\n      let piece = board[currentCol][currentRow]\n    }\n\n    return moves\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js",["144","145"],"import Piece from './Piece'\nimport Camel from './Camel'\nimport Knight from './Knight'\nimport General from './General'\nimport Catapult from './Catapult'\nimport Vizier from './Vizier'\nimport WarEngine from './WarEngine'\nimport Giraffe from './Giraffe'\nimport Elephant from './Elephant'\nimport Rook from './Rook'\nimport AdventitiousKing from './AdventitiousKing'\nimport Prince from './Prince'\nimport { COLOR } from '../types'\nimport { getMoveList, SuperArray } from '../helper'\nclass Pawn extends Piece {\n  static _diagonalColsIncrementValues = [-1, 1]\n  constructor(row, col, color) {\n    super(row, col, color)\n    if (this.constructor === Pawn) {\n      throw Error('Pawn can not be instated')\n    }\n\n    this.pawn = true\n  }\n\n  updateValidMoves(board, playerColor) {\n    this.moveList = this.validMoves(board, playerColor)\n  }\n\n  isPieceOpponent(row, col, board) {\n    const attackedPiece = board[row][col]\n    if (attackedPiece !== 0 && attackedPiece.color !== this.color) {\n      return true\n    }\n    return false\n  }\n\n  validMoves(board, playerColor) {\n    if (playerColor !== COLOR.white && playerColor !== COLOR.black) {\n      throw Error('No matching player color with black or white')\n    }\n    const moves = []\n    let row\n    let col\n\n    const rowIncrementValue = playerColor === this.color ? 1 : -1\n    row = this.row + rowIncrementValue\n\n    //UP\n    col = this.col\n    if (\n      this.IsPositionInBoard(row, col) &&\n      this.isSquareEmpty(row, col, board)\n    ) {\n      moves.push({ row, col })\n    }\n\n    let colIncrementValue\n    for (colIncrementValue of Pawn._diagonalColsIncrementValues) {\n      col = this.col + colIncrementValue\n      if (\n        this.IsPositionInBoard(row, col) &&\n        this.isPieceOpponent(row, col, board)\n      ) {\n        moves.push({ row, col })\n      }\n    }\n\n    return moves\n  }\n}\n\nexport class PawnOfPawn extends Pawn {\n  static #firstPromoted = 1\n  static #secondPromoted = 2\n  static #noPromoted = 0\n\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedCount = 0\n    this.fenChar = 'p'\n    this.promotedToPiece = AdventitiousKing\n    this.setFenChar()\n  }\n  validMoves(board, playerColor) {\n    switch (this.getPromotedType(playerColor)) {\n      //regular moves\n      case PawnOfPawn.#noPromoted:\n        return super.validMoves(board, playerColor)\n      case PawnOfPawn.#firstPromoted:\n        return SuperArray.getUniqueItemContextArray([\n          ...this.getForkMoves(board, playerColor),\n          ...this.getImmobileMoves(board, playerColor),\n        ])\n      case PawnOfPawn.#secondPromoted:\n        const kingPawnInıtPos =\n          playerColor === this.color ? { row: 2, col: 5 } : { row: 7, col: 5 }\n        return [kingPawnInıtPos]\n    }\n  }\n\n  getForkMoves(board, playerColor) {\n    const moves = []\n    let row, col, piece\n    for (row of board) {\n      for (piece of row) {\n        if (\n          this.isOpponentPiece(piece) &&\n          this.IsPositionInBoard(piece.row, piece.col + 2)\n        ) {\n          const rowIncrement = playerColor === this.color ? -1 : 1\n          const forkingRow = piece.row + rowIncrement\n          const forkingCol = piece.col + 1\n          if (this.IsPositionInBoard(forkingRow, forkingCol)) {\n            moves.push({ row: forkingRow, col: forkingCol })\n          }\n        }\n      }\n    }\n    return moves\n  }\n\n  getImmobileMoves(board, playerColor) {\n    const moves = []\n    let row\n    let piece\n    for (row of board) {\n      for (piece of row) {\n        if (this.isOpponentPiece(piece)) {\n          const opponentPieceMoves = getMoveList(board, piece, playerColor)\n          if (opponentPieceMoves.length === 0) {\n            let rowPos, colPos\n            const rowIncerementValue = playerColor === this.color ? -1 : 1\n            rowPos = piece.row + rowIncerementValue\n            let colIncrementValue\n            for (colIncrementValue of PawnOfPawn._diagonalColsIncrementValues) {\n              colPos = piece.col + colIncrementValue\n              if (this.IsPositionInBoard(rowPos, colPos)) {\n                moves.push({\n                  row: rowPos,\n                  col: colPos,\n                })\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return moves\n  }\n\n  getPromotedType(playerColor) {\n    if (\n      (playerColor === this.color &&\n        this.row === 9 &&\n        this.promotedCount === PawnOfPawn.#firstPromoted) ||\n      (playerColor !== this.color &&\n        this.row === 0 &&\n        this.promotedCount === PawnOfPawn.#firstPromoted)\n    ) {\n      return PawnOfPawn.#firstPromoted\n    } else if (\n      (playerColor !== this.color &&\n        this.row === 0 &&\n        this.promotedCount === PawnOfPawn.#secondPromoted) ||\n      (playerColor === this.color &&\n        this.row === 9 &&\n        this.promotedCount === PawnOfPawn.#secondPromoted)\n    ) {\n      console.log('second promoted')\n      return PawnOfPawn.#secondPromoted\n    }\n    return PawnOfPawn.#noPromoted\n  }\n}\n\nexport class KingPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Prince\n    this.fenChar = 'q'\n    this.setFenChar()\n  }\n  validMoves(board, playerColor) {\n    //eğer\n    if (true) {\n      return super.validMoves(board, playerColor)\n    }\n  }\n}\n\nexport class CamelPawn extends Pawn {\n  constructor(row, col, color, fenChar) {\n    super(row, col, color, fenChar)\n    this.promotedToPiece = Camel\n    this.fenChar = 'c'\n    this.setFenChar()\n  }\n\n  validMoves(board, playerColor) {\n    return super.validMoves(board, playerColor)\n  }\n}\n\nexport class CatapultPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Catapult\n    this.fenChar = 't'\n  }\n}\nexport class ElephantPawn extends Pawn {\n  constructor(row, col, color, fenChar) {\n    super(row, col, color, fenChar)\n    this.promotedToPiece = Elephant\n    this.fenChar = 'b'\n    this.setFenChar()\n  }\n}\nexport class GeneralPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = General\n    this.fenChar = 'e'\n    this.setFenChar()\n  }\n}\nexport class GiraffePawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Giraffe\n    this.fenChar = 'h'\n    this.setFenChar()\n  }\n}\nexport class KnightPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Knight\n    this.fenChar = 'n'\n    this.setFenChar()\n  }\n}\nexport class RookPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Rook\n    this.fenChar = 'r'\n    this.setFenChar()\n  }\n}\nexport class VizierPawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Vizier\n    this.fenChar = 'y'\n    this.setFenChar()\n  }\n}\nexport class WarEnginePawn extends Pawn {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = WarEngine\n    this.fenChar = 'x'\n    this.setFenChar()\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessReducers.js",["146","147","148"],"import {\n  START_GAME,\n  CLEAR_HIGHLIGHTING,\n  SET_HIGHLIGHTING,\n  MOVE,\n  SELECT_PIECE,\n} from './tamerlaneChessActionTypes'\nimport TamerlaneChess from '../tamerlane-chess'\nimport {\n  validFen,\n  fenToObj,\n  validPositionObject,\n  getPositionObject,\n} from '../helper/Fen'\n\nexport const initialState = {\n  fen: 'start',\n  dropSquareStyle: {},\n  squareStyles: {},\n  lightSquareStyle: { backgroundColor: 'rgb(240, 217, 181)' },\n  darkSquareStyle: { backgroundColor: 'rgb(181, 136, 99)' },\n  pieceSquare: '',\n  fromSquare: '',\n  toSquare: '',\n  selectedPiece: '',\n  history: [],\n  currentPosition: getPositionObject('start'),\n  sourceSquare: '',\n  targetSquare: '',\n  sourcePiece: '',\n  waitForTransition: false,\n  phantomPiece: null,\n  wasPieceTouched: false,\n  manualDrop: false,\n  squareClicked: false,\n  firstMove: false,\n}\n\nexport default function tamerlaneChessReducer(state = initialState, action) {\n  const { type, payload } = action\n  switch (type) {\n    case START_GAME:\n      const tamerlaneChess = new TamerlaneChess('w')\n      return {\n        ...state,\n        tamerlaneChess,\n      }\n    case MOVE:\n      return {\n        ...state,\n        currentPosition: getPositionObject(payload.fen),\n      }\n    case CLEAR_HIGHLIGHTING:\n      return {\n        ...state,\n      }\n    case SET_HIGHLIGHTING:\n      return {\n        ...state,\n        squareStyles: payload.highlightStyles,\n      }\n    case SELECT_PIECE:\n      return {\n        ...state,\n        fromSquare: payload.fromSquare,\n      }\n    default:\n      return state\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessActionTypes.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/helper/Fen.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/AdventitiousKing.js",["149"],"import Piece from './Piece'\n\nimport { KingDirectionsObj, NoneSlidePieceMovesObj } from '../helper'\n\nexport default class AdventitiousKing extends Piece {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.king = true\n    this.fenChar = 'j'\n    this.setFenChar()\n  }\n\n  validMoves(board, playerColor) {\n    const ownCitadel =\n      playerColor === 'w' ? { row: 1, col: 12 } : { row: 8, col: -1 }\n    if (true) {\n      return this.noneSlidePieceMoves(board)\n    }\n  }\n}\n\nObject.assign(\n  AdventitiousKing.prototype,\n  NoneSlidePieceMovesObj,\n  KingDirectionsObj\n)\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Prince.js",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":24,"column":13,"nodeType":"156","messageId":"157","endLine":24,"endColumn":24},{"ruleId":"154","severity":1,"message":"158","line":24,"column":26,"nodeType":"156","messageId":"157","endLine":24,"endColumn":33},{"ruleId":"154","severity":1,"message":"159","line":100,"column":9,"nodeType":"156","messageId":"157","endLine":100,"endColumn":20},{"ruleId":"154","severity":1,"message":"160","line":1,"column":17,"nodeType":"156","messageId":"157","endLine":1,"endColumn":26},{"ruleId":"154","severity":1,"message":"161","line":1,"column":28,"nodeType":"156","messageId":"157","endLine":1,"endColumn":36},{"ruleId":"154","severity":1,"message":"162","line":1,"column":38,"nodeType":"156","messageId":"157","endLine":1,"endColumn":45},{"ruleId":"154","severity":1,"message":"163","line":4,"column":8,"nodeType":"156","messageId":"157","endLine":4,"endColumn":13},{"ruleId":"154","severity":1,"message":"164","line":6,"column":10,"nodeType":"156","messageId":"157","endLine":6,"endColumn":34},{"ruleId":"154","severity":1,"message":"165","line":2,"column":8,"nodeType":"156","messageId":"157","endLine":2,"endColumn":17},{"ruleId":"154","severity":1,"message":"166","line":1,"column":10,"nodeType":"156","messageId":"157","endLine":1,"endColumn":33},{"ruleId":"154","severity":1,"message":"167","line":140,"column":18,"nodeType":"156","messageId":"157","endLine":140,"endColumn":21},{"ruleId":"154","severity":1,"message":"168","line":140,"column":30,"nodeType":"156","messageId":"157","endLine":140,"endColumn":45},{"ruleId":"154","severity":1,"message":"169","line":291,"column":11,"nodeType":"156","messageId":"157","endLine":291,"endColumn":16},{"ruleId":"154","severity":1,"message":"170","line":574,"column":9,"nodeType":"156","messageId":"157","endLine":574,"endColumn":12},{"ruleId":"154","severity":1,"message":"169","line":24,"column":11,"nodeType":"156","messageId":"157","endLine":24,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":86,"column":5,"nodeType":"173","messageId":"174","endLine":99,"endColumn":6},{"ruleId":"154","severity":1,"message":"175","line":104,"column":14,"nodeType":"156","messageId":"157","endLine":104,"endColumn":17},{"ruleId":"154","severity":1,"message":"176","line":10,"column":3,"nodeType":"156","messageId":"157","endLine":10,"endColumn":11},{"ruleId":"154","severity":1,"message":"177","line":11,"column":3,"nodeType":"156","messageId":"157","endLine":11,"endColumn":11},{"ruleId":"154","severity":1,"message":"178","line":12,"column":3,"nodeType":"156","messageId":"157","endLine":12,"endColumn":22},{"ruleId":"154","severity":1,"message":"179","line":14,"column":11,"nodeType":"156","messageId":"157","endLine":14,"endColumn":21},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"no-unused-vars","'pieceSquare' is assigned a value but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useMemo' is defined but never used.","'Piece' is defined but never used.","'useTamerlaneChessContext' is defined but never used.","'PropTypes' is defined but never used.","'includeInTwoDimensArray' is defined but never used.","'col' is assigned a value but never used.","'promotedToPiece' is assigned a value but never used.","'piece' is assigned a value but never used.","'fen' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'col' is defined but never used.","'validFen' is defined but never used.","'fenToObj' is defined but never used.","'validPositionObject' is defined but never used.","'ownCitadel' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]