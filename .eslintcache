[{"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js":"1","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js":"2","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js":"3","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js":"4","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js":"5","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js":"6","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js":"7","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js":"8","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js":"9","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js":"10","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js":"11","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js":"12","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js":"13","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js":"14","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js":"15","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js":"16","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js":"17","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js":"18","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js":"19","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js":"20","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js":"21","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js":"22","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js":"23","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js":"24","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessReducers.js":"25","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessActionTypes.js":"26","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/helper/Fen.js":"27","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/AdventitiousKing.js":"28","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Prince.js":"29"},{"size":500,"mtime":1610695920352,"results":"30","hashOfConfig":"31"},{"size":203,"mtime":1610971058234,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1610695920352,"results":"33","hashOfConfig":"31"},{"size":3500,"mtime":1611829950918,"results":"34","hashOfConfig":"31"},{"size":1008,"mtime":1611854108402,"results":"35","hashOfConfig":"31"},{"size":1474,"mtime":1611394900621,"results":"36","hashOfConfig":"31"},{"size":158,"mtime":1611136956381,"results":"37","hashOfConfig":"31"},{"size":20977,"mtime":1611867127784,"results":"38","hashOfConfig":"31"},{"size":763,"mtime":1611134382815,"results":"39","hashOfConfig":"31"},{"size":2314,"mtime":1611850705794,"results":"40","hashOfConfig":"31"},{"size":474,"mtime":1611856699050,"results":"41","hashOfConfig":"31"},{"size":1288,"mtime":1611856751951,"results":"42","hashOfConfig":"31"},{"size":280,"mtime":1611856791951,"results":"43","hashOfConfig":"31"},{"size":279,"mtime":1611856819020,"results":"44","hashOfConfig":"31"},{"size":402,"mtime":1611856951215,"results":"45","hashOfConfig":"31"},{"size":340,"mtime":1611857075621,"results":"46","hashOfConfig":"31"},{"size":279,"mtime":1611857151983,"results":"47","hashOfConfig":"31"},{"size":544,"mtime":1611856882200,"results":"48","hashOfConfig":"31"},{"size":990,"mtime":1611857036870,"results":"49","hashOfConfig":"31"},{"size":6865,"mtime":1611866114510,"results":"50","hashOfConfig":"31"},{"size":584,"mtime":1611604801993,"results":"51","hashOfConfig":"31"},{"size":1502,"mtime":1611868245529,"results":"52","hashOfConfig":"31"},{"size":156,"mtime":1610813905318,"results":"53","hashOfConfig":"31"},{"size":584,"mtime":1611856924711,"results":"54","hashOfConfig":"31"},{"size":2075,"mtime":1611830347860,"results":"55","hashOfConfig":"31"},{"size":217,"mtime":1611395259331,"results":"56","hashOfConfig":"31"},{"size":4956,"mtime":1611854816316,"results":"57","hashOfConfig":"31"},{"size":558,"mtime":1611855207473,"results":"58","hashOfConfig":"31"},{"size":452,"mtime":1611857009014,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"qgqcp2",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/index.js",[],["126","127"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/App.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reportWebVitals.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/index.js",["128","129","130"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Board.js",["131","132","133","134","135"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Square.js",["136"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Piece from './Piece'\nimport { useTamerlaneChessContext } from './index'\n\nconst Square = ({ square, squareColor, row, col }) => {\n  const {\n    darkSquareStyle,\n    lightSquareStyle,\n    currentPosition,\n    handleClick,\n    squareStyles,\n  } = useTamerlaneChessContext()\n\n  const hasPiece = (currentPosition, square) => {\n    const keys = Object.keys(currentPosition)\n    return currentPosition && keys && keys.includes(square)\n  }\n  const getPieceName = (square) => {\n    return currentPosition[square]\n  }\n\n  const squareStyle = () => {\n    return {\n      ...(squareColor === 'black' ? darkSquareStyle : lightSquareStyle),\n    }\n  }\n\n  return (\n    <div\n      style={squareStyle()}\n      id={square}\n      onClick={() => handleClick(square)}\n      className={`file${col} rank${row}`}\n    > \n      <div style={{ ...squareStyles[square], ...size() }}>\n        {hasPiece(currentPosition, square) && (\n          <Piece pieceName={getPieceName(square)}></Piece>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst size = () => ({\n  height: 50,\n  width: 50,\n})\n\n// Square.PropTypes = {\n//   width: PropTypes.func,\n//   squareColor: PropTypes.oneOf(['white', 'black']),\n//   children: PropTypes.oneOfType([PropTypes.array, PropTypes.node]),\n//   square: PropTypes.string,\n//   lightSquareStyle: PropTypes.object,\n//   darkSquareStyle: PropTypes.object,\n//   roughSquare: PropTypes.func,\n// }\n\nexport default Square\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chessboard/Piece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/index.js",["137","138","139","140","141"],"import { includeInTwoDimensArray, replaceAt } from './helper'\nimport { expandFenEmptySquares } from '../helper/Fen'\nimport {\n  King,\n  Camel,\n  Catapult,\n  Elephant,\n  General,\n  Giraffe,\n  Knight,\n  Vizier,\n  WarEngine,\n  Rook,\n  PawnOfPawn,\n  CamelPawn,\n  CatapultPawn,\n  ElephantPawn,\n  GeneralPawn,\n  GiraffePawn,\n  KnightPawn,\n  VizierPawn,\n  WarEnginePawn,\n  RookPawn,\n  KingPawn,\n} from './Pieces'\nimport { FEN_TYPE, COLOR } from './types'\nimport { positionChecker, getMoveList } from './helper'\nconst COLUMNS = 'abcdefghijk'.split('')\n\nexport default class TamerlaneChess {\n  static #rowCount = 10\n  static #lastRowIndex = 9\n  static #firstRowIndex = 0\n  static #colCount = 11\n  static #blackColor = 'b'\n  static #whiteColor = 'w'\n  #board = Array.from(Array(10), () => new Array(11))\n  #opponentBoard = Array.from(Array(10), () => new Array(11))\n  #player = 'player'\n  #opponetPlayer = 'opponent'\n  #turn = TamerlaneChess.#whiteColor\n  #time1 = 900\n  #time2 = 900\n  #storedTime1 = 0\n  #storedTime2 = 0\n  #winner = null\n  #last = null\n  #copy = true\n  #ready = false\n  #whiteKingCount = 1\n  #blackKingCount = 1\n\n  #playerColor\n  #opponentPlayerColor\n  #whiteKings = []\n  #blackKings = []\n  static #blackCitadel = 'y'\n  static #whiteCitadel = 'x'\n  #lastTakedPiece = null\n  #fen\n  #opponentFen\n  constructor(playerColor, fen = null) {\n    this.#playerColor = playerColor\n\n    this.#opponentPlayerColor =\n      this.#playerColor === TamerlaneChess.#blackColor\n        ? TamerlaneChess.#blackColor\n        : TamerlaneChess.#whiteColor\n\n    for (let row = 0; row < 10; row++) {\n      for (let col = 0; col < 11; col++) {\n        this.#board[row][col] = 0\n        this.#opponentBoard[row][col] = 0\n      }\n    }\n\n    //Beyaz taşlar ekranda aşağıda ise\n    //  'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBYQEHTNR/KAMZGSVZMAK/F1D1I1I1D1F*2 w'\n    let defaultWhitePiecesAtBottomFen =\n      'f1d1i1i1d1f/kamzvsgzmak/pxcbyqehtnr/92/92/92/92/PXCBEQYHTNR/KAMZGSVZMAK/F1D1I1I1D1F* w'\n    //Siyah taşlar ekranda aşağıda ise\n    let defaultBlackPiecesAtBottomFen =\n      'F1D1I1I1D1F/KAMZVSGZMAK/PXCBYQEHTNR/92/92/92/92/pxcbyqehtnr/kamzgsvzmak/f1d1i1i1d1f* w'\n\n    if (fen === null) {\n      this.#fen =\n        this.#playerColor === TamerlaneChess.#whiteColor\n          ? defaultWhitePiecesAtBottomFen\n          : defaultBlackPiecesAtBottomFen\n    }\n\n    this.parseFen(FEN_TYPE.player)\n    this.parseFen(FEN_TYPE.opponent)\n    this.printBoard()\n  }\n\n  getPiece(square) {\n    const { row, col } = this.squareToPosition(square)\n    console.log(`row:${row}, col:${col}`)\n    return this.#board[row][col]\n  }\n\n  makePromotion(piece) {\n    if (!piece.pawn) return\n    const { row, col, color, promotedToPiece } = piece\n    const conditionRow =\n      this.#playerColor === color\n        ? TamerlaneChess.#lastRowIndex\n        : TamerlaneChess.#firstRowIndex\n    console.log('condition row', conditionRow)\n    if (\n      conditionRow !== row ||\n      (piece.constructor.name === 'PawnOfPawn' && piece.promotedCount === 3)\n    ) {\n      return\n    }\n\n    //opponent board will be set\n    console.log('promoted to ', piece.promotedToPiece)\n    console.log('piece.promotedCount ', piece.promotedCount)\n    if (piece.constructor.name === 'PawnOfPawn') {\n      piece.promotedCount += 1\n      if (piece.promotedCount === 3) {\n        const adventitiousKing = new promotedToPiece(row, col, color)\n        this.#board[row][col] = adventitiousKing\n      }\n    } else {\n      this.#board[row][col] = new promotedToPiece(row, col, color)\n    }\n\n    console.log('piece.promotedCount ', piece.promotedCount)\n    this.printBoard()\n  }\n\n  isPiecePromotedPawnOfPawn(fromSquare) {\n    const piece = this.getPiece(fromSquare)\n    if (\n      piece !== 0 &&\n      piece.constructor.name === 'PawnOfPawn' &&\n      piece.promotedCount > 0\n    ) {\n      return true\n    }\n    return false\n  }\n\n  getMoves(square) {\n    const { row, col } = this.squareToPosition(square)\n    if (!this.isMovingPlayerInTurn(row, col)) return null\n    const piece = this.#board[row][col]\n    this.printBoard()\n    console.log('piece', piece)\n    const moveList = getMoveList(this.#board, piece, this.#playerColor)\n\n    console.log(moveList)\n    const squareList = moveList.map((pos) => {\n      return this.positionToSquare(pos.row, pos.col)\n    })\n    return squareList\n  }\n\n  getTurn() {\n    return this.#turn\n  }\n\n  gameOver() {\n    return false\n  }\n\n  hasMovingPlayerPiece(row, col, movingPlayerColor) {\n    const piece = this.#board[row][col]\n    // if (piece && piece.color === movingPlayerColor) {\n    //   return true\n    // }\n    return true\n  }\n\n  isMovingPlayerInTurn(row, col) {\n    const piece = this.#board[row][col]\n    if (piece && piece.color === this.#turn) return true\n    return false\n  }\n\n  undoMove(from, to) {\n    this.changePosition(to, from)\n    if (this.#lastTakedPiece) {\n      this.#board[to.row][to.col] = this.#lastTakedPiece\n      //fen tekrar update edilecek\n    }\n  }\n\n  changePiecePosition(from, to) {\n    this.updateFen(from, to)\n    this.#lastTakedPiece = this.#board[to.row][to.col]\n    const movingPiece = this.#board[from.row][from.col]\n    movingPiece.changePosition(to.row, to.col)\n    this.#board[to.row][to.col] = this.#board[from.row][from.col]\n    this.#board[from.row][from.col] = 0\n  }\n\n  makeMove(fromSquare, toSquare, movingPlayerColor) {\n    console.log(`from:${fromSquare}, to:${toSquare}`)\n    const fromPos = this.squareToPosition(fromSquare)\n    const toPos = this.squareToPosition(toSquare)\n    if (\n      !(\n        this.IsPositionInBoard(fromPos.row, fromPos.col) &&\n        this.IsPositionInBoard(toPos.row, toPos.col) &&\n        this.isMovingPlayerInTurn(fromPos.row, fromPos.col) &&\n        this.hasMovingPlayerPiece(fromPos.row, fromPos.col, movingPlayerColor)\n      )\n    ) {\n      return null\n    }\n\n    const piece = this.#board[fromPos.row][fromPos.col]\n    const color = piece.color\n    const moves = getMoveList(this.#board, piece, this.#playerColor)\n\n    let isMoveValid = false\n    //check if move is possible\n    for (const { row, col } of moves) {\n      if (toPos.row === row && toPos.col === col) {\n        isMoveValid = true\n        break\n      }\n    }\n    console.log('is move valid')\n    if (!isMoveValid) return null\n    console.log('move valid')\n    const checkedBefore = this.isChecked(piece)\n    this.changePiecePosition(fromPos, toPos)\n    //before is check or before is check and after move there is still check\n    if (this.isChecked(color) || (checkedBefore && this.isChecked(color))) {\n      this.undoMove(fromPos, toPos)\n      return\n    }\n    this.printBoard()\n    //move is possible\n    this.makePromotion(piece)\n    this.updateMoves(movingPlayerColor)\n\n    this.#turn =\n      this.#turn === TamerlaneChess.#whiteColor\n        ? TamerlaneChess.#blackColor\n        : TamerlaneChess.#whiteColor\n    const move = { from: fromSquare, to: toSquare }\n    const moveInOpponentBoard = this.computeMoveInOpponentBoard(fromPos, toPos)\n    console.log('opponent move', moveInOpponentBoard)\n    //saved Move always according to white player\n    let savedMove\n    if (this.#playerColor === COLOR.white) {\n      savedMove = move\n    } else {\n      savedMove = moveInOpponentBoard\n    }\n\n    return {\n      status: '',\n      move,\n      moveInOpponentBoard,\n      savedMove,\n    }\n  }\n\n  select(row, col, color) {\n    let changed = false\n    let prev = [-1, -1]\n    for (let i = 0; i < TamerlaneChess.#rowCount; i++) {\n      for (let j = 0; j < TamerlaneChess.#colCount; j++) {\n        if (\n          typeof this.#board[i][j] === 'object' &&\n          this.#board[i][j].selected\n        ) {\n          prev = [i, j]\n        }\n      }\n    }\n\n    if (\n      this.#board[row][col] === 0 &&\n      JSON.stringify(prev) !== JSON.stringify([-1, -1])\n    ) {\n      const moves = this.#board[prev[0]][prev[1]].moveList\n      if (includeInTwoDimensArray(moves, [row, col])) {\n        changed = this.makeMove(prev, [row, col], color)\n      }\n    } else {\n      // if(prev)\n    }\n  }\n\n  getCurrentFen() {\n    return this.#fen\n  }\n\n  formatFenChar(piece) {\n    let fenChar = piece.constructor.fenChar\n    return piece.color === COLOR.white\n      ? fenChar.toUpperCase()\n      : fenChar.toLowerCase()\n  }\n\n  updateFen(from, to) {\n    let movedPiece = this.#board[from.row][from.col]\n    const square = this.#board[to.row][to.col]\n    console.log(movedPiece)\n    console.log(`moved piece char:${movedPiece.constructor.fenChar}`)\n    this.#fen = this.#fen.replace(/\\*.+$/, '')\n    this.#fen = expandFenEmptySquares(this.#fen)\n    const fenRows = this.#fen.split('/')\n    console.log(fenRows)\n    for (let fenRowIndex in fenRows) {\n      for (let fenCharIndex in fenRows[fenRowIndex]) {\n        let movedPieceFenChar = this.formatFenChar(movedPiece)\n        if (fenRows[fenRowIndex][fenCharIndex] === movedPieceFenChar) {\n          console.log(`fenRowIndex:${fenRowIndex}`)\n          if (\n            9 - fenRowIndex === movedPiece.row &&\n            Number(fenCharIndex) === movedPiece.col\n          ) {\n            console.log('updating fen')\n            let movedPieceCharIndexInFen = this.getIndexInFen(movedPiece)\n            console.log('movedPieceCharIndexInFen', movedPieceCharIndexInFen)\n            console.log('before assign 1 to moved piece char')\n            console.log(this.#fen)\n            this.#fen = replaceAt(this.#fen, movedPieceCharIndexInFen, '1')\n            console.log('after assign 1 to moved piece char')\n            console.log(this.#fen)\n            console.log('pass 2')\n            let toSquareCharIndexInFen = this.getIndexInFen(to)\n\n            this.#fen = replaceAt(\n              this.#fen,\n              toSquareCharIndexInFen,\n              movedPieceFenChar\n            )\n            return\n          }\n        }\n      }\n    }\n\n    // const movedPieceFenCharIndex = rows[movedPiece.row][movedPiece.col]\n\n    console.log(this.#fen)\n  }\n\n  getIndexInFen({ row, col }) {\n    return (9 - row) * 12 + col\n  }\n\n  //Helper functions\n  squareToPosition(square) {\n    console.log(square)\n    console.log(`square:${square}`)\n    const col = COLUMNS.indexOf(square[0])\n    //square length can be 2 or 3\n    const row = Number(square.replace(/^[a-k]/, '')) - 1\n    console.log(`square row: ${row}, col: ${col}`)\n    return { col, row }\n  }\n  positionToSquare(row, col) {\n    const rank = row + 1\n    const file = COLUMNS[col]\n    const square = `${file}${rank}`\n    return square\n  }\n\n  isOwnCitadel(square, movingPlayerColor) {\n    const ownCitadel =\n      movingPlayerColor === TamerlaneChess.#whiteColor\n        ? TamerlaneChess.#whiteCitadel\n        : TamerlaneChess.#blackCitadel\n\n    if (square === ownCitadel) return true\n    else return false\n  }\n\n  computeMoveInOpponentBoard(from, to) {\n    from.row = TamerlaneChess.#rowCount - from.row - 1\n    from.col = TamerlaneChess.#colCount - from.col - 1\n    to.row = TamerlaneChess.#rowCount - to.row - 1\n    to.col = TamerlaneChess.#colCount - to.colCount - 1\n    return { from, to }\n  }\n\n  computeOpponentFen(fen) {\n    // const lastSlahIndex = fen.lastIndexOf('/')\n    // let opponentFen = ''\n    // for (let i = 0; i < fen.length; i++) {\n    //   if (i === lastSlahIndex) {\n    //     break\n    //   }\n    //   opponentFen = `${fen[i]}${opponentFen}`\n    // }\n    // let remainStringIndex = lastSlahIndex\n    // for (; remainStringIndex < fen.length; remainStringIndex++) {\n    //   opponentFen = `${opponentFen}${fen[remainStringIndex]}`\n    // }\n    // return opponentFen\n  }\n\n  updateMoves(movingPlayerColor) {\n    for (let row = 0; row < TamerlaneChess.#rowCount; row++) {\n      for (let col = 0; col < TamerlaneChess.#colCount; col++) {\n        const piece = this.#board[row][col]\n        if (piece !== 0) {\n          if (piece.pawn) piece.updateValidMoves(this.#board, movingPlayerColor)\n          else piece.updateValidMoves(this.#board)\n        }\n      }\n    }\n  }\n\n  getOpponentValues() {}\n\n  draw(win, color) {}\n  getDangerMoves(color) {}\n\n  isChecked(color) {\n    // this.updateMoves()\n    // const dangerMoves = this.getDangerMoves(color)\n    // const kingPositions = []\n    // for (let i = 0; i < TamerlaneChess.#rowCount; i++) {\n    //   for (let j = 0; j < TamerlaneChess.#colCount; j++) {\n    //     const piece = this.#board[i][j]\n    //     if (typeof piece === 'object' && piece.king && piece.color === color) {\n    //       kingPositions.push([i, j])\n    //     }\n    //   }\n    // }\n    // //not gonna working\n    // if (kingPositions.length === 1 && dangerMoves.includes(kingPositions[0])) {\n    //   return true\n    // }\n    return false\n  }\n\n  printBoard() {\n    for (let i = this.#board.length - 1; i >= 0; i--) {\n      console.log(this.#board[i])\n    }\n  }\n\n  checkMate(color) {}\n\n  parseFen(fenType) {\n    console.log(fenType)\n    let fen\n    // if (fenType === FEN_TYPE.player) {\n    //   this.#board = this.#board\n    //   fen = this.#fen\n    // } else if (fenType === FEN_TYPE.opponent) {\n    //   this.#board = this.#opponentBoard\n    //   fen = this.#opponentFen\n    // } else throw Error('fen type not matching')\n    let fenCounter = 0\n    let row = TamerlaneChess.#rowCount - 1\n    let col = 0\n    let king\n    let piece\n    while (row >= 0 && fenCounter < this.#fen.length) {\n      let emptySquareCount = 0\n      switch (this.#fen[fenCounter]) {\n        case 'p':\n          this.#board[row][col] = new PawnOfPawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'b':\n          this.#board[row][col] = new ElephantPawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'c':\n          this.#board[row][col] = new CamelPawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'x':\n          this.#board[row][col] = new WarEnginePawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'r':\n          this.#board[row][col] = new RookPawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'n':\n          this.#board[row][col] = new KnightPawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 't':\n          this.#board[row][col] = new CatapultPawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'h':\n          this.#board[row][col] = new GiraffePawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'y':\n          this.#board[row][col] = new VizierPawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'q':\n          this.#board[row][col] = new KingPawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'e':\n          this.#board[row][col] = new GeneralPawn(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'f':\n          console.log(this.#board)\n          this.#board[row][col] = new Elephant(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'd':\n          this.#board[row][col] = new Camel(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'i':\n          this.#board[row][col] = new WarEngine(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'k':\n          this.#board[row][col] = new Rook(row, col, TamerlaneChess.#blackColor)\n          break\n        case 'a':\n          this.#board[row][col] = new Knight(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'm':\n          this.#board[row][col] = new Catapult(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'z':\n          this.#board[row][col] = new Giraffe(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'g':\n          this.#board[row][col] = new General(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 's':\n          king = new King(row, col, TamerlaneChess.#blackColor)\n          this.#blackKings.push(king)\n          this.#board[row][col] = king\n          break\n        case 'v':\n          this.#board[row][col] = new Vizier(\n            row,\n            col,\n            TamerlaneChess.#blackColor\n          )\n          break\n        case 'P':\n          this.#board[row][col] = new PawnOfPawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'B':\n          this.#board[row][col] = new ElephantPawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'C':\n          this.#board[row][col] = new CamelPawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'X':\n          this.#board[row][col] = new WarEnginePawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'R':\n          this.#board[row][col] = new RookPawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'N':\n          this.#board[row][col] = new KnightPawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'T':\n          this.#board[row][col] = new CatapultPawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'H':\n          this.#board[row][col] = new GiraffePawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'Y':\n          this.#board[row][col] = new VizierPawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'Q':\n          this.#board[row][col] = new KingPawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'E':\n          this.#board[row][col] = new GeneralPawn(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'F':\n          this.#board[row][col] = new Elephant(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'D':\n          this.#board[row][col] = new Camel(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'I':\n          this.#board[row][col] = new WarEngine(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'K':\n          this.#board[row][col] = new Rook(row, col, TamerlaneChess.#whiteColor)\n          break\n        case 'A':\n          this.#board[row][col] = new Knight(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'M':\n          this.#board[row][col] = new Catapult(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'Z':\n          this.#board[row][col] = new Giraffe(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'G':\n          this.#board[row][col] = new General(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case 'S':\n          king = new King(row, col, TamerlaneChess.#whiteColor)\n          this.#whiteKings.push(king)\n          this.#board[row][col] = king\n          break\n        case 'V':\n          this.#board[row][col] = new Vizier(\n            row,\n            col,\n            TamerlaneChess.#whiteColor\n          )\n          break\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          emptySquareCount = Number(this.#fen[fenCounter])\n          break\n        case '/':\n        case ' ':\n          row -= 1\n          col = 0\n          fenCounter++\n          continue\n        default:\n          console.log('Fen ERROR')\n          return\n      }\n      if (emptySquareCount === 0) col += 1\n      else {\n        for (let i = 0; i < emptySquareCount; i++) {\n          col += 1\n          this.#board[row][col] = 0\n        }\n      }\n\n      fenCounter++\n    }\n  }\n}\nObject.assign(TamerlaneChess.prototype, positionChecker())\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/helper/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Camel.js",["142"],"import NoneSlidePiece from './NoneSlidePiece'\n\nexport default class Camel extends NoneSlidePiece {\n  static _directions = [\n    { rowDir: -3, colDir: 1 },\n    { rowDir: -3, colDir: -1 },\n    { rowDir: -1, colDir: 3 },\n    { rowDir: -1, colDir: -3 },\n    { rowDir: 1, colDir: 3 },\n    { rowDir: 1, colDir: -3 },\n    { rowDir: 3, colDir: 1 },\n    { rowDir: 3, colDir: -1 },\n  ]\n  static fenChar = \"d\"\n  \n  constructor(rowDir, col, color) {\n    super(rowDir, col, color)\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Catapult.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Elephant.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/General.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Knight.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Vizier.js",["143"],"import NoneSlidePiece from './NoneSlidePiece'\n\nexport default class Vizier extends NoneSlidePiece {\n  static _directions = [\n    { rowDir: -1, colDir: 0 },\n    { rowDir: 0, colDir: 1 },\n    { rowDir: 1, colDir: 0 },\n    { rowDir: 0, colDir: -1 },\n  ]\n  static fenChar = 'v'\n  constructor(row, col, color) {\n    super(row, col, color)\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/WarEngine.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Giraffe.js",["144"],"import Piece from './Piece'\n\nexport default class Giraffe extends Piece {\n  static #directions = [\n    { rowDir: -1, colDir: 1 },\n    { rowDir: 1, colDir: 1 },\n    { rowDir: 1, colDir: -1 },\n    { rowDir: -1, colDir: -1 },\n  ]\n  static fenChar = 'z'\n\n  validMoves(board) {\n    const moves = []\n    let currentCol\n    let currentRow\n    for (const { rowDir, colDir } of Giraffe.#directions) {\n      currentCol = this.col + rowDir\n      currentRow = this.row + colDir\n      let piece = board[currentCol][currentRow]\n    }\n\n    return moves\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Rook.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Pawn.js",["145","146"],"import Piece from './Piece'\nimport Camel from './Camel'\nimport Knight from './Knight'\nimport General from './General'\nimport Catapult from './Catapult'\nimport Vizier from './Vizier'\nimport WarEngine from './WarEngine'\nimport Giraffe from './Giraffe'\nimport Elephant from './Elephant'\nimport Rook from './Rook'\nimport AdventitiousKing from './AdventitiousKing'\nimport Prince from './Prince'\nimport { COLOR } from '../types'\nimport { getMoveList, SuperArray } from '../helper'\nclass Pawn extends Piece {\n  static _diagonalColsIncrementValues = [-1, 1]\n  constructor(row, col, color, fenChar) {\n    super(row, col, color, fenChar)\n    if (this.constructor === Pawn) {\n      throw Error('Pawn can not be instated')\n    }\n\n    this.pawn = true\n  }\n\n  updateValidMoves(board, playerColor) {\n    this.moveList = this.validMoves(board, playerColor)\n  }\n\n  isPieceOpponent(row, col, board) {\n    const attackedPiece = board[row][col]\n    if (attackedPiece !== 0 && attackedPiece.color !== this.color) {\n      return true\n    }\n    return false\n  }\n\n  validMoves(board, playerColor) {\n    if (playerColor !== COLOR.white && playerColor !== COLOR.black) {\n      throw Error('No matching player color with black or white')\n    }\n    const moves = []\n    let row\n    let col\n\n    const rowIncrementValue = playerColor === this.color ? 1 : -1\n    row = this.row + rowIncrementValue\n\n    //UP\n    col = this.col\n    if (\n      this.IsPositionInBoard(row, col) &&\n      this.isSquareEmpty(row, col, board)\n    ) {\n      moves.push({ row, col })\n    }\n\n    let colIncrementValue\n    for (colIncrementValue of Pawn._diagonalColsIncrementValues) {\n      col = this.col + colIncrementValue\n      if (\n        this.IsPositionInBoard(row, col) &&\n        this.isPieceOpponent(row, col, board)\n      ) {\n        moves.push({ row, col })\n      }\n    }\n\n    return moves\n  }\n}\n\nexport class PawnOfPawn extends Pawn {\n  static #firstPromoted = 1\n  static #secondPromoted = 2\n  static #noPromoted = 0\n  static fenChar = 'p'\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedCount = 0\n    this.promotedToPiece = AdventitiousKing\n  }\n  validMoves(board, playerColor) {\n    switch (this.getPromotedType(playerColor)) {\n      //regular moves\n      case PawnOfPawn.#noPromoted:\n        return super.validMoves(board, playerColor)\n      case PawnOfPawn.#firstPromoted:\n        return SuperArray.getUniqueItemContextArray([\n          ...this.getForkMoves(board, playerColor),\n          ...this.getImmobileMoves(board, playerColor),\n        ])\n      case PawnOfPawn.#secondPromoted:\n        const kingPawnInıtPos =\n          playerColor === this.color ? { row: 2, col: 5 } : { row: 7, col: 5 }\n        return [kingPawnInıtPos]\n    }\n  }\n\n  getForkMoves(board, playerColor) {\n    const moves = []\n    let row, col, piece\n    for (row of board) {\n      for (piece of row) {\n        if (\n          this.isOpponentPiece(piece) &&\n          this.IsPositionInBoard(piece.row, piece.col + 2)\n        ) {\n          const rowIncrement = playerColor === this.color ? -1 : 1\n          const forkingRow = piece.row + rowIncrement\n          const forkingCol = piece.col + 1\n          if (this.IsPositionInBoard(forkingRow, forkingCol)) {\n            moves.push({ row: forkingRow, col: forkingCol })\n          }\n        }\n      }\n    }\n    return moves\n  }\n\n  getImmobileMoves(board, playerColor) {\n    const moves = []\n    let row\n    let piece\n    for (row of board) {\n      for (piece of row) {\n        if (this.isOpponentPiece(piece)) {\n          const opponentPieceMoves = getMoveList(board, piece, playerColor)\n          if (opponentPieceMoves.length === 0) {\n            let rowPos, colPos\n            const rowIncerementValue = playerColor === this.color ? -1 : 1\n            rowPos = piece.row + rowIncerementValue\n            let colIncrementValue\n            for (colIncrementValue of PawnOfPawn._diagonalColsIncrementValues) {\n              colPos = piece.col + colIncrementValue\n              if (this.IsPositionInBoard(rowPos, colPos)) {\n                moves.push({\n                  row: rowPos,\n                  col: colPos,\n                })\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return moves\n  }\n\n  getPromotedType(playerColor) {\n    if (\n      (playerColor === this.color &&\n        this.row === 9 &&\n        this.promotedCount === PawnOfPawn.#firstPromoted) ||\n      (playerColor !== this.color &&\n        this.row === 0 &&\n        this.promotedCount === PawnOfPawn.#firstPromoted)\n    ) {\n      return PawnOfPawn.#firstPromoted\n    } else if (\n      (playerColor !== this.color &&\n        this.row === 0 &&\n        this.promotedCount === PawnOfPawn.#secondPromoted) ||\n      (playerColor === this.color &&\n        this.row === 9 &&\n        this.promotedCount === PawnOfPawn.#secondPromoted)\n    ) {\n      console.log('second promoted')\n      return PawnOfPawn.#secondPromoted\n    }\n    return PawnOfPawn.#noPromoted\n  }\n}\n\nexport class KingPawn extends Pawn {\n  static fenChar = 'q'\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Prince\n  }\n  validMoves(board, playerColor) {\n    //eğer\n    if (true) {\n      return super.validMoves(board, playerColor)\n    }\n  }\n}\n\nexport class CamelPawn extends Pawn {\n  static fenChar = 'c'\n  constructor(row, col, color, fenChar) {\n    super(row, col, color, fenChar)\n    this.promotedToPiece = Camel\n    // this.fenChar = 'c'\n  }\n\n  validMoves(board, playerColor) {\n    return super.validMoves(board, playerColor)\n  }\n}\n\nexport class CatapultPawn extends Pawn {\n  static fenChar = 't'\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Catapult\n  }\n}\nexport class ElephantPawn extends Pawn {\n  static fenChar = 'b'\n  constructor(row, col, color, fenChar) {\n    super(row, col, color, fenChar)\n    this.promotedToPiece = Elephant\n  }\n}\nexport class GeneralPawn extends Pawn {\n  static fenChar = 'e'\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = General\n  }\n}\nexport class GiraffePawn extends Pawn {\n  static fenChar = 'h'\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Giraffe\n  }\n}\nexport class KnightPawn extends Pawn {\n  static fenChar = 'n'\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Knight\n  }\n}\nexport class RookPawn extends Pawn {\n  static fenChar = 'r'\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Rook\n  }\n}\nexport class VizierPawn extends Pawn {\n  static fenChar = 'y'\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = Vizier\n  }\n}\nexport class WarEnginePawn extends Pawn {\n  static fenChar = 'x'\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.promotedToPiece = WarEngine\n  }\n}\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/NoneSlidePiece.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Piece.js",["147"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/types/index.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/King.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessReducers.js",["148","149","150"],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/reducers/tamerlaneChessActionTypes.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/helper/Fen.js",[],"/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/AdventitiousKing.js",["151"],"import Piece from './Piece'\n\nimport { KingDirectionsObj, NoneSlidePieceMovesObj } from '../helper'\n\nexport default class AdventitiousKing extends Piece {\n  constructor(row, col, color) {\n    super(row, col, color)\n    this.king = true\n    this.fenChar = 'j'\n  }\n\n  validMoves(board, playerColor) {\n    const ownCitadel =\n      playerColor === 'w' ? { row: 1, col: 12 } : { row: 8, col: -1 }\n    if (true) {\n      return this.noneSlidePieceMoves(board)\n    }\n  }\n}\n\nObject.assign(\n  AdventitiousKing.prototype,\n  NoneSlidePieceMovesObj,\n  KingDirectionsObj\n)\n","/home/muzaffer/Desktop/My Projects/tamerlane-chess/src/tamerlane-chess/Pieces/Prince.js",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":24,"column":13,"nodeType":"158","messageId":"159","endLine":24,"endColumn":24},{"ruleId":"156","severity":1,"message":"160","line":24,"column":26,"nodeType":"158","messageId":"159","endLine":24,"endColumn":33},{"ruleId":"156","severity":1,"message":"161","line":100,"column":9,"nodeType":"158","messageId":"159","endLine":100,"endColumn":20},{"ruleId":"156","severity":1,"message":"162","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":26},{"ruleId":"156","severity":1,"message":"163","line":1,"column":28,"nodeType":"158","messageId":"159","endLine":1,"endColumn":36},{"ruleId":"156","severity":1,"message":"164","line":1,"column":38,"nodeType":"158","messageId":"159","endLine":1,"endColumn":45},{"ruleId":"156","severity":1,"message":"165","line":4,"column":8,"nodeType":"158","messageId":"159","endLine":4,"endColumn":13},{"ruleId":"156","severity":1,"message":"166","line":6,"column":10,"nodeType":"158","messageId":"159","endLine":6,"endColumn":34},{"ruleId":"156","severity":1,"message":"167","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":17},{"ruleId":"156","severity":1,"message":"168","line":171,"column":11,"nodeType":"158","messageId":"159","endLine":171,"endColumn":16},{"ruleId":"156","severity":1,"message":"169","line":286,"column":9,"nodeType":"158","messageId":"159","endLine":286,"endColumn":16},{"ruleId":"156","severity":1,"message":"170","line":306,"column":11,"nodeType":"158","messageId":"159","endLine":306,"endColumn":17},{"ruleId":"156","severity":1,"message":"171","line":450,"column":9,"nodeType":"158","messageId":"159","endLine":450,"endColumn":12},{"ruleId":"156","severity":1,"message":"172","line":462,"column":9,"nodeType":"158","messageId":"159","endLine":462,"endColumn":14},{"ruleId":"173","severity":1,"message":"174","line":16,"column":3,"nodeType":"175","messageId":"176","endLine":18,"endColumn":4},{"ruleId":"173","severity":1,"message":"174","line":11,"column":3,"nodeType":"175","messageId":"176","endLine":13,"endColumn":4},{"ruleId":"156","severity":1,"message":"168","line":19,"column":11,"nodeType":"158","messageId":"159","endLine":19,"endColumn":16},{"ruleId":"177","severity":1,"message":"178","line":84,"column":5,"nodeType":"179","messageId":"180","endLine":97,"endColumn":6},{"ruleId":"156","severity":1,"message":"181","line":102,"column":14,"nodeType":"158","messageId":"159","endLine":102,"endColumn":17},{"ruleId":"156","severity":1,"message":"182","line":2,"column":10,"nodeType":"158","messageId":"159","endLine":2,"endColumn":15},{"ruleId":"156","severity":1,"message":"183","line":10,"column":3,"nodeType":"158","messageId":"159","endLine":10,"endColumn":11},{"ruleId":"156","severity":1,"message":"184","line":11,"column":3,"nodeType":"158","messageId":"159","endLine":11,"endColumn":11},{"ruleId":"156","severity":1,"message":"185","line":12,"column":3,"nodeType":"158","messageId":"159","endLine":12,"endColumn":22},{"ruleId":"156","severity":1,"message":"186","line":13,"column":11,"nodeType":"158","messageId":"159","endLine":13,"endColumn":21},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'pieceSquare' is assigned a value but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useMemo' is defined but never used.","'Piece' is defined but never used.","'useTamerlaneChessContext' is defined but never used.","'PropTypes' is defined but never used.","'piece' is assigned a value but never used.","'changed' is assigned a value but never used.","'square' is assigned a value but never used.","'fen' is defined but never used.","'piece' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'col' is defined but never used.","'COLOR' is defined but never used.","'validFen' is defined but never used.","'fenToObj' is defined but never used.","'validPositionObject' is defined but never used.","'ownCitadel' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]